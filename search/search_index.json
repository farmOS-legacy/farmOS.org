{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"farmOS is a web-based application for farm management, planning, and record keeping. It is developed by a community of farmers, developers, researchers, and organizations with the aim of providing a standard platform for agricultural data collection and management. The farmOS server is built on top of Drupal , which makes it modular , extensible , and secure . The farmOS Field Kit app provides offline data entry in a native Android/iOS app, and as a progressive web app (PWA) at https://farmOS.app . Both are licensed under the GNU General Public License , which means they are free and open source . To learn how to use farmOS, refer to the User Guide . For more information, visit the farmOS Community Forum and read the Frequently Asked Questions . You can contribute to the project by making a donation or contributing in other ways. Quick Links \u00b6 Monthly call Forum: https://farmOS.discourse.group Chat: Matrix: #farmOS on Matrix.org (bridged to #farmOS IRC room on Libera.chat) #FIot on Matrix.org (Farm Internet of Things) IRC: #farmOS on Libera.chat (requires a registered name) Code repositories: Drupal.org: https://drupal.org/project/farm GitHub: https://github.com/farmOS Client app: https://github.com/farmOS/farmOS-client Twitter: @farmOSorg Twitter: @getFarmier Media \u00b6 Motivations \u00b6 In this video by Chris Callahan at UVM Extension 's Agricultural Engineering Program , Michael Stenta provides an overview of the motivations behind farmOS. Why he started the project, why he uses Drupal as the development framework and why it is open-source. Available on YouTube: https://youtu.be/ATUEWrlDbWw Open Source Stories: The Open Farmer \u00b6 farmOS was featured in the Red Hat Open Source Stories - Farming for the Future Series: \"The Open Farmer\" , available on YouTube: https://youtu.be/6L0is9gUowY OpenTEAM (Open Technology Ecosystem for Agricultural Management) \u00b6 farmOS is part of OpenTEAM , which is summarized in a video by Stonyfield , available on YouTube: https://youtu.be/U9YZ4H10ves GODAN Documentary Web Series \u00b6 farmOS was featured in the GODAN Documentary Web Series: \"OPEN FARMS\" , available on YouTube: https://youtu.be/bCOqg5iH6fM CNBC Special \u00b6 farmOS was featured in a CNBC special: CNBC: The Future Of Farming Is Utilizing Data In An Open Source Network Of Farmers . 2017 NOFA Summer Conference \u00b6 Michael Stenta presented a farmOS workshop at the 2017 NOFA Summer Conference . It covers the core features of farmOS, how to get started, where to find help, and how to contribute back to the project. The full workshop recording is available on YouTube: https://youtu.be/B8ouL9Et98o @farmOSorg on Twitter \u00b6 @farmOSorg","title":"Home"},{"location":"#quick-links","text":"Monthly call Forum: https://farmOS.discourse.group Chat: Matrix: #farmOS on Matrix.org (bridged to #farmOS IRC room on Libera.chat) #FIot on Matrix.org (Farm Internet of Things) IRC: #farmOS on Libera.chat (requires a registered name) Code repositories: Drupal.org: https://drupal.org/project/farm GitHub: https://github.com/farmOS Client app: https://github.com/farmOS/farmOS-client Twitter: @farmOSorg Twitter: @getFarmier","title":"Quick Links"},{"location":"#media","text":"","title":"Media"},{"location":"#motivations","text":"In this video by Chris Callahan at UVM Extension 's Agricultural Engineering Program , Michael Stenta provides an overview of the motivations behind farmOS. Why he started the project, why he uses Drupal as the development framework and why it is open-source. Available on YouTube: https://youtu.be/ATUEWrlDbWw","title":"Motivations"},{"location":"#open-source-stories-the-open-farmer","text":"farmOS was featured in the Red Hat Open Source Stories - Farming for the Future Series: \"The Open Farmer\" , available on YouTube: https://youtu.be/6L0is9gUowY","title":"Open Source Stories: The Open Farmer"},{"location":"#openteam-open-technology-ecosystem-for-agricultural-management","text":"farmOS is part of OpenTEAM , which is summarized in a video by Stonyfield , available on YouTube: https://youtu.be/U9YZ4H10ves","title":"OpenTEAM (Open Technology Ecosystem for Agricultural Management)"},{"location":"#godan-documentary-web-series","text":"farmOS was featured in the GODAN Documentary Web Series: \"OPEN FARMS\" , available on YouTube: https://youtu.be/bCOqg5iH6fM","title":"GODAN Documentary Web Series"},{"location":"#cnbc-special","text":"farmOS was featured in a CNBC special: CNBC: The Future Of Farming Is Utilizing Data In An Open Source Network Of Farmers .","title":"CNBC Special"},{"location":"#2017-nofa-summer-conference","text":"Michael Stenta presented a farmOS workshop at the 2017 NOFA Summer Conference . It covers the core features of farmOS, how to get started, where to find help, and how to contribute back to the project. The full workshop recording is available on YouTube: https://youtu.be/B8ouL9Et98o","title":"2017 NOFA Summer Conference"},{"location":"#farmosorg-on-twitter","text":"@farmOSorg","title":"@farmOSorg on Twitter"},{"location":"donate/","text":"Donate to farmOS \u00b6 farmOS accepts donations through Open Source Collective , a 501c(6) Non-Profit. You can make one-time donations, or become an ongoing monthly sponsor, by following the link below and selecting the level of support you would like to provide. Donate: https://opencollective.com/farmOS Mission \u00b6 farmOS is a free and open source software project. We aim to build a standard platform for flexible farm planning, record keeping, and data management. Our priorities are data ownership, interoperability, and ease-of-use, with a \"farmer first\" focus. To learn more about the motivations behind farmOS, these videos provide some background: farmOS Motivations (Interview by Chris Callahan of UVM Extension ) OPEN FARMS (Episode 3 of the GODAN Documentary Web Series] The project is supported by a community of volunteers, developers, researchers, and organizations. If you or your organization would like to support the farmOS project, consider making a donation . Maintaining open source \u00b6 Developing open-source software is fundamentally different than closed source software that is owned by a single company or individual. farmOS was built from the beginning with a focus on enabling community participation. All planning, feature design, bug tracking, and roadmaps are open to public comment, and everyone is invited to take part in the design and decision making process. We believe that this approach results in better software. There are lots of other examples that back this up (and that farmOS itself builds on top of). Open source development amplifies community contributions by \"standing on the shoulders of giants\" . The single biggest challenge to open source projects is financial sustainability . There are ongoing costs to maintaining software, so open source communities rely on alternative funding strategies to keep projects alive and healthy. Funding farmOS \u00b6 By donating to farmOS , you can support the work that goes into managing the project and community. This includes: General development \u00b6 Feature development Planning and roadmaps Issue queue management Testing and bug fixes Dependency updates New version releases Coordinating larger development initiatives Community infrastructure \u00b6 farmOS.org website Code repositories Monthly calls Chat rooms Contributor on-boarding Documentation \u00b6 User guides, videos, screencasts Developer documentation Translations Transparency \u00b6 All contributions made through the farmOS Open Collective , as well as all expenses deducted from it, are publicly visible. This provides a radically transparent view into how the farmOS collective manages its budget. Become a supporter \u00b6 We need your help to keep the farmOS project going. Make a donation now ! And \"THANK YOU\" to everyone who has supported farmOS already. Sincerely, The farmOS Maintainers","title":"Donate"},{"location":"donate/#donate-to-farmos","text":"farmOS accepts donations through Open Source Collective , a 501c(6) Non-Profit. You can make one-time donations, or become an ongoing monthly sponsor, by following the link below and selecting the level of support you would like to provide. Donate: https://opencollective.com/farmOS","title":"Donate to farmOS"},{"location":"donate/#mission","text":"farmOS is a free and open source software project. We aim to build a standard platform for flexible farm planning, record keeping, and data management. Our priorities are data ownership, interoperability, and ease-of-use, with a \"farmer first\" focus. To learn more about the motivations behind farmOS, these videos provide some background: farmOS Motivations (Interview by Chris Callahan of UVM Extension ) OPEN FARMS (Episode 3 of the GODAN Documentary Web Series] The project is supported by a community of volunteers, developers, researchers, and organizations. If you or your organization would like to support the farmOS project, consider making a donation .","title":"Mission"},{"location":"donate/#maintaining-open-source","text":"Developing open-source software is fundamentally different than closed source software that is owned by a single company or individual. farmOS was built from the beginning with a focus on enabling community participation. All planning, feature design, bug tracking, and roadmaps are open to public comment, and everyone is invited to take part in the design and decision making process. We believe that this approach results in better software. There are lots of other examples that back this up (and that farmOS itself builds on top of). Open source development amplifies community contributions by \"standing on the shoulders of giants\" . The single biggest challenge to open source projects is financial sustainability . There are ongoing costs to maintaining software, so open source communities rely on alternative funding strategies to keep projects alive and healthy.","title":"Maintaining open source"},{"location":"donate/#funding-farmos","text":"By donating to farmOS , you can support the work that goes into managing the project and community. This includes:","title":"Funding farmOS"},{"location":"donate/#general-development","text":"Feature development Planning and roadmaps Issue queue management Testing and bug fixes Dependency updates New version releases Coordinating larger development initiatives","title":"General development"},{"location":"donate/#community-infrastructure","text":"farmOS.org website Code repositories Monthly calls Chat rooms Contributor on-boarding","title":"Community infrastructure"},{"location":"donate/#documentation","text":"User guides, videos, screencasts Developer documentation Translations","title":"Documentation"},{"location":"donate/#transparency","text":"All contributions made through the farmOS Open Collective , as well as all expenses deducted from it, are publicly visible. This provides a radically transparent view into how the farmOS collective manages its budget.","title":"Transparency"},{"location":"donate/#become-a-supporter","text":"We need your help to keep the farmOS project going. Make a donation now ! And \"THANK YOU\" to everyone who has supported farmOS already. Sincerely, The farmOS Maintainers","title":"Become a supporter"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 What is farmOS? \u00b6 What is the farmOS software used for? farmOS is a web-based application for agricultural management, planning, and record keeping. Who is using farmOS? \u00b6 Are there a lot of farms using farmOS? A brief list of farms that are using farmOS is available here: Farms using farmOS . Anyone using farmOS can add their farm's name to this list. You can also refer to the Drupal.org Usage Statistics for farmOS, which shows how many active farmOS installations are out there in the wild. Note that this only includes installations that have their \"Update\" module enabled. How do I use farmOS? \u00b6 How do I start using farmOS? Refer to the User Guide to get started with farmOS. Does farmOS cost money? The farmOS software itself is free. Hosting the software on a web server so that you can access it from anywhere requires paying for web hosting. Low-cost farmOS hosting is available through Farmier . Can I use farmOS on my laptop/desktop/phone/tablet? Yes! farmOS is a web application, which means it runs on any device that has a web browser. It uses the Bootstrap framework to ensure that it looks good on screen sizes big and small. Do I need internet access to use farmOS? In general: yes. farmOS uses Google Maps for its map base layers, which require an internet connection to access. And in most cases you will want to host your farmOS installation on a web server so that it is accessible to everyone who needs to use it. With a little ingenuity, however, it should be possible to run farmOS locally, with your own web server and locally hosted map tiles. You could be the first to try it! If you do, please share your experience so the rest of the farmOS community can learn along with you! Who owns the data that I enter into farmOS? You do. farmOS is not owned by any single group or individual, so neither is your data. You also have full access to the code that is storing and using that data! Why? Because farmOS is free open source software developed by a community of farmOS users. I see a security update warning. What should I do? Please follow the instructions in Updating farmOS Where do I get support if I have questions? The farmOS Community Forum is a great place to ask questions and learn from others who are using farmOS. How can I contribute to the project? \u00b6 Can I donate to the project. Yes, you can donate to the farmOS project through OpenCollective: Donate to farmOS Can I contribute to the project in other ways? Yes, there are many ways to contribute to the farmOS project. Where can I find news? \u00b6 Where are farmOS development updates posted? Each version of farmOS is released with a set of release notes that describe all of the changes included in the release, with links to detailed descriptions and community discussions. When farmOS is mentioned in the media, a link is added to the Press page. Updates on farmOS development are also available on the Farmier newsleter and Twitter account. Farmier is run by the lead developer of farmOS. Why farmOS? \u00b6 Why was the farmOS project started in the first place? Eric S. Raymond 's first main point in The Cathedral and the Bazaar answers this question well: Every good work of software starts by scratching a developer's personal itch. farmOS started as a hobby project for farm mapping, planning, and record keeping. It served to fill a gap in the existing software, and provide a generalized platform that other developers could build upon. It is now available for free as open source software . Why open source? \u00b6 Why was farmOS released under an open source license? Developing software in an open and collaborative fashion has many benefits. It encourages curiousity and innovation by allowing anyone to build their own ideas on top of it. These improvements can be shared with the rest of the community and merged into the core project itself. It allows for an ecosystem of organizations, companies, and individuals to work together towards a shared goal. Thus the community of people involved in developing and using the tools is not constrained to the staff and customers of a single company. Large companies and organizations around the world use and develop open source software every day. Google's internal open source documentation summarizes the benefits of combining efforts: \"cooperating is not a zero sum game and that by working together all participants may yield higher returns than the investment they make.\" What license is farmOS released under? As an extension of the Drupal project, farmOS is licensed under the GNU General Public License (GPL) v2+ . Who owns the copyright to farmOS? Similar to Drupal, all farmOS contributors retain copyright on their code, but agree to release it under the same license as Drupal and farmOS. If you are unable or unwilling to contribute a patch under the GPL version 2 or later, do not submit a patch. Who owns the farmOS trademark? farmOS is a registered trademark of Michael Stenta . For more information on the farmOS tradmark and acceptable usage, refer to the farmOS Trademark Guidelines . Why Drupal? \u00b6 Why was farmOS built on Drupal? Drupal is one of the most widely used open source web application frameworks, powering some of the largest websites on the internet. It has a huge community of users and developers who continue to push it forward, completely independent of farmOS. Drupal's core functionality can be extended with add-on modules. This means that new farmOS modules can be written to meet very specific requirements, and users can choose which modules they need and which they don't. For example, if you grow crops but you do not raise livestock, you can enable the Crop module, but leave the Livestock module turned off. Or if you are using a specific type of sensor to collect environmental data, you can turn on a module that is specifically made for that sensor. New modules can be written by any developer who understands Drupal. It is also possible to build a lot of things directly in the Drupal user interface, without writing any code. The Views and Rules modules are two great examples of this. A lot of the modules that come with farmOS are built as Features , which is a module that automatically builds new modules! And we can't forget the Openlayers module, which is used to build all the maps. Aside from flexibility, security is also a big priority in the Drupal community. Drupal sites can have multiple user logins, each with an assigned role and permissions. This allows very fine-grained access control. farmOS uses this to provide its own set of roles and permissions . Last but not least: internationalization and localization . Drupal is used worldwide, and it provides infrastructure to translate farmOS into any language. Anyone can contribute translations, and they can be shared with the rest of the farmOS community. If you are interested in contributing a translation in your language, open an issue in the issue queues and let's get started!","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#what-is-farmos","text":"What is the farmOS software used for? farmOS is a web-based application for agricultural management, planning, and record keeping.","title":"What is farmOS?"},{"location":"faq/#who-is-using-farmos","text":"Are there a lot of farms using farmOS? A brief list of farms that are using farmOS is available here: Farms using farmOS . Anyone using farmOS can add their farm's name to this list. You can also refer to the Drupal.org Usage Statistics for farmOS, which shows how many active farmOS installations are out there in the wild. Note that this only includes installations that have their \"Update\" module enabled.","title":"Who is using farmOS?"},{"location":"faq/#how-do-i-use-farmos","text":"How do I start using farmOS? Refer to the User Guide to get started with farmOS. Does farmOS cost money? The farmOS software itself is free. Hosting the software on a web server so that you can access it from anywhere requires paying for web hosting. Low-cost farmOS hosting is available through Farmier . Can I use farmOS on my laptop/desktop/phone/tablet? Yes! farmOS is a web application, which means it runs on any device that has a web browser. It uses the Bootstrap framework to ensure that it looks good on screen sizes big and small. Do I need internet access to use farmOS? In general: yes. farmOS uses Google Maps for its map base layers, which require an internet connection to access. And in most cases you will want to host your farmOS installation on a web server so that it is accessible to everyone who needs to use it. With a little ingenuity, however, it should be possible to run farmOS locally, with your own web server and locally hosted map tiles. You could be the first to try it! If you do, please share your experience so the rest of the farmOS community can learn along with you! Who owns the data that I enter into farmOS? You do. farmOS is not owned by any single group or individual, so neither is your data. You also have full access to the code that is storing and using that data! Why? Because farmOS is free open source software developed by a community of farmOS users. I see a security update warning. What should I do? Please follow the instructions in Updating farmOS Where do I get support if I have questions? The farmOS Community Forum is a great place to ask questions and learn from others who are using farmOS.","title":"How do I use farmOS?"},{"location":"faq/#how-can-i-contribute-to-the-project","text":"Can I donate to the project. Yes, you can donate to the farmOS project through OpenCollective: Donate to farmOS Can I contribute to the project in other ways? Yes, there are many ways to contribute to the farmOS project.","title":"How can I contribute to the project?"},{"location":"faq/#where-can-i-find-news","text":"Where are farmOS development updates posted? Each version of farmOS is released with a set of release notes that describe all of the changes included in the release, with links to detailed descriptions and community discussions. When farmOS is mentioned in the media, a link is added to the Press page. Updates on farmOS development are also available on the Farmier newsleter and Twitter account. Farmier is run by the lead developer of farmOS.","title":"Where can I find news?"},{"location":"faq/#why-farmos","text":"Why was the farmOS project started in the first place? Eric S. Raymond 's first main point in The Cathedral and the Bazaar answers this question well: Every good work of software starts by scratching a developer's personal itch. farmOS started as a hobby project for farm mapping, planning, and record keeping. It served to fill a gap in the existing software, and provide a generalized platform that other developers could build upon. It is now available for free as open source software .","title":"Why farmOS?"},{"location":"faq/#why-open-source","text":"Why was farmOS released under an open source license? Developing software in an open and collaborative fashion has many benefits. It encourages curiousity and innovation by allowing anyone to build their own ideas on top of it. These improvements can be shared with the rest of the community and merged into the core project itself. It allows for an ecosystem of organizations, companies, and individuals to work together towards a shared goal. Thus the community of people involved in developing and using the tools is not constrained to the staff and customers of a single company. Large companies and organizations around the world use and develop open source software every day. Google's internal open source documentation summarizes the benefits of combining efforts: \"cooperating is not a zero sum game and that by working together all participants may yield higher returns than the investment they make.\" What license is farmOS released under? As an extension of the Drupal project, farmOS is licensed under the GNU General Public License (GPL) v2+ . Who owns the copyright to farmOS? Similar to Drupal, all farmOS contributors retain copyright on their code, but agree to release it under the same license as Drupal and farmOS. If you are unable or unwilling to contribute a patch under the GPL version 2 or later, do not submit a patch. Who owns the farmOS trademark? farmOS is a registered trademark of Michael Stenta . For more information on the farmOS tradmark and acceptable usage, refer to the farmOS Trademark Guidelines .","title":"Why open source?"},{"location":"faq/#why-drupal","text":"Why was farmOS built on Drupal? Drupal is one of the most widely used open source web application frameworks, powering some of the largest websites on the internet. It has a huge community of users and developers who continue to push it forward, completely independent of farmOS. Drupal's core functionality can be extended with add-on modules. This means that new farmOS modules can be written to meet very specific requirements, and users can choose which modules they need and which they don't. For example, if you grow crops but you do not raise livestock, you can enable the Crop module, but leave the Livestock module turned off. Or if you are using a specific type of sensor to collect environmental data, you can turn on a module that is specifically made for that sensor. New modules can be written by any developer who understands Drupal. It is also possible to build a lot of things directly in the Drupal user interface, without writing any code. The Views and Rules modules are two great examples of this. A lot of the modules that come with farmOS are built as Features , which is a module that automatically builds new modules! And we can't forget the Openlayers module, which is used to build all the maps. Aside from flexibility, security is also a big priority in the Drupal community. Drupal sites can have multiple user logins, each with an assigned role and permissions. This allows very fine-grained access control. farmOS uses this to provide its own set of roles and permissions . Last but not least: internationalization and localization . Drupal is used worldwide, and it provides infrastructure to translate farmOS into any language. Anyone can contribute translations, and they can be shared with the rest of the farmOS community. If you are interested in contributing a translation in your language, open an issue in the issue queues and let's get started!","title":"Why Drupal?"},{"location":"app/privacy/","text":"Privacy Policy \u00b6 farmOS.app (Field Kit) Privacy Notice February 25th, 2019 Please read this document carefully before accessing or using this service! 1. Introduction \u00b6 farmOS.app is an Open Source farmOS client which you can use to connect to a farmOS server. Where you read farmOS , farmOS.org or we or us below, it refers to the farmOS open source project and community: https://farmOS.org Where you read 'the Service' in this document, it refers to the farmOS.app instances exposed on https://farmOS.app (or subdomains) and native apps by farmOS.org. farmOS.org provides several farmOS.app instances at https://farmOS.app and in native app form. Today these include: The primary web-based instance, currently accessed at https://farmOS.app The Android app in the Google Play Store, currently available at https://play.google.com/store/apps/details?id=org.farmos.app The iOS in the Apple App Store, currently available at https://itunes.apple.com/us/app/farmos/id1435644945 This agreement covers all of these instances, and any others that we may choose to provide on https://farmOS.app or any subdomain (https://*.farmOS.app), or new native apps. We might change which instances we run, and how they are accessed, at any time. This agreement does not cover farmOS.app instances hosted by anyone else. 2. Your Data Privacy and the farmOS Server \u00b6 In giving you access to the Service we collect the bare minimum of information required to expose any service via the web and native apps. This agreement does not cover your relationship with the farmOS server host! Your account details and preferences, records, files and any other data you syncronize to the are the responsibility of the farmOS server host, and it is the provider of that server's job to make sure your data is handled appropriately and that you are well informed. If you are using a farmOS hosting server provided by Farmier, https://farmier.com , you can find the relevant Privacy Policy and Terms of Service here: Farmier Privacy Policy - https://farmier.com/privacy Farmier Terms of Service - https://farmier.com/terms 3. What Data We Collect \u00b6 Data collected automatically \u00b6 We collect your IP address when you request access to the farmOS.app client from our web server. This data is collected under legitimate interest, as per GDPR Recital 49. We use GitHub Pages to host https://farmOS.app, so both farmOS.org and GitHub can see this information. We collect this information to support operational maintenance and to protect against malicious actions against our infrastructure. This data is deleted automatically after 180 days. Data collected if you opt-in to analytics \u00b6 All our analytics data is opt-in and fully anonymised . We don't record any personal or identifiable data for our analytics.","title":"Privacy Policy"},{"location":"app/privacy/#privacy-policy","text":"farmOS.app (Field Kit) Privacy Notice February 25th, 2019 Please read this document carefully before accessing or using this service!","title":"Privacy Policy"},{"location":"app/privacy/#1-introduction","text":"farmOS.app is an Open Source farmOS client which you can use to connect to a farmOS server. Where you read farmOS , farmOS.org or we or us below, it refers to the farmOS open source project and community: https://farmOS.org Where you read 'the Service' in this document, it refers to the farmOS.app instances exposed on https://farmOS.app (or subdomains) and native apps by farmOS.org. farmOS.org provides several farmOS.app instances at https://farmOS.app and in native app form. Today these include: The primary web-based instance, currently accessed at https://farmOS.app The Android app in the Google Play Store, currently available at https://play.google.com/store/apps/details?id=org.farmos.app The iOS in the Apple App Store, currently available at https://itunes.apple.com/us/app/farmos/id1435644945 This agreement covers all of these instances, and any others that we may choose to provide on https://farmOS.app or any subdomain (https://*.farmOS.app), or new native apps. We might change which instances we run, and how they are accessed, at any time. This agreement does not cover farmOS.app instances hosted by anyone else.","title":"1. Introduction"},{"location":"app/privacy/#2-your-data-privacy-and-the-farmos-server","text":"In giving you access to the Service we collect the bare minimum of information required to expose any service via the web and native apps. This agreement does not cover your relationship with the farmOS server host! Your account details and preferences, records, files and any other data you syncronize to the are the responsibility of the farmOS server host, and it is the provider of that server's job to make sure your data is handled appropriately and that you are well informed. If you are using a farmOS hosting server provided by Farmier, https://farmier.com , you can find the relevant Privacy Policy and Terms of Service here: Farmier Privacy Policy - https://farmier.com/privacy Farmier Terms of Service - https://farmier.com/terms","title":"2. Your Data Privacy and the farmOS Server"},{"location":"app/privacy/#3-what-data-we-collect","text":"","title":"3. What Data We Collect"},{"location":"app/privacy/#data-collected-automatically","text":"We collect your IP address when you request access to the farmOS.app client from our web server. This data is collected under legitimate interest, as per GDPR Recital 49. We use GitHub Pages to host https://farmOS.app, so both farmOS.org and GitHub can see this information. We collect this information to support operational maintenance and to protect against malicious actions against our infrastructure. This data is deleted automatically after 180 days.","title":"Data collected automatically"},{"location":"app/privacy/#data-collected-if-you-opt-in-to-analytics","text":"All our analytics data is opt-in and fully anonymised . We don't record any personal or identifiable data for our analytics.","title":"Data collected if you opt-in to analytics"},{"location":"community/contribute/","text":"Contribute \u00b6 If you are interested in contributing to farmOS, start by reading the CONTRIBUTING.md in the farmOS Git repository.","title":"Contribute"},{"location":"community/contribute/#contribute","text":"If you are interested in contributing to farmOS, start by reading the CONTRIBUTING.md in the farmOS Git repository.","title":"Contribute"},{"location":"community/farms/","text":"Farms using farmOS \u00b6 The following is a list of farms using farmOS. If you want your farm to be included in this list, add a comment to this issue on Github . Australia \u00b6 Eagle View Farm (Buckley, Victoria) Rosewood Farm (Lara, Victoria) Belgium \u00b6 Sheep Solution (Ernage, Namur) Brazil \u00b6 Olivopampa (Santana do Livramento, Rio Grande do Sul) Rancho Moretto (Emilian\u00f3polis, S\u00e3o Paulo) Canada \u00b6 Golden Maple Farm (Victoria, British Columbia) Chile \u00b6 Agribas (Melipilla, Region Metropolitana) Czech Republic \u00b6 Hospod\u00e1\u0159stv\u00ed Jaro\u0161ovice (T\u00fdn nad Vltavou, South Czech) Fiji \u00b6 Naitauba Gardens (Naitauba Island, Northern Lau Group) France \u00b6 Ferme des Ours (Boofzheim, Grand-Est) Germany \u00b6 Landw. Betrieb Fischer (Arberg, Bavaria) India \u00b6 Abhis Farm (Ayyampalayam, Dindigul, Tamilnadu) Italy \u00b6 Riso Corbetta (Rovasenda, Vercelli) Jamaica \u00b6 Grierfield Farms (Grierfield, St Ann) New Zealand \u00b6 Permakai (Waiuku, Auckland) Poland \u00b6 Piotr Ma\u0142kowski (Do\u0142ubowo, Podlasie) Portugal \u00b6 Quinta Vale da Lama (Lagos, Algarve) South Africa \u00b6 Canaan (Marina Beach, KwaZulu Natal) Spain \u00b6 Valldaura Labs (Barcelona, Catalonia) United Kingdon \u00b6 Corran Farm (St.Austell, Cornwall) Vale Head Farm (Stourbridge, West Midlands) United States \u00b6 All In Farm (Georgetown, Texas) Apple Creek Acres (Bismarck, North Dakota) BOTL Farm (Ashford, Connecticut) Cloud 9 Ranch (Greeneville, Tennessee) Counter Culture Organic Farm (Waialua, Hawai\u02bbi) Double Doc Ranch (Shell, Wyoming) FoodScaping Permaculture Farm (Cheshire, Oregon) Golden Avenue Urban Permaculture Farm (Eugene, Oregon) Grocholl and Sons Farms (Harrison, Illinois) Guard Well Farm (Holualoa, Hawai\u02bbi) Hampton Plantation (Owings, Maryland) Heniscity Farm (Pegram, Tennessee) Hesselridge Farm (Rochester, Washington) Lokoea Farms (Haleiwa, Hawai\u02bbi) Miles Smith Farm (Loudon, New Hampshire) Monarca Farm (Lajas, Puerto Rico) Moonstone Farm (Saranac Lake, New York) North Mountain Pastures (Newport, Pennsylvania) Patroon Land Farm (Voorheesville, New York) Pax Sam Place Urban Permaculture Community (Eugene, Oregon) Red Shirt Farm (Lanesborough, Massachusetts) Refugia Gardens (Flagstaff, Arizona) Right Mind Ag, Inc. (Sterling, Illinois) Satori Farms (Cave Junction, Oregon) Silver Market Gardens (Silver City, New Mexico) Stone Grown Farm (Mansfield, Connecticut) Tuckaway Farm (Lee, New Hampshire) University of New Hampshire (Durham, New Hampshire) Walden Creek Farm (Elgin, Texas) Wild Art Farm (Weed, Kentucky) Wolfe's Neck Farm (Freeport, Maine)","title":"Farms"},{"location":"community/farms/#farms-using-farmos","text":"The following is a list of farms using farmOS. If you want your farm to be included in this list, add a comment to this issue on Github .","title":"Farms using farmOS"},{"location":"community/farms/#australia","text":"Eagle View Farm (Buckley, Victoria) Rosewood Farm (Lara, Victoria)","title":"Australia"},{"location":"community/farms/#belgium","text":"Sheep Solution (Ernage, Namur)","title":"Belgium"},{"location":"community/farms/#brazil","text":"Olivopampa (Santana do Livramento, Rio Grande do Sul) Rancho Moretto (Emilian\u00f3polis, S\u00e3o Paulo)","title":"Brazil"},{"location":"community/farms/#canada","text":"Golden Maple Farm (Victoria, British Columbia)","title":"Canada"},{"location":"community/farms/#chile","text":"Agribas (Melipilla, Region Metropolitana)","title":"Chile"},{"location":"community/farms/#czech-republic","text":"Hospod\u00e1\u0159stv\u00ed Jaro\u0161ovice (T\u00fdn nad Vltavou, South Czech)","title":"Czech Republic"},{"location":"community/farms/#fiji","text":"Naitauba Gardens (Naitauba Island, Northern Lau Group)","title":"Fiji"},{"location":"community/farms/#france","text":"Ferme des Ours (Boofzheim, Grand-Est)","title":"France"},{"location":"community/farms/#germany","text":"Landw. Betrieb Fischer (Arberg, Bavaria)","title":"Germany"},{"location":"community/farms/#india","text":"Abhis Farm (Ayyampalayam, Dindigul, Tamilnadu)","title":"India"},{"location":"community/farms/#italy","text":"Riso Corbetta (Rovasenda, Vercelli)","title":"Italy"},{"location":"community/farms/#jamaica","text":"Grierfield Farms (Grierfield, St Ann)","title":"Jamaica"},{"location":"community/farms/#new-zealand","text":"Permakai (Waiuku, Auckland)","title":"New Zealand"},{"location":"community/farms/#poland","text":"Piotr Ma\u0142kowski (Do\u0142ubowo, Podlasie)","title":"Poland"},{"location":"community/farms/#portugal","text":"Quinta Vale da Lama (Lagos, Algarve)","title":"Portugal"},{"location":"community/farms/#south-africa","text":"Canaan (Marina Beach, KwaZulu Natal)","title":"South Africa"},{"location":"community/farms/#spain","text":"Valldaura Labs (Barcelona, Catalonia)","title":"Spain"},{"location":"community/farms/#united-kingdon","text":"Corran Farm (St.Austell, Cornwall) Vale Head Farm (Stourbridge, West Midlands)","title":"United Kingdon"},{"location":"community/farms/#united-states","text":"All In Farm (Georgetown, Texas) Apple Creek Acres (Bismarck, North Dakota) BOTL Farm (Ashford, Connecticut) Cloud 9 Ranch (Greeneville, Tennessee) Counter Culture Organic Farm (Waialua, Hawai\u02bbi) Double Doc Ranch (Shell, Wyoming) FoodScaping Permaculture Farm (Cheshire, Oregon) Golden Avenue Urban Permaculture Farm (Eugene, Oregon) Grocholl and Sons Farms (Harrison, Illinois) Guard Well Farm (Holualoa, Hawai\u02bbi) Hampton Plantation (Owings, Maryland) Heniscity Farm (Pegram, Tennessee) Hesselridge Farm (Rochester, Washington) Lokoea Farms (Haleiwa, Hawai\u02bbi) Miles Smith Farm (Loudon, New Hampshire) Monarca Farm (Lajas, Puerto Rico) Moonstone Farm (Saranac Lake, New York) North Mountain Pastures (Newport, Pennsylvania) Patroon Land Farm (Voorheesville, New York) Pax Sam Place Urban Permaculture Community (Eugene, Oregon) Red Shirt Farm (Lanesborough, Massachusetts) Refugia Gardens (Flagstaff, Arizona) Right Mind Ag, Inc. (Sterling, Illinois) Satori Farms (Cave Junction, Oregon) Silver Market Gardens (Silver City, New Mexico) Stone Grown Farm (Mansfield, Connecticut) Tuckaway Farm (Lee, New Hampshire) University of New Hampshire (Durham, New Hampshire) Walden Creek Farm (Elgin, Texas) Wild Art Farm (Weed, Kentucky) Wolfe's Neck Farm (Freeport, Maine)","title":"United States"},{"location":"community/maintainers/","text":"Maintainers \u00b6 Michael Stenta \u00b6 Founder, maintainer, and lead developer of farmOS Github: mstenta Drupal.org: m.stenta Jamie Gaehring \u00b6 Frontend developer, maintainer of farmOS Field Kit (aka farmOS-client ) and farmOS.js Github: jgaehring Paul Weidner \u00b6 Frontend/backend developer, maintainer of farmOS Aggregator and farmOS.py Github: paul121","title":"Maintainers"},{"location":"community/maintainers/#maintainers","text":"","title":"Maintainers"},{"location":"community/maintainers/#michael-stenta","text":"Founder, maintainer, and lead developer of farmOS Github: mstenta Drupal.org: m.stenta","title":"Michael Stenta"},{"location":"community/maintainers/#jamie-gaehring","text":"Frontend developer, maintainer of farmOS Field Kit (aka farmOS-client ) and farmOS.js Github: jgaehring","title":"Jamie Gaehring"},{"location":"community/maintainers/#paul-weidner","text":"Frontend/backend developer, maintainer of farmOS Aggregator and farmOS.py Github: paul121","title":"Paul Weidner"},{"location":"community/monthly-call/","text":"Monthly Call \u00b6 The farmOS community hosts a monthly call via Zoom . Anyone is welcome to join. Ask questions, brainstorm ideas, or just talk farming. Refer to the schedule below, and use the \"Join Call\" link to join the call. NOTE: In case you have problems joining a call, check the Riot.im chat room . Last minute updates or changes will be communicated there! Join Call \u00b6 Calls are currently held on the second Wednesday of the month, at 2pm Eastern US time. Note that Daylight Savings Time is observed in the US, so the time relative to UTC (Universal Time Coordinated) will change twice a year. The schedule below shows that, along with the actual UTC times for each call. UTC is for most purposes the same as GMT. Use this calendar file or view the schedule below. 2021 Schedule \u00b6 January 13th @ 2pm EST / 7pm UTC February 10th @ 2pm EST / 7pm UTC March 10th @ 2pm EDT / 7pm UTC April 14th @ 2pm EDT / 6pm UTC May 12th @ 2pm EDT / 6pm UTC June 9th @ 2pm EDT / 6pm UTC July 14th @ 2pm EDT / 6pm UTC August 11th @ 2pm EDT / 6pm UTC September 8th @ 2pm EDT / 6pm UTC October 13th @ 2pm EDT / 6pm UTC November 10th @ 2pm EST / 7pm UTC December 8th @ 2pm EST / 7pm UTC","title":"Monthly Call"},{"location":"community/monthly-call/#monthly-call","text":"The farmOS community hosts a monthly call via Zoom . Anyone is welcome to join. Ask questions, brainstorm ideas, or just talk farming. Refer to the schedule below, and use the \"Join Call\" link to join the call. NOTE: In case you have problems joining a call, check the Riot.im chat room . Last minute updates or changes will be communicated there!","title":"Monthly Call"},{"location":"community/monthly-call/#join-call","text":"Calls are currently held on the second Wednesday of the month, at 2pm Eastern US time. Note that Daylight Savings Time is observed in the US, so the time relative to UTC (Universal Time Coordinated) will change twice a year. The schedule below shows that, along with the actual UTC times for each call. UTC is for most purposes the same as GMT. Use this calendar file or view the schedule below.","title":"Join Call"},{"location":"community/monthly-call/#2021-schedule","text":"January 13th @ 2pm EST / 7pm UTC February 10th @ 2pm EST / 7pm UTC March 10th @ 2pm EDT / 7pm UTC April 14th @ 2pm EDT / 6pm UTC May 12th @ 2pm EDT / 6pm UTC June 9th @ 2pm EDT / 6pm UTC July 14th @ 2pm EDT / 6pm UTC August 11th @ 2pm EDT / 6pm UTC September 8th @ 2pm EDT / 6pm UTC October 13th @ 2pm EDT / 6pm UTC November 10th @ 2pm EST / 7pm UTC December 8th @ 2pm EST / 7pm UTC","title":"2021 Schedule"},{"location":"community/press/","text":"Press \u00b6 farmOS has been featured in the following articles, videos, and podcasts. If you would like to write about farmOS, contact m.stenta . 2021 \u00b6 2021 September 20th OpenTEAM Community News: From the Field: Using farmOS at Organic Valley 2021 September 9th NOFA/Mass: Correlating Produce Nutrient Levels with Soil Management 2021 May 5th VentureBeat: Linux Foundation launches open source agriculture infrastructure project 2021 May 5th Linux Foundation: Linux Foundation Launches Open Source Digital Infrastructure Project for Agriculture, Enables Global Collaboration Among Industry, Government and Academia 2021 March 30th The MicaSense Podcast: Episode 6 - Vital Agronomics 2020 \u00b6 2020 August 19th Opensensing: Open source AgTech IoT ecosystems 2020 August 17th North Queensland Register: Agtech companies told to adopt 'sharing attitude' to their technology 2020 August Nuffield Australia Report: If you want to go far, go together - The future of open source agtech 2020 July 23rd Free Software Foundation: People everywhere are standing up for free software 2020 July 7th OpenTEAM News: Growing community and capacity for interoperability 2020 May 22nd GOAT/OpenTEAM In-Depth Web Series: farmOS Aggregator Update 2020 March 14th LibrePlanet: Stewarding technological freedom in agriculture 2020 March 4th Future of Agriculture Podcast: FOA 195: Hacking the Farm with Open Source Technology 2020 February 26th CountryGuide: The open source farmer 2020 February 19th GOAT/OpenTEAM In-Depth Web Series: Knuth Farms 2020 February 19th GOAT/OpenTEAM In-Depth Web Series: Rothamsted Research 2020 February 17th GOAT/OpenTEAM In-Depth Web Series: Paicines Ranch 2019 \u00b6 2019 December 13th Mashable: This open source farming technology aims to combat climate change via soil health 2019 December 8th Salon: Open source technology could be a boon to farmers 2019 December 4th LWDW: Old MacTorvalds Had A Farm 2019 December 2nd Civil Eats: Open Source Technology Could Be a Boon to Farmers 2019 October 22nd CodingOverload: Open Source Project of the Month - farmOS 2019 September 27th GreenBiz: From the farm to the restaurant, how people are investing in regenerative agriculture 2019 September 17th Civil Eats: Investment in Regenerative Agriculture Connects the Dots Between Soil and Plate 2019 August 22nd GOAT/OpenTEAM In-Depth Web Series: farmOS 2019 August 1st Morning Ag Clips: Global collaboration creates open source climate solutions 2019 August 1st No-Till Farmer: Global Collaborative Launches OpenTEAM to Address Soil Health and Mitigate Climate Change 2019 July 31st Foundation for Food and Agriculture Research: Global Collaborative Launches OpenTEAM\u2122 2019 July 23rd Red Hat Open Source Stories: Farming for the Future - The Open Farmer 2019 May 21st RFC Lab: Ramping up for 2019 RFC Food/Soil survey 2019 May 8th Red Hat Open Source Stories: Farming for the Future 2019 March 21st Acquia Drupal Stories: Farmer First, Drupalist Always: Michael Stenta 2019 March 20th Farmier: farmOS 1.0 - A long journey for a small number 2018 \u00b6 2018 November Better Farming Magazine (November 2018): Open source + open mind = endless opportunities 2018 November 1st Frontiers in Ecology and the Environment: Global citizen science for people 2018 October 31st H2S Media: 7 Open source and Free Farm management software 2018 September 18th RFC Lab: In-season report: August 2018 2018 September 6th Jamie Gaehring: Local Development 2018 March 27th Dorn Cox, founder of farmOS, earns new national conservation award 2018 February 13th Morning Ag Clips: Wolfe\u2019s Neck's Dorn Cox earns national award 2018 February 6th Wolfe's Neck Center: Research Director, Dorn Cox, Receives Bennett Award 2018 January 22nd High Mowing Organic Seeds: Crop Planning and Adaptation: How to Plan for Change to Achieve Success 2017 \u00b6 2017 SARE - Progress report: Community benchmarks for productivity and profitability for diversified pastured livestock farmers 2017 SARE - Project overview: Community benchmarks for productivity and profitability for diversified pastured livestock farmers 2017 November 21st UVM Extension AgEngineering: Produce Tracking and Traceability 2017 August 28th PASA Education Event - Pastured Livestock Research Group: Boosting Land and Feed Efficiency 2017 April 5th PASA Education Event - Advanced Farm Management Using FarmOS 2017 March 14th Tech Economy: Precision farming: la sfida dell\u2019agricoltura 4.0 \u00e8 open source 2017 January 24th AgroTIC: Les nouvelles technologies sont aussi un levier pour les petites exploitations 2017 January 10th Permaculture Research Institute: Open Source Tools for Permaculturists 2016 \u00b6 2016 December 6th FOSS Force: Family Farming and Open Source Wireless Networking 2016 December 5th CNBC: The Future Of Farming Is Utilizing Data In An Open Source Network Of Farmers 2016 November 24th GODAN: OPEN FARMS - GODAN Documentary Web Series - Episode 3 2016 November 22nd CNBC: Silicon Valley cultivates a life on the American family farm 2016 November 4th PC Magazine: Smart Farms: Big Data Meets Big Ag 2016 September 20th Farm Hack: Farm Hack @ the Smithsonian Cooper Hewitt Design Museum 2016 September 4th CT NOFA Geanings Newsletter: farmOS Workshop at 2016 NOFA Summer Conference on YouTube 2016 August 29th Farm Hack: Video: FarmOS @ NOFA summer conference 2016 July 30th ATTRA Sustainable Agriculture: farmOS Releases Beta 12 Version and Beekeeping Module 2016 May 16th Sanmita: Three Cool Drupal-Based Software Projects 2016 April 19th Cooper Hewitt: COOPER HEWITT TO PRESENT \"BY THE PEOPLE: DESIGNING A BETTER AMERICA\" 2016 April 1st Lancaster Farming: Using 'Big Data' Can Prevent Big Problems on the Farm 2016 February 5th Maryland Organic Food & Farming Association: Open Source Agricultural Tools with Farm Hack 2015 \u00b6 2015 December 13th Farm Hack: FarmOS: A Drupal-based farm management solution 2015 November 30th Farm Hack: Integrating Open Source: the Open Agriculture Learning Series 2015 November 27th opensource.com: Top 5: Drupal-based farmOS, Blender for astrophysics, Qora cryptocurrency, and more 2015 November 24th opensource.com: Drupal-based farmOS manages food, farmers, and community 2015 November 16th Makery: Sensprout and Techrice, Japanese prototypes for agriculture 2015 November 9th The Greenhorns: it\u2019s like a csa \u2013 but with software 2015 October 2nd HNGN: Robots, iPhones Now Make Tending Crops Easier For Farmers 2015 September 22nd Popular Science: Let the Robots and iPhones Tend the Crops 2015 April 19th The Greenhorns: proving that not all farmers are luddites 2015 March 30th The Greenhorns: farmOS beta 1 release 2014 \u00b6 2014 December 25th Our World (United Nations University): Open Sauce/Source for the Food Revolution 2014 November 27th opensource.com: The new food revolution is open","title":"Press"},{"location":"community/press/#press","text":"farmOS has been featured in the following articles, videos, and podcasts. If you would like to write about farmOS, contact m.stenta .","title":"Press"},{"location":"community/press/#2021","text":"2021 September 20th OpenTEAM Community News: From the Field: Using farmOS at Organic Valley 2021 September 9th NOFA/Mass: Correlating Produce Nutrient Levels with Soil Management 2021 May 5th VentureBeat: Linux Foundation launches open source agriculture infrastructure project 2021 May 5th Linux Foundation: Linux Foundation Launches Open Source Digital Infrastructure Project for Agriculture, Enables Global Collaboration Among Industry, Government and Academia 2021 March 30th The MicaSense Podcast: Episode 6 - Vital Agronomics","title":"2021"},{"location":"community/press/#2020","text":"2020 August 19th Opensensing: Open source AgTech IoT ecosystems 2020 August 17th North Queensland Register: Agtech companies told to adopt 'sharing attitude' to their technology 2020 August Nuffield Australia Report: If you want to go far, go together - The future of open source agtech 2020 July 23rd Free Software Foundation: People everywhere are standing up for free software 2020 July 7th OpenTEAM News: Growing community and capacity for interoperability 2020 May 22nd GOAT/OpenTEAM In-Depth Web Series: farmOS Aggregator Update 2020 March 14th LibrePlanet: Stewarding technological freedom in agriculture 2020 March 4th Future of Agriculture Podcast: FOA 195: Hacking the Farm with Open Source Technology 2020 February 26th CountryGuide: The open source farmer 2020 February 19th GOAT/OpenTEAM In-Depth Web Series: Knuth Farms 2020 February 19th GOAT/OpenTEAM In-Depth Web Series: Rothamsted Research 2020 February 17th GOAT/OpenTEAM In-Depth Web Series: Paicines Ranch","title":"2020"},{"location":"community/press/#2019","text":"2019 December 13th Mashable: This open source farming technology aims to combat climate change via soil health 2019 December 8th Salon: Open source technology could be a boon to farmers 2019 December 4th LWDW: Old MacTorvalds Had A Farm 2019 December 2nd Civil Eats: Open Source Technology Could Be a Boon to Farmers 2019 October 22nd CodingOverload: Open Source Project of the Month - farmOS 2019 September 27th GreenBiz: From the farm to the restaurant, how people are investing in regenerative agriculture 2019 September 17th Civil Eats: Investment in Regenerative Agriculture Connects the Dots Between Soil and Plate 2019 August 22nd GOAT/OpenTEAM In-Depth Web Series: farmOS 2019 August 1st Morning Ag Clips: Global collaboration creates open source climate solutions 2019 August 1st No-Till Farmer: Global Collaborative Launches OpenTEAM to Address Soil Health and Mitigate Climate Change 2019 July 31st Foundation for Food and Agriculture Research: Global Collaborative Launches OpenTEAM\u2122 2019 July 23rd Red Hat Open Source Stories: Farming for the Future - The Open Farmer 2019 May 21st RFC Lab: Ramping up for 2019 RFC Food/Soil survey 2019 May 8th Red Hat Open Source Stories: Farming for the Future 2019 March 21st Acquia Drupal Stories: Farmer First, Drupalist Always: Michael Stenta 2019 March 20th Farmier: farmOS 1.0 - A long journey for a small number","title":"2019"},{"location":"community/press/#2018","text":"2018 November Better Farming Magazine (November 2018): Open source + open mind = endless opportunities 2018 November 1st Frontiers in Ecology and the Environment: Global citizen science for people 2018 October 31st H2S Media: 7 Open source and Free Farm management software 2018 September 18th RFC Lab: In-season report: August 2018 2018 September 6th Jamie Gaehring: Local Development 2018 March 27th Dorn Cox, founder of farmOS, earns new national conservation award 2018 February 13th Morning Ag Clips: Wolfe\u2019s Neck's Dorn Cox earns national award 2018 February 6th Wolfe's Neck Center: Research Director, Dorn Cox, Receives Bennett Award 2018 January 22nd High Mowing Organic Seeds: Crop Planning and Adaptation: How to Plan for Change to Achieve Success","title":"2018"},{"location":"community/press/#2017","text":"2017 SARE - Progress report: Community benchmarks for productivity and profitability for diversified pastured livestock farmers 2017 SARE - Project overview: Community benchmarks for productivity and profitability for diversified pastured livestock farmers 2017 November 21st UVM Extension AgEngineering: Produce Tracking and Traceability 2017 August 28th PASA Education Event - Pastured Livestock Research Group: Boosting Land and Feed Efficiency 2017 April 5th PASA Education Event - Advanced Farm Management Using FarmOS 2017 March 14th Tech Economy: Precision farming: la sfida dell\u2019agricoltura 4.0 \u00e8 open source 2017 January 24th AgroTIC: Les nouvelles technologies sont aussi un levier pour les petites exploitations 2017 January 10th Permaculture Research Institute: Open Source Tools for Permaculturists","title":"2017"},{"location":"community/press/#2016","text":"2016 December 6th FOSS Force: Family Farming and Open Source Wireless Networking 2016 December 5th CNBC: The Future Of Farming Is Utilizing Data In An Open Source Network Of Farmers 2016 November 24th GODAN: OPEN FARMS - GODAN Documentary Web Series - Episode 3 2016 November 22nd CNBC: Silicon Valley cultivates a life on the American family farm 2016 November 4th PC Magazine: Smart Farms: Big Data Meets Big Ag 2016 September 20th Farm Hack: Farm Hack @ the Smithsonian Cooper Hewitt Design Museum 2016 September 4th CT NOFA Geanings Newsletter: farmOS Workshop at 2016 NOFA Summer Conference on YouTube 2016 August 29th Farm Hack: Video: FarmOS @ NOFA summer conference 2016 July 30th ATTRA Sustainable Agriculture: farmOS Releases Beta 12 Version and Beekeeping Module 2016 May 16th Sanmita: Three Cool Drupal-Based Software Projects 2016 April 19th Cooper Hewitt: COOPER HEWITT TO PRESENT \"BY THE PEOPLE: DESIGNING A BETTER AMERICA\" 2016 April 1st Lancaster Farming: Using 'Big Data' Can Prevent Big Problems on the Farm 2016 February 5th Maryland Organic Food & Farming Association: Open Source Agricultural Tools with Farm Hack","title":"2016"},{"location":"community/press/#2015","text":"2015 December 13th Farm Hack: FarmOS: A Drupal-based farm management solution 2015 November 30th Farm Hack: Integrating Open Source: the Open Agriculture Learning Series 2015 November 27th opensource.com: Top 5: Drupal-based farmOS, Blender for astrophysics, Qora cryptocurrency, and more 2015 November 24th opensource.com: Drupal-based farmOS manages food, farmers, and community 2015 November 16th Makery: Sensprout and Techrice, Japanese prototypes for agriculture 2015 November 9th The Greenhorns: it\u2019s like a csa \u2013 but with software 2015 October 2nd HNGN: Robots, iPhones Now Make Tending Crops Easier For Farmers 2015 September 22nd Popular Science: Let the Robots and iPhones Tend the Crops 2015 April 19th The Greenhorns: proving that not all farmers are luddites 2015 March 30th The Greenhorns: farmOS beta 1 release","title":"2015"},{"location":"community/press/#2014","text":"2014 December 25th Our World (United Nations University): Open Sauce/Source for the Food Revolution 2014 November 27th opensource.com: The new food revolution is open","title":"2014"},{"location":"community/supporters/","text":"Supporters \u00b6 The farmOS project is made possible by many supporters. If you would like to support farmOS, consider making a donation . Organizations \u00b6 Farmier Farm Hack Green Start Cornell Soil Health Public Lab MapKnitter USDA/NRCS Soil Survey Wolfe's Neck Center for Agriculture and the Environment GODAN The Agroecology Lab Strafford County Conservation District Cheshire County Conservation District Sullivan County Conservation District Coos County Conservation District Long Island Sound RCPP Pennsylvania Association for Sustainable Agriculture University of Vermont Extension Vermont Agency of Agriculture Food & Markets Vermont Housing & Conservation Board Bionutrient Food Association Globetrotter Foundation Paicines Ranch GOAT: Gathering for Open Agricultural Technology Vermont Vegetable and Berry Growers Association PageKite Natural Resources Conservation Service The United States Forest Service - International Programs The National Forestry Authority of Uganda Our Sci Foundation for Food and Agriculture Research Savory Institute Heniscity Farm Echo Farm Rothamsted Research Individuals \u00b6 Michael Stenta Dorn Cox RJ Steinert Don Blair Bruce Dawson Pol Dellaiera Phil Anzel Jeff Warren Sam Chapatwala Joel Baranick Svenn Are Bjerkem Kenny Robinson Dan Kittredge David Forster Greg Austic Brooks Miller Franklin Egan Chris Callahan Stephen Woodbridge Andy Grimley Sallie Calhoun Becky Maden Vern Grubinger Andrew Williams Deon Nteza Paul Weidner Megan Stanton Ankita Raturi Juliet Norton Philipp Kuecuekyan Michael Parker Mike Brunt Mary and Frank Stenta Mary and John Stanton Vinayak Kumbhakern David Caplin Marty Van Diest Karl-Jon Sparrman Henry Luciano Mattias Sandstr\u00f6m Cl\u00e9ment Gandon Allen Tucker Contributors \u00b6 This project exists thanks to all the people who contribute. OpenCollective Backers \u00b6 Thank you to all our OpenCollective backers! [ Become a backer ] OpenCollective Sponsors \u00b6 Support this project by becoming an OpenCollective sponsor. Your logo will show up here with a link to your website. [ Become a sponsor ]","title":"Supporters"},{"location":"community/supporters/#supporters","text":"The farmOS project is made possible by many supporters. If you would like to support farmOS, consider making a donation .","title":"Supporters"},{"location":"community/supporters/#organizations","text":"Farmier Farm Hack Green Start Cornell Soil Health Public Lab MapKnitter USDA/NRCS Soil Survey Wolfe's Neck Center for Agriculture and the Environment GODAN The Agroecology Lab Strafford County Conservation District Cheshire County Conservation District Sullivan County Conservation District Coos County Conservation District Long Island Sound RCPP Pennsylvania Association for Sustainable Agriculture University of Vermont Extension Vermont Agency of Agriculture Food & Markets Vermont Housing & Conservation Board Bionutrient Food Association Globetrotter Foundation Paicines Ranch GOAT: Gathering for Open Agricultural Technology Vermont Vegetable and Berry Growers Association PageKite Natural Resources Conservation Service The United States Forest Service - International Programs The National Forestry Authority of Uganda Our Sci Foundation for Food and Agriculture Research Savory Institute Heniscity Farm Echo Farm Rothamsted Research","title":"Organizations"},{"location":"community/supporters/#individuals","text":"Michael Stenta Dorn Cox RJ Steinert Don Blair Bruce Dawson Pol Dellaiera Phil Anzel Jeff Warren Sam Chapatwala Joel Baranick Svenn Are Bjerkem Kenny Robinson Dan Kittredge David Forster Greg Austic Brooks Miller Franklin Egan Chris Callahan Stephen Woodbridge Andy Grimley Sallie Calhoun Becky Maden Vern Grubinger Andrew Williams Deon Nteza Paul Weidner Megan Stanton Ankita Raturi Juliet Norton Philipp Kuecuekyan Michael Parker Mike Brunt Mary and Frank Stenta Mary and John Stanton Vinayak Kumbhakern David Caplin Marty Van Diest Karl-Jon Sparrman Henry Luciano Mattias Sandstr\u00f6m Cl\u00e9ment Gandon Allen Tucker","title":"Individuals"},{"location":"community/supporters/#contributors","text":"This project exists thanks to all the people who contribute.","title":"Contributors"},{"location":"community/supporters/#opencollective-backers","text":"Thank you to all our OpenCollective backers! [ Become a backer ]","title":"OpenCollective Backers"},{"location":"community/supporters/#opencollective-sponsors","text":"Support this project by becoming an OpenCollective sponsor. Your logo will show up here with a link to your website. [ Become a sponsor ]","title":"OpenCollective Sponsors"},{"location":"community/trademark/","text":"farmOS Trademark Guidelines \u00b6 Version 1.0, November 2016 Introduction \u00b6 This document, the \"Policy,\" outlines the farmOS project's (the \"Project\") policy for the use of our trademarks. While our software is available under a free and open source software license, the copyright license does not include an implied right or license to use our trademark. The role of trademarks is to provide assurance about the quality of the products or services with which the trademark is associated. But because an open source license allows your unrestricted modification of the copyrighted software, we cannot be sure that your modifications to the software are ones that will not be misleading if distributed under the same name. Instead, this Policy describes the circumstances under which you may use our trademarks. In this Policy we are not trying to limit the lawful use of our trademarks, but rather describe for you what we consider the parameters of lawful use to be. Trademark law can be ambiguous, so we hope to provide enough clarity for you to understand whether we will consider your use licensed or non-infringing. The sections that follow describe what trademarks are covered by this Policy, as well as uses of the trademarks that are allowed without additional permission from us. If you want to use our trademarks in ways that are not described in this Policy, please see \"Where to get further information\" below for contact information. Any use that does not comply with this Policy or for which we have not separately provided written permission is not a use that we have approved, so you must decide for yourself whether the use is nevertheless lawful. Our commitment to open source principles \u00b6 We want to encourage and facilitate the use of our trademarks by the community, but do so in a way that still ensures that the trademarks are meaningful as a source and quality indicator for our software and the associated goods and services and continue to embody the high reputation of the software and the community associated with it. This Policy therefore tries to strike the proper balance between: 1) our need to ensure that our trademarks remain reliable indicators of the qualities that they are meant to preserve and 2) our community members' desire to be full participants in the Project. Trademarks subject to the guidelines \u00b6 Our trademarks \u00b6 This Policy covers: Our word trademarks and service marks (the \"Word Marks\"): Mark Common descriptive name for the goods or services farmOS Computer software for use in farm planning and management Our logos (the \"Logos\"): And the unique visual styling of our website and packaging (the \"Trade Dress\"). This Policy encompasses all trademarks and service marks, whether Word Marks, Logos or Trade Dress, which are collectively referred to as the \u201cMarks.\u201d Some Marks may not be registered, but registration does not equal ownership of trademarks. This Policy covers our Marks whether they are registered or not. Universal considerations for all uses \u00b6 Whenever you use one of the Marks, you must always do so in a way that does not mislead anyone, either directly or by omission, about exactly what they are getting and from whom. The law reflects this requirement in two major ways described in more detail below: it prohibits creating a \"likelihood of confusion\" but allows for \"nominative use.\" For example, you cannot say you are distributing the farmOS software when you're distributing a modified version of it, because people would be confused when they are not getting the same features and functionality they would get if they downloaded the software directly from us. You also cannot use our logo on your website in a way that suggests that your website is an official website or that we endorse your website. You can, though, say you like the farmOS software, that you participate in the farmOS community, that you are providing an unmodified version of the farmOS software, or that you wrote a book describing how to use the farmOS software. This fundamental requirement, that it is always clear to people what they are getting and from whom, is reflected throughout this Policy. It should also serve as your guide if you are not sure about how you are using the Marks. In addition: You may not use the Marks in association with the use or distribution of software if you are also not in compliance with the copyright license for the software. You may not use or register, in whole or in part, the Marks as part of your own trademark, service mark, domain name, company name, trade name, product name or service name. Trademark law does not allow your use of names or trademarks that are too similar to ours. You therefore may not use an obvious variation of any of our Marks or any phonetic equivalent, foreign language equivalent, takeoff, or abbreviation for a similar or compatible product or service. We would consider the following too similar to one of our Marks: Any mark beginning or ending with the letters FARMOS You agree that you will not acquire any rights in the Marks and that any goodwill generated by your use of the Marks inures solely to our benefit. Use for software \u00b6 See Universal considerations for all uses , above, which also apply. Uses we consider non-infringing \u00b6 Distribution of unmodified source code or unmodified executable code we have compiled \u00b6 When you redistribute an unmodified copy of our software, you are not changing the quality or nature of it. Therefore, you may retain the Word Marks and the Logos we have placed on the software to identify your redistribution -- whether that redistribution is made by optical media, memory stick or download of unmodified source and executable code. This kind of use only applied if you are redistributing an official distribution from this Project that has not been changed in any way. You can find files for the Logos and approved designs for packaging on farmOS.org. Distribution of executable code that you have compiled, or modified code \u00b6 You may use the Word Marks, but not the Logos, to truthfully describe the origin of the software that you are providing, that is, that the code you are distributing is a modification of our software. You may say, for example, that \"this software is derived from the source code for farmOS software.\" You will need to remove the Logo data files. Of course, you can place your own trademarks or logos on versions of the software to which you have made substantive modifications, because by modifying the software you have become the origin of that exact version. In that case, you should not use our Logos. Statements about compatibility, interoperability or derivation \u00b6 You may use the Word Marks, but not the Logos, to truthfully describe the relationship between your software and ours. Our Mark should be used after a verb or preposition that describes the relationship between your software and ours. So you may say, for example, \"Bob's software for the farmOS platform\" but may not say \"Bob's farmOS software.\" Some other examples that may work for you are: [Your software] works with farmOS software [Your software] uses farmOS software [Your software] is compatible with farmOS software [Your software] is powered by farmOS software [Your software] runs on farmOS software [Your software] for use with farmOS software [Your software] for farmOS software Use of trademarks to show community affiliation \u00b6 This section discusses the use of our Marks for software such an application themes, skins and personas. The use of our Marks on websites is discussed below. You may use the Word Marks and the Logos in themes, personas, or skins for applications to show your support for the Project, provided that the use is non-commercial and the use is clearly decorative, as contrasted with a use that appears to be the branding for a website or application. Uses for which we are granting a license \u00b6 Distribution of modified software \u00b6 You may use the Word Marks and the Logos for the distribution of code (source or executable) on the condition that any executable is built from the official Project source code and that any modifications are limited to switching on or off features already included in the software, translations into other languages, and incorporating bug-fix patches. Distribution of software preloaded on hardware \u00b6 You may use the Word Marks and the Logos in association with hardware devices on the condition that the executable installed on the device is the official source executable for the Project, and that you do not suggest that the Project is the source of the hardware device itself but rather than the Marks are for the software incorporated into the device. Uses we consider infringing without seeking further permission from us \u00b6 We will likely consider using the Marks in a software distribution that combines our software with any other software program an infringement of our Marks. We would consider your software \"combined\" with ours if you create a single executable for both software programs, as well as if by installing our software it automatically installs yours. We would not consider your software \"combined\" with ours if it is on the same media but requires separate, independent action to install it. Use for non-software goods and services \u00b6 See Universal considerations for all uses , above, which also apply. Uses we consider non-infringing \u00b6 Websites \u00b6 You may use the Word Marks and Logos, but not the Trade Dress, on your webpage to show your support for the Project as long as: The website has branding that is easily distinguished from the Project Trade Dress; Your own branding or naming is more prominent than any Project Marks; The Logos hyperlink to the Project website; The site does not mislead customers into thinking that either your website, service, or product is our website, service, or product; and The site clearly states that you are not affiliated with or endorsed by the Project. Publications and presentations \u00b6 You can use the Word Marks in book and article titles, and the Logo in illustrations within the document, as long as the use does not suggest that we have published, endorse, or agree with your work. Events \u00b6 You can use the Logo and signage from farmOS.org to promote the software and Project at events. Uses for which we are granting a license \u00b6 User groups \u00b6 You can use the Word Marks as part of your user group name provided that: The main focus of the group is the software; Any software or services the group provides are without cost; The group does not make a profit; Any charge to attend meetings are to cover the cost of the venue, food and drink only. Note that the Universal considerations for all uses , above, still apply, specifically, that you may not use or register the Marks as part of your own trademark, service mark, domain name, company name, trade name, product name or service name. Promotional goods \u00b6 \"Promotional goods\" are non-software goods that use the Marks and that are intended to advertise the Project, promote the Project, or show membership in the Project community. You may make stickers, hats, T-shirts, hoodies, and other promotional items for free giveaway at open source conferences and events using only the designs found on farmOS.org Uses we consider infringing without seeking further permission from us \u00b6 We will likely consider using the Marks as part of a domain name or subdomain an infringement of our Marks. We would likely consider using the Marks on promotional goods for sale an infringement of our Marks. General Information \u00b6 Trademark marking and legends \u00b6 The first or most prominent mention of a Mark on a webpage, document, packaging, or documentation should be accompanied by a symbol indicating whether the mark is a registered trademark (\"\u00ae\") or an unregistered trademark (\"\u2122\"). See our Trademark List for the correct symbol to use. Also, if you are using our Marks in a way described in the sections \"Uses for which we are granting a license,\" please put following notice at the foot of the page where you have used the Mark (or, if in a book, on the credits page), on any packaging or labeling, and on advertising or marketing materials: \"farmOS is a registered trademark of Michel Stenta\" What to do when you see abuse \u00b6 If you are aware of any confusing use or misuse of the Marks in any way, we would appreciate you bringing this to our attention. Please contact us as described below so that we can investigate it further. Where to get further information \u00b6 If you have any questions about this Policy, would like to speak with us about the use of our Marks in ways not described in the Policy, or see any abuse of our Marks, please contact Michael Stenta . General considerations about trademarks and their use \u00b6 What trademark law is about \u00b6 What is a trademark? \u00b6 A trademark is a word, phrase, symbol or design, or a combination of words, phrases, symbols or designs, that identifies and distinguishes the source of the goods of one party from those of others. A service mark is the same as a trademark, except that it identifies and distinguishes the source of a service rather than a product. \"Trade dress\" or \"get up\" refers to the look and feel of the packaging, which in this context can include the layout, colors, images, and design choices in a web page. Throughout this Policy, the terms \"trademark\" and \"mark\" refer to both trademarks, service marks and trade dress. However, the use of a word is \"not as a trademark\" when it is used functionally as part of the software program, for example, in a file, folder, directory, or path name. Use in this way is not a trademark infringement. What is \"likelihood of confusion\"? \u00b6 There is trademark infringement if your use of a trademark has created a \"likelihood of confusion.\" This means using a trademark in a way that will likely confuse or deceive the relevant consuming public about the source of a product or service using the mark in question. For example, if the \"Foo\" software extension removes all double spaces after periods, but someone else later creates \"Foo\" software that adds a third space after periods, consumers would be confused between the two and the newcomer will likely be a trademark infringer. As another example, if a company makes \"Foobar\" software and a third party offers training called \"Foobar Certification,\" a person is likely to believe, wrongly, that the certification is being offered by the makers of Foobar software. The third party has likely misled consumers about the source of its training and is a trademark infringer. What is \"nominative\" use? \u00b6 So-called \"nominative use\" (or \"nominative fair use\"), which is the name of the doctrine under U.S. trademark law, allows the use of another's trademark where it is necessary for understanding. Other countries' trademark laws also have similar provisions. For example, a car repair shop that specializes in a particular brand of automobile, VW for example, must be allowed to say that they repair VW cars. Here is what you should consider when deciding whether your use of a trademark is a nominative fair use: Whether you can identify the product or service in question without using the trademark; Whether you are avoiding a likelihood of confusion in the way that you have used the trademark; and Whether you have used only as much as is necessary to identify the product or service. With our \"Foobar Certification\" example above, the person offering the certification would be allowed to say, under the nominative fair use doctrine, that she is offering \"Maude's Certification for Foobar software.\" It is almost never the case that using a Logo will be a nominative fair use since it will be a rare case where the logo is needed for strictly informational purposes. Proper trademark use \u00b6 These rules hold true for all trademarks, not just ours, so you should follow them for our Marks as well as anyone else's. Use of trademarks in text \u00b6 Always distinguish trademarks from surrounding text with at least initial capital letters or in all capital letters. Note that with the farmOS mark, an exception is made in that the first letter can be lowercase, but \"OS\" must be capitalized. Unacceptable: farmos Acceptable: FarmOS, FARMOS, farmOS Always use trademarks in their exact form with the correct spelling, neither abbreviated, hyphenated, or combined with any other word or words. Unacceptable: Farm OS, farm-OS Acceptable: farmOS Don't pluralize a trademark. Unacceptable: I have seventeen farmOSes running on my farm. Acceptable: I have seventeen farmOS instances running on my farm. Don't use \"a\" or \"the\" to refer to an instance of the trademark. Unacceptable: I put a farmOS on my mom's computer. Acceptable: I put a farmOS instance on my mom's computer. Always use a trademark as an adjective modifying a noun. You can see the nouns we prefer under \"Our trademarks.\" Unacceptable: This is a farmOS. Anyone can install it. Acceptable: This is a farmOS application. Anyone can install it. Don't use a trademark as a verb. Trademarks are products or services, never actions. Unacceptable: I farmOSed my computer today! Acceptable: I installed farmOS on my computer today! Don't use a trademark as a possessive. Instead, the following noun should be used in possessive form or the sentence reworded so there is no possessive. Unacceptable: farmOS's interface is very clean. Acceptable: The farmOS dashboard's interface is very clean. Don't translate a trademark into another language. Acceptable: Quiero instalar farmOS en mi sistema. Unacceptable: Quiero instalar granjaOS en mi sistema. Use of Logos \u00b6 You may not change any Logo except to scale it. This means you may not add decorative elements, change the colors, change the proportions, distort it, add elements, or combine it with other logos. However, when the context requires the use of black-and-white graphics and the logo is color, you may reproduce the logo in a manner that produces a black-and-white image. These guidelines are based on the Model Trademark Guidelines, available at http://www.modeltrademarkguidelines.org , used under a Creative Commons Attribution 3.0 Unported license: https://creativecommons.org/licenses/by/3.0/deed.en_US","title":"Trademark"},{"location":"community/trademark/#farmos-trademark-guidelines","text":"Version 1.0, November 2016","title":"farmOS Trademark Guidelines"},{"location":"community/trademark/#introduction","text":"This document, the \"Policy,\" outlines the farmOS project's (the \"Project\") policy for the use of our trademarks. While our software is available under a free and open source software license, the copyright license does not include an implied right or license to use our trademark. The role of trademarks is to provide assurance about the quality of the products or services with which the trademark is associated. But because an open source license allows your unrestricted modification of the copyrighted software, we cannot be sure that your modifications to the software are ones that will not be misleading if distributed under the same name. Instead, this Policy describes the circumstances under which you may use our trademarks. In this Policy we are not trying to limit the lawful use of our trademarks, but rather describe for you what we consider the parameters of lawful use to be. Trademark law can be ambiguous, so we hope to provide enough clarity for you to understand whether we will consider your use licensed or non-infringing. The sections that follow describe what trademarks are covered by this Policy, as well as uses of the trademarks that are allowed without additional permission from us. If you want to use our trademarks in ways that are not described in this Policy, please see \"Where to get further information\" below for contact information. Any use that does not comply with this Policy or for which we have not separately provided written permission is not a use that we have approved, so you must decide for yourself whether the use is nevertheless lawful.","title":"Introduction"},{"location":"community/trademark/#our-commitment-to-open-source-principles","text":"We want to encourage and facilitate the use of our trademarks by the community, but do so in a way that still ensures that the trademarks are meaningful as a source and quality indicator for our software and the associated goods and services and continue to embody the high reputation of the software and the community associated with it. This Policy therefore tries to strike the proper balance between: 1) our need to ensure that our trademarks remain reliable indicators of the qualities that they are meant to preserve and 2) our community members' desire to be full participants in the Project.","title":"Our commitment to open source principles"},{"location":"community/trademark/#trademarks-subject-to-the-guidelines","text":"","title":"Trademarks subject to the guidelines"},{"location":"community/trademark/#our-trademarks","text":"This Policy covers: Our word trademarks and service marks (the \"Word Marks\"): Mark Common descriptive name for the goods or services farmOS Computer software for use in farm planning and management Our logos (the \"Logos\"): And the unique visual styling of our website and packaging (the \"Trade Dress\"). This Policy encompasses all trademarks and service marks, whether Word Marks, Logos or Trade Dress, which are collectively referred to as the \u201cMarks.\u201d Some Marks may not be registered, but registration does not equal ownership of trademarks. This Policy covers our Marks whether they are registered or not.","title":"Our trademarks"},{"location":"community/trademark/#universal-considerations-for-all-uses","text":"Whenever you use one of the Marks, you must always do so in a way that does not mislead anyone, either directly or by omission, about exactly what they are getting and from whom. The law reflects this requirement in two major ways described in more detail below: it prohibits creating a \"likelihood of confusion\" but allows for \"nominative use.\" For example, you cannot say you are distributing the farmOS software when you're distributing a modified version of it, because people would be confused when they are not getting the same features and functionality they would get if they downloaded the software directly from us. You also cannot use our logo on your website in a way that suggests that your website is an official website or that we endorse your website. You can, though, say you like the farmOS software, that you participate in the farmOS community, that you are providing an unmodified version of the farmOS software, or that you wrote a book describing how to use the farmOS software. This fundamental requirement, that it is always clear to people what they are getting and from whom, is reflected throughout this Policy. It should also serve as your guide if you are not sure about how you are using the Marks. In addition: You may not use the Marks in association with the use or distribution of software if you are also not in compliance with the copyright license for the software. You may not use or register, in whole or in part, the Marks as part of your own trademark, service mark, domain name, company name, trade name, product name or service name. Trademark law does not allow your use of names or trademarks that are too similar to ours. You therefore may not use an obvious variation of any of our Marks or any phonetic equivalent, foreign language equivalent, takeoff, or abbreviation for a similar or compatible product or service. We would consider the following too similar to one of our Marks: Any mark beginning or ending with the letters FARMOS You agree that you will not acquire any rights in the Marks and that any goodwill generated by your use of the Marks inures solely to our benefit.","title":"Universal considerations for all uses"},{"location":"community/trademark/#use-for-software","text":"See Universal considerations for all uses , above, which also apply.","title":"Use for software"},{"location":"community/trademark/#uses-we-consider-non-infringing","text":"","title":"Uses we consider non-infringing"},{"location":"community/trademark/#distribution-of-unmodified-source-code-or-unmodified-executable-code-we-have-compiled","text":"When you redistribute an unmodified copy of our software, you are not changing the quality or nature of it. Therefore, you may retain the Word Marks and the Logos we have placed on the software to identify your redistribution -- whether that redistribution is made by optical media, memory stick or download of unmodified source and executable code. This kind of use only applied if you are redistributing an official distribution from this Project that has not been changed in any way. You can find files for the Logos and approved designs for packaging on farmOS.org.","title":"Distribution of unmodified source code or unmodified executable code we have compiled"},{"location":"community/trademark/#distribution-of-executable-code-that-you-have-compiled-or-modified-code","text":"You may use the Word Marks, but not the Logos, to truthfully describe the origin of the software that you are providing, that is, that the code you are distributing is a modification of our software. You may say, for example, that \"this software is derived from the source code for farmOS software.\" You will need to remove the Logo data files. Of course, you can place your own trademarks or logos on versions of the software to which you have made substantive modifications, because by modifying the software you have become the origin of that exact version. In that case, you should not use our Logos.","title":"Distribution of executable code that you have compiled, or modified code"},{"location":"community/trademark/#statements-about-compatibility-interoperability-or-derivation","text":"You may use the Word Marks, but not the Logos, to truthfully describe the relationship between your software and ours. Our Mark should be used after a verb or preposition that describes the relationship between your software and ours. So you may say, for example, \"Bob's software for the farmOS platform\" but may not say \"Bob's farmOS software.\" Some other examples that may work for you are: [Your software] works with farmOS software [Your software] uses farmOS software [Your software] is compatible with farmOS software [Your software] is powered by farmOS software [Your software] runs on farmOS software [Your software] for use with farmOS software [Your software] for farmOS software","title":"Statements about compatibility, interoperability or derivation"},{"location":"community/trademark/#use-of-trademarks-to-show-community-affiliation","text":"This section discusses the use of our Marks for software such an application themes, skins and personas. The use of our Marks on websites is discussed below. You may use the Word Marks and the Logos in themes, personas, or skins for applications to show your support for the Project, provided that the use is non-commercial and the use is clearly decorative, as contrasted with a use that appears to be the branding for a website or application.","title":"Use of trademarks to show community affiliation"},{"location":"community/trademark/#uses-for-which-we-are-granting-a-license","text":"","title":"Uses for which we are granting a license"},{"location":"community/trademark/#distribution-of-modified-software","text":"You may use the Word Marks and the Logos for the distribution of code (source or executable) on the condition that any executable is built from the official Project source code and that any modifications are limited to switching on or off features already included in the software, translations into other languages, and incorporating bug-fix patches.","title":"Distribution of modified software"},{"location":"community/trademark/#distribution-of-software-preloaded-on-hardware","text":"You may use the Word Marks and the Logos in association with hardware devices on the condition that the executable installed on the device is the official source executable for the Project, and that you do not suggest that the Project is the source of the hardware device itself but rather than the Marks are for the software incorporated into the device.","title":"Distribution of software preloaded on hardware"},{"location":"community/trademark/#uses-we-consider-infringing-without-seeking-further-permission-from-us","text":"We will likely consider using the Marks in a software distribution that combines our software with any other software program an infringement of our Marks. We would consider your software \"combined\" with ours if you create a single executable for both software programs, as well as if by installing our software it automatically installs yours. We would not consider your software \"combined\" with ours if it is on the same media but requires separate, independent action to install it.","title":"Uses we consider infringing without seeking further permission from us"},{"location":"community/trademark/#use-for-non-software-goods-and-services","text":"See Universal considerations for all uses , above, which also apply.","title":"Use for non-software goods and services"},{"location":"community/trademark/#uses-we-consider-non-infringing_1","text":"","title":"Uses we consider non-infringing"},{"location":"community/trademark/#websites","text":"You may use the Word Marks and Logos, but not the Trade Dress, on your webpage to show your support for the Project as long as: The website has branding that is easily distinguished from the Project Trade Dress; Your own branding or naming is more prominent than any Project Marks; The Logos hyperlink to the Project website; The site does not mislead customers into thinking that either your website, service, or product is our website, service, or product; and The site clearly states that you are not affiliated with or endorsed by the Project.","title":"Websites"},{"location":"community/trademark/#publications-and-presentations","text":"You can use the Word Marks in book and article titles, and the Logo in illustrations within the document, as long as the use does not suggest that we have published, endorse, or agree with your work.","title":"Publications and presentations"},{"location":"community/trademark/#events","text":"You can use the Logo and signage from farmOS.org to promote the software and Project at events.","title":"Events"},{"location":"community/trademark/#uses-for-which-we-are-granting-a-license_1","text":"","title":"Uses for which we are granting a license"},{"location":"community/trademark/#user-groups","text":"You can use the Word Marks as part of your user group name provided that: The main focus of the group is the software; Any software or services the group provides are without cost; The group does not make a profit; Any charge to attend meetings are to cover the cost of the venue, food and drink only. Note that the Universal considerations for all uses , above, still apply, specifically, that you may not use or register the Marks as part of your own trademark, service mark, domain name, company name, trade name, product name or service name.","title":"User groups"},{"location":"community/trademark/#promotional-goods","text":"\"Promotional goods\" are non-software goods that use the Marks and that are intended to advertise the Project, promote the Project, or show membership in the Project community. You may make stickers, hats, T-shirts, hoodies, and other promotional items for free giveaway at open source conferences and events using only the designs found on farmOS.org","title":"Promotional goods"},{"location":"community/trademark/#uses-we-consider-infringing-without-seeking-further-permission-from-us_1","text":"We will likely consider using the Marks as part of a domain name or subdomain an infringement of our Marks. We would likely consider using the Marks on promotional goods for sale an infringement of our Marks.","title":"Uses we consider infringing without seeking further permission from us"},{"location":"community/trademark/#general-information","text":"","title":"General Information"},{"location":"community/trademark/#trademark-marking-and-legends","text":"The first or most prominent mention of a Mark on a webpage, document, packaging, or documentation should be accompanied by a symbol indicating whether the mark is a registered trademark (\"\u00ae\") or an unregistered trademark (\"\u2122\"). See our Trademark List for the correct symbol to use. Also, if you are using our Marks in a way described in the sections \"Uses for which we are granting a license,\" please put following notice at the foot of the page where you have used the Mark (or, if in a book, on the credits page), on any packaging or labeling, and on advertising or marketing materials: \"farmOS is a registered trademark of Michel Stenta\"","title":"Trademark marking and legends"},{"location":"community/trademark/#what-to-do-when-you-see-abuse","text":"If you are aware of any confusing use or misuse of the Marks in any way, we would appreciate you bringing this to our attention. Please contact us as described below so that we can investigate it further.","title":"What to do when you see abuse"},{"location":"community/trademark/#where-to-get-further-information","text":"If you have any questions about this Policy, would like to speak with us about the use of our Marks in ways not described in the Policy, or see any abuse of our Marks, please contact Michael Stenta .","title":"Where to get further information"},{"location":"community/trademark/#general-considerations-about-trademarks-and-their-use","text":"","title":"General considerations about trademarks and their use"},{"location":"community/trademark/#what-trademark-law-is-about","text":"","title":"What trademark law is about"},{"location":"community/trademark/#what-is-a-trademark","text":"A trademark is a word, phrase, symbol or design, or a combination of words, phrases, symbols or designs, that identifies and distinguishes the source of the goods of one party from those of others. A service mark is the same as a trademark, except that it identifies and distinguishes the source of a service rather than a product. \"Trade dress\" or \"get up\" refers to the look and feel of the packaging, which in this context can include the layout, colors, images, and design choices in a web page. Throughout this Policy, the terms \"trademark\" and \"mark\" refer to both trademarks, service marks and trade dress. However, the use of a word is \"not as a trademark\" when it is used functionally as part of the software program, for example, in a file, folder, directory, or path name. Use in this way is not a trademark infringement.","title":"What is a trademark?"},{"location":"community/trademark/#what-is-likelihood-of-confusion","text":"There is trademark infringement if your use of a trademark has created a \"likelihood of confusion.\" This means using a trademark in a way that will likely confuse or deceive the relevant consuming public about the source of a product or service using the mark in question. For example, if the \"Foo\" software extension removes all double spaces after periods, but someone else later creates \"Foo\" software that adds a third space after periods, consumers would be confused between the two and the newcomer will likely be a trademark infringer. As another example, if a company makes \"Foobar\" software and a third party offers training called \"Foobar Certification,\" a person is likely to believe, wrongly, that the certification is being offered by the makers of Foobar software. The third party has likely misled consumers about the source of its training and is a trademark infringer.","title":"What is \"likelihood of confusion\"?"},{"location":"community/trademark/#what-is-nominative-use","text":"So-called \"nominative use\" (or \"nominative fair use\"), which is the name of the doctrine under U.S. trademark law, allows the use of another's trademark where it is necessary for understanding. Other countries' trademark laws also have similar provisions. For example, a car repair shop that specializes in a particular brand of automobile, VW for example, must be allowed to say that they repair VW cars. Here is what you should consider when deciding whether your use of a trademark is a nominative fair use: Whether you can identify the product or service in question without using the trademark; Whether you are avoiding a likelihood of confusion in the way that you have used the trademark; and Whether you have used only as much as is necessary to identify the product or service. With our \"Foobar Certification\" example above, the person offering the certification would be allowed to say, under the nominative fair use doctrine, that she is offering \"Maude's Certification for Foobar software.\" It is almost never the case that using a Logo will be a nominative fair use since it will be a rare case where the logo is needed for strictly informational purposes.","title":"What is \"nominative\" use?"},{"location":"community/trademark/#proper-trademark-use","text":"These rules hold true for all trademarks, not just ours, so you should follow them for our Marks as well as anyone else's.","title":"Proper trademark use"},{"location":"community/trademark/#use-of-trademarks-in-text","text":"Always distinguish trademarks from surrounding text with at least initial capital letters or in all capital letters. Note that with the farmOS mark, an exception is made in that the first letter can be lowercase, but \"OS\" must be capitalized. Unacceptable: farmos Acceptable: FarmOS, FARMOS, farmOS Always use trademarks in their exact form with the correct spelling, neither abbreviated, hyphenated, or combined with any other word or words. Unacceptable: Farm OS, farm-OS Acceptable: farmOS Don't pluralize a trademark. Unacceptable: I have seventeen farmOSes running on my farm. Acceptable: I have seventeen farmOS instances running on my farm. Don't use \"a\" or \"the\" to refer to an instance of the trademark. Unacceptable: I put a farmOS on my mom's computer. Acceptable: I put a farmOS instance on my mom's computer. Always use a trademark as an adjective modifying a noun. You can see the nouns we prefer under \"Our trademarks.\" Unacceptable: This is a farmOS. Anyone can install it. Acceptable: This is a farmOS application. Anyone can install it. Don't use a trademark as a verb. Trademarks are products or services, never actions. Unacceptable: I farmOSed my computer today! Acceptable: I installed farmOS on my computer today! Don't use a trademark as a possessive. Instead, the following noun should be used in possessive form or the sentence reworded so there is no possessive. Unacceptable: farmOS's interface is very clean. Acceptable: The farmOS dashboard's interface is very clean. Don't translate a trademark into another language. Acceptable: Quiero instalar farmOS en mi sistema. Unacceptable: Quiero instalar granjaOS en mi sistema.","title":"Use of trademarks in text"},{"location":"community/trademark/#use-of-logos","text":"You may not change any Logo except to scale it. This means you may not add decorative elements, change the colors, change the proportions, distort it, add elements, or combine it with other logos. However, when the context requires the use of black-and-white graphics and the logo is color, you may reproduce the logo in a manner that produces a black-and-white image. These guidelines are based on the Model Trademark Guidelines, available at http://www.modeltrademarkguidelines.org , used under a Creative Commons Attribution 3.0 Unported license: https://creativecommons.org/licenses/by/3.0/deed.en_US","title":"Use of Logos"},{"location":"development/api/","text":"API \u00b6 farmOS has a REST API that other applications/systems can use to communicate with farmOS programatically. The API provides CRUD operations for all of the main farmOS record types (Drupal entity types). This is accomplished with the RESTful Web Services module. Note for Sensor Data: If you are looking for documentation about pushing and pulling data from sensors in farmOS, see Sensors . The following documentation provides a brief overview of the farmOS API for developers who are interested in using it. For more general information, please refer to the RESTful Web Services module documentation . In all of the commands below, replace the following placeholders with your specific farmOS URL, username, and password. [URL] - Base URL of the farmOS instance, without trailing slash (eg: https://example.farmos.net ) [USER] - User name (eg: MyUserName ) [PASS] - Password (eg: MyPassword ) [AUTH] - Authentication parameters for curl commands (this will depend on the authentication method you choose below). Authentication \u00b6 There are three ways to authenticate with a farmOS server: OAuth2 Authorization Tokens (recommended) Session Cookie and CSRF Token Basic Authentication 1. OAuth2 Authorization Tokens \u00b6 farmOS includes an OAuth2 Authorization server for providing 3rd party clients access to the farmOS API. Rather than using a user's username and password to authenticate, OAuth2 uses access tokens to authenticate users. The access tokens are provided to both 1st and 3rd party clients who wish to access a user's protected resources from a server. Clients store the access token instead of the user's credentials, which makes it a more secure authentication method. Read more about the OAuth 2.0 standards For more information about authenticating with OAuth2, see the OAuth2 Details section below. Once you have an OAuth2 token, you can pass it to farmOS with an Authorization: Bearer header. -H \"Authorization: Bearer [OAUTH-TOKEN]\" This should be used to replace [AUTH] in the curl examples that follow. 2. Session Cookie and CSRF Token \u00b6 The old approach (before OAuth2 was introduced in farmOS 7.x-1.4), was to authenticate via Drupal's user_login form and save the session cookie provided by Drupal. Then, you can use that to retrieve a CSRF token from [URL]/restws/session/token , which is provided and required by the restws module. The cookie and token can then be included with each API request. The following curl command will authenticate using the username and password, and save the session cookie to a file called farmOS-cookie.txt . Then it will get a session token and save that to a $TOKEN variable. Together, the cookie and token can be used to make authenticated requests. curl --cookie-jar farmOS-cookie.txt -d 'name=[USER]&pass=[PASS]&form_id=user_login' [URL]/user/login TOKEN=\"$(curl --cookie farmOS-cookie.txt [URL]/restws/session/token)\" After running those two commands, the cookie and token can be included with subsequent curl requests via the --cookie and -H parameters: --cookie farmOS-cookie.txt -H \"X-CSRF-Token: ${TOKEN}\" This should be used to replace [AUTH] in the curl examples that follow. 3. Basic Authentication \u00b6 An alternative approach is to use HTTP Basic Authentication . The RESTful Web Services module comes with a Basic Authentication sub-module, which provides the ability to include the username and password with each request using HTTP Basic Authentication. This modules is included with farmOS but is disabled by default. By default the module only tries to authenticate usernames prefixed with 'restws'. This can be changed by modifying the regex used against usernames - see the RESTful Web Services Basic Authentication module documentation . SSL encryption is highly recommended. This option requires sending credentials with every request which means extra care must be taken to not expose these credentials. Using SSL will encrypt the credentials with each request. Otherwise, they will be sent in plaintext. Using basic authentication makes it much easier to test the API with development tools such as Postman or Restlet . You just need to add basic authentication credentials to the request header. The request returns a cookie, which seems to be saved by these applications. This means subsequent requests don't need the authentication header, as long as the cookie is saved. Basic Authentication can be used in curl requests via the -u parameter: -u [USER]:[PASS] This should be used to replace [AUTH] in the curl examples that follow. /farm.json \u00b6 farmOS provides an informational API endpoint at /farm.json , which includes the farm name, URL, API version, the system of measurement used by the farm, information about the currently authenticated user, installed languages, and information about available entity types and bundles. For example: { \"name\": \"My Farm\", \"url\": \"https://myfarm.mydomain.com\", \"api_version\": \"1.0\", \"system_of_measurement\": \"metric\", \"user\": { \"uid\": \"3\", \"name\": \"My Username\", \"mail\": \"myemail@mydomain.com\", \"language\": \"en\", }, \"languages\": { \"en\": { \"language\": \"en\", \"name\": \"English\", \"native\": \"English\", \"direction\": 0, }, }, \"resources\": { \"log\": { \"farm_activity\": { \"label\": \"Activity\", \"label_plural\": \"Activities\", \"fields\" { \"area\": { \"label\": \"Areas\", \"type\": \"taxonomy_term_reference\", \"required\": 0, }, ... }, } }, ... } } The system_of_measurement with be either metric or us . The resources section contains a list of entity types (aka \"resource types\") that are available. Within each is a list of bundles (eg: \"log types\", \"asset types\", etc). Each bundle contains information such as its translated label , and a list of available fields and their metadata ( label , required , etc). The taxonomy_term bundles also contain their vid (vocabulary ID), which is necessary when creating new terms (see Creating taxonomy terms ). Other modules can add information to /farm.json with hook_farm_info() . API Version \u00b6 Current API version: 1.3 It is highly recommended that you check the API version of the farmOS system you are communicating with, to be sure that your code is using the same version. If any changes are made that are not backwards compatible, the API version will change. So by checking it in your code, you can prevent unexpected things from happening if you try to use unsupported API features. Requesting records \u00b6 The following curl command examples demonstrate how to get lists of records and individual records in JSON format. They use the stored farmOS-cookie.txt file and $TOKEN variable generated with the commands above. Lists of records This will retrieve a list of harvest logs in JSON format: curl [AUTH] [URL]/log.json?type=farm_harvest Records can also be requested in XML format by changing the file extension in the URL: curl [AUTH] [URL]/log.xml?type=farm_harvest Individual records Individual records can be retrieved in a similar way, by including their entity ID. This will retrieve a log with ID 1: curl [AUTH] [URL]/log/1.json Endpoints The endpoint to use depends on the entity type you are requesting: Assets: /farm_asset.json Plantings: /farm_asset.json?type=planting Animals: /farm_asset.json?type=animal Equipment: /farm_asset.json?type=equipment ... Logs: /log.json Activities: /log.json?type=farm_activity Observations: /log.json?type=farm_observation Harvests: /log.json?type=farm_harvest Inputs: /log.json?type=farm_input ... Taxonomy terms: /taxonomy_term.json Areas*: /taxonomy_term.json?bundle=farm_areas Quantity Units: /taxonomy_term.json?bundle=farm_quantity_units Crops/varieties: /taxonomy_term.json?bundle=farm_crops Animal species/breeds: /taxonomy_term.json?bundle=farm_animal_types Log categories: /taxonomy_term.json?bundle=farm_log_categories Seasons: /taxonomy_term.json?bundle=farm_season ... * Note that areas are currently represented as Drupal taxonomy terms, but may be changed to assets in the future. See Make \"Area\" into a type of Farm Asset . Filtering Filters can be applied via query parameters tacked on to the end of the URL. For example, to show only \"done\" logs: /log.json?done=1 Refer to lists of fields under \"Creating records\" below for available filters. When a record references other records (for example, a log that references an asset), you must filter by the referenced record's ID. For example, to find logs that reference asset ID 5: /log.json?asset=5 Taxonomy term references are an exception to this rule. It is possible to filter using the name of the term, rather than the ID. For example, to show logs with a category of \"Tillage\": /log.json?log_category=Tillage The term name is also included in the returned JSON structure, alongside the term ID, so that extra requests to look up term names are not necessary. Creating records \u00b6 Records can be created with a POST request of JSON/XML objects to the endpoint for the entity type you would like to create. Creating logs \u00b6 First, here is a very simple example of an observation log in JSON. The bare minimum required fields are name , type , and timestamp . { \"name\": \"Test observation via REST\", \"type\": \"farm_observation\", \"timestamp\": \"1526584271\", } Here is a curl command to create that log in farmOS: curl -X POST [AUTH] -H 'Content-Type: application/json' -d '{\"name\": \"Test observation via REST\", \"type\": \"farm_observation\", \"timestamp\": \"1526584271\"}' [URL]/log Most log types have the same set of standard fields. Some specific log types differ slightly. The following are standard fields available on most log types: id : The log ID (unique database primary key). name : The log name. type : The log type. Some types that are included in farmOS are: farm_activity : General activity logs. farm_observation : General observation logs. farm_input : An input to one or more assets/areas. farm_harvest : A harvest from one or more assets/areas. farm_seeding : A seeding log (specific to Planting assets). farm_transplanting : A transplanting log (specific to Planting assets). farm_maintenance : A maintenance log (specific to Equipment assets). timestamp : A timestamp representing when the logged event took place. done : Boolean value indicating whether the log is \"done\" or not. notes : A free-form text field for log notes. Note that this should be a JSON object with a value property and a format property set to farm_format . asset : Reference(s) to asset(s) that the log is associated with. equipment : Reference(s) to equipment assets that were used in the process. area : Reference(s) to area(s) that the log is associated with. geofield : Geometry specific to the logged event. movement : Movement information (see \"Field collections\" below). membership : Group membership information (see \"Field collections\" below). quantity : Quantity measurements (see \"Field collections\" below). images : Image files attached to the log. files : Other files attached to the log. flags : Flags associated with the log. Examples: priority monitor review log_category : A reference to one or more log categories. log_owner : A reference to one or more users that the log is assigned to. Note that this is different from uid , which is the user who created the log. created : A timestamp representing when the log was created. changed : A timestamp representing when the log was last updated. uid : A reference to the user who created the log. data : An arbitrary string of data. This can be used to store additional data on the log as JSON, XML, YAML, etc. It is the resposibility of the API user to respect data format that is already in the log. Input logs \u00b6 Additional fields on input logs (all optional): material : Reference(s) to material(s) that were applied. input_purpose : A description of the purpose of the input. input_method : A description of how the input was applied. input_source : A description of where the input was obtained. date_purchase : A timestamp representing when the input material was purchased. lot_number : The lot number(s) of the input material, if available. Harvest logs \u00b6 Additional fields on harvest logs (all optional): lot_number : The harvest lot number. Seeding and transplanting logs \u00b6 Seeding and transplanting logs are log types that are specific to Planting assets (to indicate when seedings/transplantings took place, along with quantity and location information). They have some key differences from other log types: The asset field is required and must reference an asset of type planting . They do not have the areas or geofield fields, and instead expect to have a movement field collection with information about where it took place. This is used to set the location of the planting at a given point in time. Seeding logs also have a seed_source field which can be used to specify where seeds came from (free-form text field). Creating assets \u00b6 Assets must have a name and a type , and some asset types have additional required fields. For example planting assets require a crop reference (for crop/variety), animal assets require an animal_type reference (for species/breed), and other types may have other requirements. A quick way to find out which fields are required is to open the \"Add asset\" form in farmOS and look for the red asterisk that indicates a required field. A very basic \"Equipment\" asset looks like this: { \"name\": \"Tractor\", \"type\": \"equipment\", \"manufacturer\": \"Allis-Chambers\", \"model\": \"G\", \"serial_number\": \"1234567890\", } Here is a curl command to create that asset in farmOS: curl -X POST [AUTH] -H 'Content-Type: application/json' -d '{\"name\": \"Tractor\", \"type\": \"equipment\", \"manufacturer\": \"Allis-Chambers\", \"model\": \"G\", \"serial_number\": \"1234567890\"}' [URL]/farm_asset Most asset types have the same set of standard fields. Some specific asset types differ slightly. The following are standard fields available on most log types: id : The asset ID (unique database primary key). name : The asset name. type : The asset type. Some types that are included in farmOS are: planting animal equipment group description : A free-form text field for an asset description. Note that this should be a JSON object with a value property and a format property set to farm_format . archived : A timestamp representing when the asset was archived. If this is 0 then the asset is not archived. images : Image files attached to the asset. files : Other files attached to the asset. flags : Flags associated with the log. Examples: priority monitor review created : A timestamp representing when the asset was created. changed : A timestamp representing when the asset was last changed. uid : A reference to the user who created the asset. data : An arbitrary string of data. This can be used to store additional data on the asset as JSON, XML, YAML, etc. It is the resposibility of the API user to respect data format that is already in the log. Assets will also have the following special-purpose fields, which are computed based on the asset's log history. These fields cannot be written to directly, they can only be changed via logs. location : An array of references to areas that the asset is currently located in, based on its most recent completed movement log. geometry : The current geometry of the asset, based on its most recent completed movement log. Planting assets \u00b6 Additional fields on animal assets: crop : Reference(s) to the crops/varieties this is a planting of. Required. parent : Reference(s) to assets that this planting is derived from. Animal assets \u00b6 Additional fields on animal assets: animal_type : Reference to the animal's species/breed. Required. animal_nicknames : Nickname(s) for the animal. animal_castrated : Boolean indicating whether or not this animal has been castrated. animal_sex : The sex of the animal. Available options: F (female) M (male) tag : ID Tag(s) that are assigned to the animal (see \"Field collections\" below). parent : Reference(s) to the animal's parent(s). date : A timestamp representing the birth date of the animal. Equipment assets \u00b6 Additional fields on equipment assets (all optional): manufacturer : The equipment manufacturer. model : The equipment model. serial_number : The equipment serial number. Creating taxonomy terms \u00b6 farmOS allows farmers to build vocabularies of terms for various categorization purposes. These are referred to as \"taxonomies\" in farmOS (and Drupal), although \"vocabulary\" is sometimes used interchangeably. Some things that are represented as taxonomy terms include quantity units, crops/varieties, animal species/breeds, input materials, and log categories. See \"Endpoints\" above for specific API endpoints URLs. A very basic taxonomy term JSON structure looks like this: { \"tid\": \"3\", \"name\": \"Cabbage\", \"description\": \"\", \"vocabulary\": { \"id\": \"7\", \"resource\": \"taxonomy_vocabulary\", }, \"parent\": [ { \"id\": \"10\", \"resource\": \"taxonomy_term\", }, ], \"weight\": \"5\", } The tid is the unique ID of the term (database primary key). When creating a new term, the only required fields are name and vocabulary . The vocabulary is an ID that corresponds to the specific vocabulary the term will be a part of (eg: quantity units, crops/varieties, log categories, etc). The fields parent and weight control term hierarchy and ordering (a heavier weight will sort it lower in the list). When fetching a list of terms from farmOS, you can filter by the vocabulary's \"machine name\" (or \"bundle\") like so: curl [AUTH] [URL]/taxonomy_term.json?bundle=farm_crops When creating a new term, however, you need to provide the vocabulary ID in the term object, not the machine name/bundle. In order to get the vocabulary ID, you can look it up using the /taxonomy_vocabulary endpoint, which lists all available vocabularies. Or, you can find it in farm.json (described above). The vocabulary ID may be different from one farmOS system to another, so if you save it internally in your application, just know that it may not correspond to the same vocabulary on another farmOS. Therefore it is recommended that you look it up each time you need it. For example, to get the vid that corresponds to the farm_crops vocabulary: curl [AUTH] [URL]/taxonomy_vocabulary.json?machine_name=farm_crops Or, by loading the information in farm.json and parsing out the vocabulary ID: curl [AUTH] [URL]/farm.json Before you create a new term, you should check to see if it already exists: curl [AUTH] [URL]/taxonomy_term.json?bundle=farm_crops&name=Broccoli Then, you can create a new term (replace [VID] with the ID of the vocabulary the term should be added to): curl [AUTH] -X POST -H 'Content-Type: application/json' -d '{\"name\": \"Broccoli\", \"vocabulary\": \"[VID]\"}' [URL]/taxonomy_term For convenience, it is possible to create terms on-the-fly when creating or updating other records that reference them. Simply provide the name of the term instead of the tid , and farmOS will attempt to look up the existing term, or create a new one. For example, to create a \"2020 Spinach\" planting asset, a \"Spinach\" crop term, and a \"2020\" season term all at the same time: { \"name\": \"2020 Spinach\", \"type\": \"planting\", \"crop\": [{\"name\": \"Spinach\"}], \"season\": [{\"name\": \"2020\"}], } Creating an area Areas are taxonomy terms in farmOS, but they have some additional fields on them for mapping purposes. In order for an area to show up on a map, it must have an area_type set, and a geometry in the geofield . A very basic area record looks like this: { \"name\": \"North field\", \"description\": \"\", \"area_type\": \"field\", \"geofield\": [ { \"geom\": \"POINT(-31.04003861546518 39.592143995003994)\", }, ], } The geometry should be in Well-Known Text . Some available area types include: field bed building greenhouse property paddock water landmark other Note that area types are defined by modules (eg: paddock is provided by the farm_livestock module), so the area types available on your farmOS may vary. You can fetch all areas of a particular type (eg: field ) like this: curl [AUTH] [URL]/taxonomy_term.json?bundle=farm_areas&area_type=field Updating records \u00b6 Records can be updated with a PUT request of JSON/XML objects to the record's endpoint (with ID). Only include the fields you want to update - everything else will be left unchanged. Do not add .json or .xml to the endpoint's URL. Instead, add a Content-Type header that specifies either application/json or application/xml . For example, to change the name of log 1: curl -X PUT [AUTH] -H 'Content-Type: application/json' -d '{\"name\": \"Change the log name\"}' [URL]/log/1 Areas will also have the following special-purpose fields, which are computed based on log history. These fields cannot be written to directly, they can only be changed via logs. assets : An array of references to assets that are currently located in the area, based on asset movement logs. Field collections \u00b6 Some fields are stored within Field Collections in farmOS, which are technically separate entities attached to the host entity. farmOS uses the RESTful Web Services Field Collection module to hide the fact that these are separate entities, so that their fields can be accessed and modified in the same request as the host entity. In farmOS Field Collections are used for the following: Quantity measurements \u00b6 Quantity measurements are recorded on logs, and can each include a measure (eg: count, weight, volume, etc), a value (decimal number), a unit (a reference to a Units taxonomy term, and a label (a free-form text field). A log with a quantity measurement looks like this: { \"name\": \"Example quantity measurement log\", \"type\": \"farm_observation\", \"timestamp\": \"1551983893\", \"quantity\": [ { \"measure\": \"weight\", \"value\": \"100\", \"unit\": {\"id\": \"15\"}, \"label\": \"My label\", }, ], } Available measure options are: count length weight area volume time temperature value rate rating ratio probability All measurement properties are optional. The label is useful if you have more than one measurement of the same measure (eg: two weight measurements) in the same log. Use the label to add more specific information about what each measurement is for. Movements \u00b6 Movements are defined on logs, and include an area reference (where the asset(s) are moving to), and optionally a geometry (if you need to define a more specific location than the area reference itself). A log with a movement looks like this: { \"name\": \"Example movement log\", \"type\": \"farm_activity\", \"timestamp\": \"1551983893\", \"asset\": [ {\"id\": \"123\"}, ], \"movement\": { \"area\": [ {\"id\": \"5\"}, ], \"geometry\": \"POINT(-31.04003861546518 39.592143995003994)\", }, } Within the movement structure, the area ID should be an area term ID ( tid on the area object). The geometry should be in Well-Known Text . It is possible to reference multiple areas, indicating that the asset is moved to multiple areas (eg: a planting in multiple beds). Group membership \u00b6 Group membership changes are defined on logs, and include one or more group asset IDs. This indicates that any referenced asset(s) were moved to the group(s) specified at the time of the log. A log with a group membership change looks like this: { \"name\": \"Example group membership change log\", \"type\": \"farm_activity\", \"timestamp\": \"1551983893\", \"asset\": [ {\"id\": \"123\"}, ], \"membership\": { \"group\": [ {\"id\": \"456\"}, ], }, } Groups are a type of asset in farmOS, so the group ID is actually an asset ID. Inventory adjustments \u00b6 Inventory adjustments are defined on logs, and include one or more pairs of asset IDs (the asset for which inventory is being adjusted) and an adjustment value (postitive or negative number, to indicate an increase or decrease in the inventory level). A log with an inventory adjustment looks like this: { \"name\": \"Example group membership change log\", \"type\": \"farm_activity\", \"timestamp\": \"1551983893\", \"inventory\": [ { \"asset\": {\"id\": \"123\"}, \"value\": \"-10\", }, ], } Animal ID Tags \u00b6 Animal ID Tags can be added to animal assets, and include a Tag ID, Tag Type, and Tag Location. An animal asset with an ID tag looks like this: { \"name\": \"Betsy\", \"type\": \"animal\", \"animal_type\": {\"id\": \"10\"}, \"tag\": [ { \"id\": \"123456\", \"location\": \"Left ear\", \"type\": \"Ear tag\", }, ], } The ID and Location fields can be anything you want. Available tag types are: Brand Ear tag Tattoo Leg band Chip Other Uploading files \u00b6 Files can be attached to records using the API. Most record types (areas, assets, logs, etc) have both a \"Photo(s)\" field (for image files) and a \"File(s)\" field (for other files). The machine names of these fields are: Photo(s): images File(s): files The API expects an array of base64-encoded strings. Multiple files can be included in the array. For example (replace [BASE64_CONTENT] with the base64 encoding of the file): { \"name\": \"Test file upload via REST\", \"type\": \"farm_observation\", \"timestamp\": \"1534261642\", \"images\": [ \"data:image/jpeg;base64,[BASE64_CONTENT]\", ], } Here is an example using curl (replace [filename] with the path to the file). This will create a new observation log with the file attached to the \"Photo(s)\" field of the log. # Get the file MIME type. FILE_MIME=`file -b --mime-type [filename]` # Encode the file as a base64 string and save it to a variable. FILE_CONTENT=`base64 [filename]` # Post a log with the file attached to the photo field. # <<CURL_DATA is used because base64 encoded files are generally longer # the max curl argument length. See: # https://unix.stackexchange.com/questions/174350/curl-argument-list-too-long curl -X POST [AUTH] -H \"Content-Type: application/json\" -d @- [URL]/log <<CURL_DATA {\"name\": \"Test file upload via REST\", \"type\": \"farm_observation\", \"timestamp\": \"1534261642\", \"images\": [\"data:${FILE_MIME};base64,${FILE_CONTENT}\"]} CURL_DATA OAuth2 Details \u00b6 The following describes more of the details necessary for using OAuth2 for authentication with a farmOS server. Scopes \u00b6 OAuth Scopes define different levels of permission. Two scopes are included with farmOS: user_access : This allows full user access to the farmOS server. With this scope, a third party can do anything the farmOS user account has permission to do. farm_info : Allows access to data at /farm.json Clients \u00b6 In order to connect to farmOS via OAuth2, there must be a \"client\" configured on the server that corresponds to the client that will be making the requests. This is necessary so that tokens can be revoked from specific clients. The core farm_api module provides a default client called farm , which supports the Password Credentials and Refresh Token grants (more info in \"Authorization Flows\" below). If you are writing a custom script that communicates with farmOS via the API, this is the recommended approach for authenticating with username and password. The core farm_api module also comes with a farm_api_development module that can be enabled for testing different OAuth authorization flows. For the purposes of documentation, this client is used in below examples. This module defines an OAuth client with the following parameters: client_id = farmos_development client_secret = None. This client does not require a client_secret redirect_uri = http://localhost/api/authorized (This is required for the Authorization Code Grant) A client can be added via a farmOS module by implementing hook_farm_api_oauth2_client() . The following example defines a client for a fictional farmOS Aggregator called \"My Aggregator\": <?php /** * Implements hook_farm_api_oauth2_client(). */ function myaggregator_farm_api_oauth2_client() { $clients = array(); // Define an OAuth2 client for My Aggregator. $redirect_uris = array( 'https://myfarmosaggregator.com/register-farm', 'https://myfarmosaggregator.com/authorize-farm', ); $clients['my_aggregator'] = array( 'label' => 'My Aggregator', 'client_key' => 'my_farmos_client', 'redirect_uri' => implode(\"\\n\", $aggregator_redirect_uris), ); return $clients; } Authorization Flows \u00b6 The OAuth 2.0 standards outline 5 Oauth2 Grant Types to be used in an OAuth2 Authorization Flow - They are the Authorization Code, Implicit, Password Credentials, Client Credentials and Refresh Token Grants. Currently, the farmOS OAuth Server only supports the Authorization Code , Password Credentials and Refresh Token grants. The Authorization Code and Refresh Token grants are the only Authorization Flows recommended by farmOS for use with 3rd party clients. NOTE: Only use the Password Grant if the client can be trusted with a farmOS username and password (this is considered 1st party ). The Client Credentials Grant is often used for machine authentication not associated with a user account. Due to limitations with the Drupal 7 oauth2_server module, access tokens provided via the Client Credentials Grant cannot be associated with the Drupal Permissions system to access protected resources. farmOS will hopefully support the Client Credentials Grant when farmOS migrates to Drupal 8 and can use the simple_oauth module. NOTE: The oauth2/token and oauth2/authorize endpoints are deprecated and will be removed in farmOS 2.x. Starting with farmOS 1.6 it is recommended to use the new oauth/token and oauth/authorize endpoints. Authorization Code Grant \u00b6 The Authorization Code Grant is most popular for 3rd party client authorization. Requesting resources is a four step process: First : the client sends a request to the farmOS server /oauth/authorize endpoint requesting an Authorization Code . The user logs in and authorizes the client to have the OAuth Scopes it is requesting. Copy this link to browser - http://localhost/oauth/authorize?response_type=code&client_id=farmos_development&scope=user_access&redirect_uri=http://localhost/api/authorized&state=p4W8P5f7gJCIDbC1Mv78zHhlpJOidy Second : after the user accepts, the server redirects to the redirect_uri with an authorization code and state in the query parameters. Example redirect url from server: http://localhost/api/authorized?code=9eb9442c7a2b011fd59617635cca5421cd089943&state=p4W8P5f7gJCIDbC1Mv78zHhlpJOidy Third : copy the code and state from the URL into the body of a POST request. The grant_type , client_id , client_secret and redirect_uri must also be included in the POST body. The client makes a POST request to the /oauth/token endpoint to retrieve an access_token and refresh_token . foo@bar:~$ curl -X POST -d \"grant_type=authorization_code&code=ae4d1381cc67def1c10dc88a19af6ac30d7b5959&client_id=farmos_development&redirect_uri=http://localhost/api/authorized\" http://localhost/oauth/token {\"access_token\":\"3f9212c4a6656f1cd1304e47307927a7c224abb0\",\"expires_in\":\"10\",\"token_type\":\"Bearer\",\"scope\":\"user_access\",\"refresh_token\":\"292810b04d688bfb5c3cee28e45637ec8ef1dd9e\"} Fourth : the client sends the access token in the request header to access protected resources. The header is an Authorization header with a Bearer token: Authorization: Bearer access_token foo@bar:~$ curl --header \"Authorization: Bearer b872daf5827a75495c8194c6bfa4f90cf46c143e\" http://localhost/farm.json {\"name\":\"farmos-server\",\"url\":\"http:\\/\\/localhost\",\"api_version\":\"1.1\",\"user\":{\"uid\":\"1\",\"name\":\"admin\", .... Password Credentials Grant \u00b6 NOTE: Only use the Password Grant if the client can be trusted with a farmOS username and password (this is considered 1st party ). The Password Credentials Grant uses a farmOS username and password to retrieve an access_token and refresh_token in one step. For the user, this is the simplest type of authorization. Because the client can be trusted with their farmOS Credentials, a users username and password can be collected directly into a login form within the client application. These credentials are then used (not stored) to request tokens which are used for authentication with the farmOS server and retrieving data. Requesting protected resources is a two step process: First , the client sends a POST request to the farmOS server /oauth/token endpoint with grant_type set to password and a username and password included in the request body. $ curl -X POST -d \"grant_type=password&username=username&password=test&client_id=farm&scope=user_access\" http://localhost/oauth/token {\"access_token\":\"e69c60dea3f5c59c95863928fa6fb860d3506fe9\",\"expires_in\":\"300\",\"token_type\":\"Bearer\",\"scope\":\"user_access\",\"refresh_token\":\"cead7d46d18d74daea83f114bc0b512ec4cc31c3\"} second , the client sends the access_token in the request header to access protected resources. The header is an Authorization header with a Bearer token: Authorization: Bearer access_token foo@bar:~$ curl --header \"Authorization: Bearer e69c60dea3f5c59c95863928fa6fb860d3506fe9\" http://localhost/farm.json {\"name\":\"farmos-server\",\"url\":\"http:\\/\\/localhost\",\"api_version\":\"1.1\",\"user\":{\"uid\":\"1\",\"name\":\"admin\", .... Refreshing Tokens \u00b6 The refresh_token can be used to retrieve a new access_token if the token has expired. It is a one step process: The client sends an authenticated request to the /oauth/token endpoint with grant_type set to refresh_token and includes the refresh_token , client_id and client_secret in the request body. foo@bar:~$ curl -X POST -H 'Authorization: Bearer ad52c04d26c1002084501d28b59196996f0bd93f' -d 'refresh_token=52e7a0e12e8ddd08b155b3b3ee385687fef01664&grant_type=refresh_token&client_id=farmos_api_client&client_secret=client_secret' http://localhost/oauth/token {\"access_token\":\"acdbfabb736e42aa301b50fdda95d6b7fd3e7e14\",\"expires_in\":\"300\",\"token_type\":\"Bearer\",\"scope\":\"user_access\",\"refresh_token\":\"b73f4744840498a26f43447d8cf755238bfd391a\"} The server responds with an access_token and refresh_token that can be used in future requests. The previous access_token and refresh_token will no longer work. OAuth2 Authorization with the farmOS API \u00b6 Authorization in farmOS.py \u00b6 Support for OAuth was added to farmOS.py starting with v0.1.6. To authorize and authenticate via OAuth, just supply the required parameters when creating a client. The library will know to use an OAuth Password Credentials or Authorization Code flow. Password Credentials Flow: \u00b6 farm_client = farmOS( hostname=url, username=farmos_username, password=farmos_password, client_id=\"farm\", scope=\"user_access\", # Supply a profile name so the tokens are saved to config profile_name=\"farm\" ) Running from a Python Console, the password can also be omitted and entered at runtime. This allows testing without saving a password in plaintext: >>> from farmOS import farmOS >>> farm_client = farmOS(hostname=\"http://localhost\", username=farmos_username, client_id=\"farm\", scope=\"user_access\") >>> Warning: Password input may be echoed. >>> Enter password: >? MY_PASSWORD >>> farm_client.info() 'name': 'server-name', 'url': 'http://localhost', 'api_version': '1.2', 'user': .... Authorization Code Flow: \u00b6 It's also possible to run the Authorization Code Flow from the Python console. This is great way to test the Authorization process users will go through. The console will print a link to navigate to where you sign in to farmOS and complete the authorization process. You then copy the link from the page you are redirected to back into the console. This supplies the farm_client with an an authorization code that it uses to request an OAuth token . >>> farm_client = farmOS(hostname=\"http://localhost\", client_id=\"farmos_development\", scope=\"user_access\") Please go here and authorize, http://localhost/oauth/authorize?response_type=code&client_id=farmos_development&redirect_uri=http%3A%2F%2Flocalhost%2Fapi%2Fauthorized&scope=user_access&state=V9RCDd4yrSWZP8iGXt6qW51sYxsFZs&access_type=offline&prompt=select_account Paste the full redirect URL here:>? http://localhost/api/authorized?code=33429f3530e36f4bdf3c2adbbfcd5b7d73e89d5c&state=V9RCDd4yrSWZP8iGXt6qW51sYxsFZs >>> farm_client.info() 'name': 'server-name', 'url': 'http://localhost', 'api_version': '1.2', 'user': .... Supplying an existing token: \u00b6 It can also be useful to create a client with an existing OAuth Token. This is possible by supplying the token parameter: token = { 'access_token': \"token\", 'refresh_token': \"token\", } farm_client = farmOS( hostname=url, client_id=client_id, client_secret=client_secret, scope=scope, token=token, ) This is how the farmOS Aggregator uses farmOS.py to communicate with farmOS servers. OAuth tokens are stored in the Aggregator's database instead of usernames and passwords. See how this is implemented in code here Troubleshooting \u00b6 Some common issues and solutions are described below. If these do not help, submit a support request on GitHub or ask questions in the farmOS chat room . HTTPS redirects - If your farmOS instance automatically redirects from http:// to https:// , make sure you are making requests using the https:// protocol. The redirect can cause issues with some API requests. Date format - All dates in farmOS are stored in Unix timestamp format. Most frameworks/languages provide functions for generating/converting dates/times to this format. Only Unix timestamps will be accepted by the API.","title":"API"},{"location":"development/api/#api","text":"farmOS has a REST API that other applications/systems can use to communicate with farmOS programatically. The API provides CRUD operations for all of the main farmOS record types (Drupal entity types). This is accomplished with the RESTful Web Services module. Note for Sensor Data: If you are looking for documentation about pushing and pulling data from sensors in farmOS, see Sensors . The following documentation provides a brief overview of the farmOS API for developers who are interested in using it. For more general information, please refer to the RESTful Web Services module documentation . In all of the commands below, replace the following placeholders with your specific farmOS URL, username, and password. [URL] - Base URL of the farmOS instance, without trailing slash (eg: https://example.farmos.net ) [USER] - User name (eg: MyUserName ) [PASS] - Password (eg: MyPassword ) [AUTH] - Authentication parameters for curl commands (this will depend on the authentication method you choose below).","title":"API"},{"location":"development/api/#authentication","text":"There are three ways to authenticate with a farmOS server: OAuth2 Authorization Tokens (recommended) Session Cookie and CSRF Token Basic Authentication","title":"Authentication"},{"location":"development/api/#1-oauth2-authorization-tokens","text":"farmOS includes an OAuth2 Authorization server for providing 3rd party clients access to the farmOS API. Rather than using a user's username and password to authenticate, OAuth2 uses access tokens to authenticate users. The access tokens are provided to both 1st and 3rd party clients who wish to access a user's protected resources from a server. Clients store the access token instead of the user's credentials, which makes it a more secure authentication method. Read more about the OAuth 2.0 standards For more information about authenticating with OAuth2, see the OAuth2 Details section below. Once you have an OAuth2 token, you can pass it to farmOS with an Authorization: Bearer header. -H \"Authorization: Bearer [OAUTH-TOKEN]\" This should be used to replace [AUTH] in the curl examples that follow.","title":"1. OAuth2 Authorization Tokens"},{"location":"development/api/#2-session-cookie-and-csrf-token","text":"The old approach (before OAuth2 was introduced in farmOS 7.x-1.4), was to authenticate via Drupal's user_login form and save the session cookie provided by Drupal. Then, you can use that to retrieve a CSRF token from [URL]/restws/session/token , which is provided and required by the restws module. The cookie and token can then be included with each API request. The following curl command will authenticate using the username and password, and save the session cookie to a file called farmOS-cookie.txt . Then it will get a session token and save that to a $TOKEN variable. Together, the cookie and token can be used to make authenticated requests. curl --cookie-jar farmOS-cookie.txt -d 'name=[USER]&pass=[PASS]&form_id=user_login' [URL]/user/login TOKEN=\"$(curl --cookie farmOS-cookie.txt [URL]/restws/session/token)\" After running those two commands, the cookie and token can be included with subsequent curl requests via the --cookie and -H parameters: --cookie farmOS-cookie.txt -H \"X-CSRF-Token: ${TOKEN}\" This should be used to replace [AUTH] in the curl examples that follow.","title":"2. Session Cookie and CSRF Token"},{"location":"development/api/#3-basic-authentication","text":"An alternative approach is to use HTTP Basic Authentication . The RESTful Web Services module comes with a Basic Authentication sub-module, which provides the ability to include the username and password with each request using HTTP Basic Authentication. This modules is included with farmOS but is disabled by default. By default the module only tries to authenticate usernames prefixed with 'restws'. This can be changed by modifying the regex used against usernames - see the RESTful Web Services Basic Authentication module documentation . SSL encryption is highly recommended. This option requires sending credentials with every request which means extra care must be taken to not expose these credentials. Using SSL will encrypt the credentials with each request. Otherwise, they will be sent in plaintext. Using basic authentication makes it much easier to test the API with development tools such as Postman or Restlet . You just need to add basic authentication credentials to the request header. The request returns a cookie, which seems to be saved by these applications. This means subsequent requests don't need the authentication header, as long as the cookie is saved. Basic Authentication can be used in curl requests via the -u parameter: -u [USER]:[PASS] This should be used to replace [AUTH] in the curl examples that follow.","title":"3. Basic Authentication"},{"location":"development/api/#farmjson","text":"farmOS provides an informational API endpoint at /farm.json , which includes the farm name, URL, API version, the system of measurement used by the farm, information about the currently authenticated user, installed languages, and information about available entity types and bundles. For example: { \"name\": \"My Farm\", \"url\": \"https://myfarm.mydomain.com\", \"api_version\": \"1.0\", \"system_of_measurement\": \"metric\", \"user\": { \"uid\": \"3\", \"name\": \"My Username\", \"mail\": \"myemail@mydomain.com\", \"language\": \"en\", }, \"languages\": { \"en\": { \"language\": \"en\", \"name\": \"English\", \"native\": \"English\", \"direction\": 0, }, }, \"resources\": { \"log\": { \"farm_activity\": { \"label\": \"Activity\", \"label_plural\": \"Activities\", \"fields\" { \"area\": { \"label\": \"Areas\", \"type\": \"taxonomy_term_reference\", \"required\": 0, }, ... }, } }, ... } } The system_of_measurement with be either metric or us . The resources section contains a list of entity types (aka \"resource types\") that are available. Within each is a list of bundles (eg: \"log types\", \"asset types\", etc). Each bundle contains information such as its translated label , and a list of available fields and their metadata ( label , required , etc). The taxonomy_term bundles also contain their vid (vocabulary ID), which is necessary when creating new terms (see Creating taxonomy terms ). Other modules can add information to /farm.json with hook_farm_info() .","title":"/farm.json"},{"location":"development/api/#api-version","text":"Current API version: 1.3 It is highly recommended that you check the API version of the farmOS system you are communicating with, to be sure that your code is using the same version. If any changes are made that are not backwards compatible, the API version will change. So by checking it in your code, you can prevent unexpected things from happening if you try to use unsupported API features.","title":"API Version"},{"location":"development/api/#requesting-records","text":"The following curl command examples demonstrate how to get lists of records and individual records in JSON format. They use the stored farmOS-cookie.txt file and $TOKEN variable generated with the commands above. Lists of records This will retrieve a list of harvest logs in JSON format: curl [AUTH] [URL]/log.json?type=farm_harvest Records can also be requested in XML format by changing the file extension in the URL: curl [AUTH] [URL]/log.xml?type=farm_harvest Individual records Individual records can be retrieved in a similar way, by including their entity ID. This will retrieve a log with ID 1: curl [AUTH] [URL]/log/1.json Endpoints The endpoint to use depends on the entity type you are requesting: Assets: /farm_asset.json Plantings: /farm_asset.json?type=planting Animals: /farm_asset.json?type=animal Equipment: /farm_asset.json?type=equipment ... Logs: /log.json Activities: /log.json?type=farm_activity Observations: /log.json?type=farm_observation Harvests: /log.json?type=farm_harvest Inputs: /log.json?type=farm_input ... Taxonomy terms: /taxonomy_term.json Areas*: /taxonomy_term.json?bundle=farm_areas Quantity Units: /taxonomy_term.json?bundle=farm_quantity_units Crops/varieties: /taxonomy_term.json?bundle=farm_crops Animal species/breeds: /taxonomy_term.json?bundle=farm_animal_types Log categories: /taxonomy_term.json?bundle=farm_log_categories Seasons: /taxonomy_term.json?bundle=farm_season ... * Note that areas are currently represented as Drupal taxonomy terms, but may be changed to assets in the future. See Make \"Area\" into a type of Farm Asset . Filtering Filters can be applied via query parameters tacked on to the end of the URL. For example, to show only \"done\" logs: /log.json?done=1 Refer to lists of fields under \"Creating records\" below for available filters. When a record references other records (for example, a log that references an asset), you must filter by the referenced record's ID. For example, to find logs that reference asset ID 5: /log.json?asset=5 Taxonomy term references are an exception to this rule. It is possible to filter using the name of the term, rather than the ID. For example, to show logs with a category of \"Tillage\": /log.json?log_category=Tillage The term name is also included in the returned JSON structure, alongside the term ID, so that extra requests to look up term names are not necessary.","title":"Requesting records"},{"location":"development/api/#creating-records","text":"Records can be created with a POST request of JSON/XML objects to the endpoint for the entity type you would like to create.","title":"Creating records"},{"location":"development/api/#creating-logs","text":"First, here is a very simple example of an observation log in JSON. The bare minimum required fields are name , type , and timestamp . { \"name\": \"Test observation via REST\", \"type\": \"farm_observation\", \"timestamp\": \"1526584271\", } Here is a curl command to create that log in farmOS: curl -X POST [AUTH] -H 'Content-Type: application/json' -d '{\"name\": \"Test observation via REST\", \"type\": \"farm_observation\", \"timestamp\": \"1526584271\"}' [URL]/log Most log types have the same set of standard fields. Some specific log types differ slightly. The following are standard fields available on most log types: id : The log ID (unique database primary key). name : The log name. type : The log type. Some types that are included in farmOS are: farm_activity : General activity logs. farm_observation : General observation logs. farm_input : An input to one or more assets/areas. farm_harvest : A harvest from one or more assets/areas. farm_seeding : A seeding log (specific to Planting assets). farm_transplanting : A transplanting log (specific to Planting assets). farm_maintenance : A maintenance log (specific to Equipment assets). timestamp : A timestamp representing when the logged event took place. done : Boolean value indicating whether the log is \"done\" or not. notes : A free-form text field for log notes. Note that this should be a JSON object with a value property and a format property set to farm_format . asset : Reference(s) to asset(s) that the log is associated with. equipment : Reference(s) to equipment assets that were used in the process. area : Reference(s) to area(s) that the log is associated with. geofield : Geometry specific to the logged event. movement : Movement information (see \"Field collections\" below). membership : Group membership information (see \"Field collections\" below). quantity : Quantity measurements (see \"Field collections\" below). images : Image files attached to the log. files : Other files attached to the log. flags : Flags associated with the log. Examples: priority monitor review log_category : A reference to one or more log categories. log_owner : A reference to one or more users that the log is assigned to. Note that this is different from uid , which is the user who created the log. created : A timestamp representing when the log was created. changed : A timestamp representing when the log was last updated. uid : A reference to the user who created the log. data : An arbitrary string of data. This can be used to store additional data on the log as JSON, XML, YAML, etc. It is the resposibility of the API user to respect data format that is already in the log.","title":"Creating logs"},{"location":"development/api/#input-logs","text":"Additional fields on input logs (all optional): material : Reference(s) to material(s) that were applied. input_purpose : A description of the purpose of the input. input_method : A description of how the input was applied. input_source : A description of where the input was obtained. date_purchase : A timestamp representing when the input material was purchased. lot_number : The lot number(s) of the input material, if available.","title":"Input logs"},{"location":"development/api/#harvest-logs","text":"Additional fields on harvest logs (all optional): lot_number : The harvest lot number.","title":"Harvest logs"},{"location":"development/api/#seeding-and-transplanting-logs","text":"Seeding and transplanting logs are log types that are specific to Planting assets (to indicate when seedings/transplantings took place, along with quantity and location information). They have some key differences from other log types: The asset field is required and must reference an asset of type planting . They do not have the areas or geofield fields, and instead expect to have a movement field collection with information about where it took place. This is used to set the location of the planting at a given point in time. Seeding logs also have a seed_source field which can be used to specify where seeds came from (free-form text field).","title":"Seeding and transplanting logs"},{"location":"development/api/#creating-assets","text":"Assets must have a name and a type , and some asset types have additional required fields. For example planting assets require a crop reference (for crop/variety), animal assets require an animal_type reference (for species/breed), and other types may have other requirements. A quick way to find out which fields are required is to open the \"Add asset\" form in farmOS and look for the red asterisk that indicates a required field. A very basic \"Equipment\" asset looks like this: { \"name\": \"Tractor\", \"type\": \"equipment\", \"manufacturer\": \"Allis-Chambers\", \"model\": \"G\", \"serial_number\": \"1234567890\", } Here is a curl command to create that asset in farmOS: curl -X POST [AUTH] -H 'Content-Type: application/json' -d '{\"name\": \"Tractor\", \"type\": \"equipment\", \"manufacturer\": \"Allis-Chambers\", \"model\": \"G\", \"serial_number\": \"1234567890\"}' [URL]/farm_asset Most asset types have the same set of standard fields. Some specific asset types differ slightly. The following are standard fields available on most log types: id : The asset ID (unique database primary key). name : The asset name. type : The asset type. Some types that are included in farmOS are: planting animal equipment group description : A free-form text field for an asset description. Note that this should be a JSON object with a value property and a format property set to farm_format . archived : A timestamp representing when the asset was archived. If this is 0 then the asset is not archived. images : Image files attached to the asset. files : Other files attached to the asset. flags : Flags associated with the log. Examples: priority monitor review created : A timestamp representing when the asset was created. changed : A timestamp representing when the asset was last changed. uid : A reference to the user who created the asset. data : An arbitrary string of data. This can be used to store additional data on the asset as JSON, XML, YAML, etc. It is the resposibility of the API user to respect data format that is already in the log. Assets will also have the following special-purpose fields, which are computed based on the asset's log history. These fields cannot be written to directly, they can only be changed via logs. location : An array of references to areas that the asset is currently located in, based on its most recent completed movement log. geometry : The current geometry of the asset, based on its most recent completed movement log.","title":"Creating assets"},{"location":"development/api/#planting-assets","text":"Additional fields on animal assets: crop : Reference(s) to the crops/varieties this is a planting of. Required. parent : Reference(s) to assets that this planting is derived from.","title":"Planting assets"},{"location":"development/api/#animal-assets","text":"Additional fields on animal assets: animal_type : Reference to the animal's species/breed. Required. animal_nicknames : Nickname(s) for the animal. animal_castrated : Boolean indicating whether or not this animal has been castrated. animal_sex : The sex of the animal. Available options: F (female) M (male) tag : ID Tag(s) that are assigned to the animal (see \"Field collections\" below). parent : Reference(s) to the animal's parent(s). date : A timestamp representing the birth date of the animal.","title":"Animal assets"},{"location":"development/api/#equipment-assets","text":"Additional fields on equipment assets (all optional): manufacturer : The equipment manufacturer. model : The equipment model. serial_number : The equipment serial number.","title":"Equipment assets"},{"location":"development/api/#creating-taxonomy-terms","text":"farmOS allows farmers to build vocabularies of terms for various categorization purposes. These are referred to as \"taxonomies\" in farmOS (and Drupal), although \"vocabulary\" is sometimes used interchangeably. Some things that are represented as taxonomy terms include quantity units, crops/varieties, animal species/breeds, input materials, and log categories. See \"Endpoints\" above for specific API endpoints URLs. A very basic taxonomy term JSON structure looks like this: { \"tid\": \"3\", \"name\": \"Cabbage\", \"description\": \"\", \"vocabulary\": { \"id\": \"7\", \"resource\": \"taxonomy_vocabulary\", }, \"parent\": [ { \"id\": \"10\", \"resource\": \"taxonomy_term\", }, ], \"weight\": \"5\", } The tid is the unique ID of the term (database primary key). When creating a new term, the only required fields are name and vocabulary . The vocabulary is an ID that corresponds to the specific vocabulary the term will be a part of (eg: quantity units, crops/varieties, log categories, etc). The fields parent and weight control term hierarchy and ordering (a heavier weight will sort it lower in the list). When fetching a list of terms from farmOS, you can filter by the vocabulary's \"machine name\" (or \"bundle\") like so: curl [AUTH] [URL]/taxonomy_term.json?bundle=farm_crops When creating a new term, however, you need to provide the vocabulary ID in the term object, not the machine name/bundle. In order to get the vocabulary ID, you can look it up using the /taxonomy_vocabulary endpoint, which lists all available vocabularies. Or, you can find it in farm.json (described above). The vocabulary ID may be different from one farmOS system to another, so if you save it internally in your application, just know that it may not correspond to the same vocabulary on another farmOS. Therefore it is recommended that you look it up each time you need it. For example, to get the vid that corresponds to the farm_crops vocabulary: curl [AUTH] [URL]/taxonomy_vocabulary.json?machine_name=farm_crops Or, by loading the information in farm.json and parsing out the vocabulary ID: curl [AUTH] [URL]/farm.json Before you create a new term, you should check to see if it already exists: curl [AUTH] [URL]/taxonomy_term.json?bundle=farm_crops&name=Broccoli Then, you can create a new term (replace [VID] with the ID of the vocabulary the term should be added to): curl [AUTH] -X POST -H 'Content-Type: application/json' -d '{\"name\": \"Broccoli\", \"vocabulary\": \"[VID]\"}' [URL]/taxonomy_term For convenience, it is possible to create terms on-the-fly when creating or updating other records that reference them. Simply provide the name of the term instead of the tid , and farmOS will attempt to look up the existing term, or create a new one. For example, to create a \"2020 Spinach\" planting asset, a \"Spinach\" crop term, and a \"2020\" season term all at the same time: { \"name\": \"2020 Spinach\", \"type\": \"planting\", \"crop\": [{\"name\": \"Spinach\"}], \"season\": [{\"name\": \"2020\"}], } Creating an area Areas are taxonomy terms in farmOS, but they have some additional fields on them for mapping purposes. In order for an area to show up on a map, it must have an area_type set, and a geometry in the geofield . A very basic area record looks like this: { \"name\": \"North field\", \"description\": \"\", \"area_type\": \"field\", \"geofield\": [ { \"geom\": \"POINT(-31.04003861546518 39.592143995003994)\", }, ], } The geometry should be in Well-Known Text . Some available area types include: field bed building greenhouse property paddock water landmark other Note that area types are defined by modules (eg: paddock is provided by the farm_livestock module), so the area types available on your farmOS may vary. You can fetch all areas of a particular type (eg: field ) like this: curl [AUTH] [URL]/taxonomy_term.json?bundle=farm_areas&area_type=field","title":"Creating taxonomy terms"},{"location":"development/api/#updating-records","text":"Records can be updated with a PUT request of JSON/XML objects to the record's endpoint (with ID). Only include the fields you want to update - everything else will be left unchanged. Do not add .json or .xml to the endpoint's URL. Instead, add a Content-Type header that specifies either application/json or application/xml . For example, to change the name of log 1: curl -X PUT [AUTH] -H 'Content-Type: application/json' -d '{\"name\": \"Change the log name\"}' [URL]/log/1 Areas will also have the following special-purpose fields, which are computed based on log history. These fields cannot be written to directly, they can only be changed via logs. assets : An array of references to assets that are currently located in the area, based on asset movement logs.","title":"Updating records"},{"location":"development/api/#field-collections","text":"Some fields are stored within Field Collections in farmOS, which are technically separate entities attached to the host entity. farmOS uses the RESTful Web Services Field Collection module to hide the fact that these are separate entities, so that their fields can be accessed and modified in the same request as the host entity. In farmOS Field Collections are used for the following:","title":"Field collections"},{"location":"development/api/#quantity-measurements","text":"Quantity measurements are recorded on logs, and can each include a measure (eg: count, weight, volume, etc), a value (decimal number), a unit (a reference to a Units taxonomy term, and a label (a free-form text field). A log with a quantity measurement looks like this: { \"name\": \"Example quantity measurement log\", \"type\": \"farm_observation\", \"timestamp\": \"1551983893\", \"quantity\": [ { \"measure\": \"weight\", \"value\": \"100\", \"unit\": {\"id\": \"15\"}, \"label\": \"My label\", }, ], } Available measure options are: count length weight area volume time temperature value rate rating ratio probability All measurement properties are optional. The label is useful if you have more than one measurement of the same measure (eg: two weight measurements) in the same log. Use the label to add more specific information about what each measurement is for.","title":"Quantity measurements"},{"location":"development/api/#movements","text":"Movements are defined on logs, and include an area reference (where the asset(s) are moving to), and optionally a geometry (if you need to define a more specific location than the area reference itself). A log with a movement looks like this: { \"name\": \"Example movement log\", \"type\": \"farm_activity\", \"timestamp\": \"1551983893\", \"asset\": [ {\"id\": \"123\"}, ], \"movement\": { \"area\": [ {\"id\": \"5\"}, ], \"geometry\": \"POINT(-31.04003861546518 39.592143995003994)\", }, } Within the movement structure, the area ID should be an area term ID ( tid on the area object). The geometry should be in Well-Known Text . It is possible to reference multiple areas, indicating that the asset is moved to multiple areas (eg: a planting in multiple beds).","title":"Movements"},{"location":"development/api/#group-membership","text":"Group membership changes are defined on logs, and include one or more group asset IDs. This indicates that any referenced asset(s) were moved to the group(s) specified at the time of the log. A log with a group membership change looks like this: { \"name\": \"Example group membership change log\", \"type\": \"farm_activity\", \"timestamp\": \"1551983893\", \"asset\": [ {\"id\": \"123\"}, ], \"membership\": { \"group\": [ {\"id\": \"456\"}, ], }, } Groups are a type of asset in farmOS, so the group ID is actually an asset ID.","title":"Group membership"},{"location":"development/api/#inventory-adjustments","text":"Inventory adjustments are defined on logs, and include one or more pairs of asset IDs (the asset for which inventory is being adjusted) and an adjustment value (postitive or negative number, to indicate an increase or decrease in the inventory level). A log with an inventory adjustment looks like this: { \"name\": \"Example group membership change log\", \"type\": \"farm_activity\", \"timestamp\": \"1551983893\", \"inventory\": [ { \"asset\": {\"id\": \"123\"}, \"value\": \"-10\", }, ], }","title":"Inventory adjustments"},{"location":"development/api/#animal-id-tags","text":"Animal ID Tags can be added to animal assets, and include a Tag ID, Tag Type, and Tag Location. An animal asset with an ID tag looks like this: { \"name\": \"Betsy\", \"type\": \"animal\", \"animal_type\": {\"id\": \"10\"}, \"tag\": [ { \"id\": \"123456\", \"location\": \"Left ear\", \"type\": \"Ear tag\", }, ], } The ID and Location fields can be anything you want. Available tag types are: Brand Ear tag Tattoo Leg band Chip Other","title":"Animal ID Tags"},{"location":"development/api/#uploading-files","text":"Files can be attached to records using the API. Most record types (areas, assets, logs, etc) have both a \"Photo(s)\" field (for image files) and a \"File(s)\" field (for other files). The machine names of these fields are: Photo(s): images File(s): files The API expects an array of base64-encoded strings. Multiple files can be included in the array. For example (replace [BASE64_CONTENT] with the base64 encoding of the file): { \"name\": \"Test file upload via REST\", \"type\": \"farm_observation\", \"timestamp\": \"1534261642\", \"images\": [ \"data:image/jpeg;base64,[BASE64_CONTENT]\", ], } Here is an example using curl (replace [filename] with the path to the file). This will create a new observation log with the file attached to the \"Photo(s)\" field of the log. # Get the file MIME type. FILE_MIME=`file -b --mime-type [filename]` # Encode the file as a base64 string and save it to a variable. FILE_CONTENT=`base64 [filename]` # Post a log with the file attached to the photo field. # <<CURL_DATA is used because base64 encoded files are generally longer # the max curl argument length. See: # https://unix.stackexchange.com/questions/174350/curl-argument-list-too-long curl -X POST [AUTH] -H \"Content-Type: application/json\" -d @- [URL]/log <<CURL_DATA {\"name\": \"Test file upload via REST\", \"type\": \"farm_observation\", \"timestamp\": \"1534261642\", \"images\": [\"data:${FILE_MIME};base64,${FILE_CONTENT}\"]} CURL_DATA","title":"Uploading files"},{"location":"development/api/#oauth2-details","text":"The following describes more of the details necessary for using OAuth2 for authentication with a farmOS server.","title":"OAuth2 Details"},{"location":"development/api/#scopes","text":"OAuth Scopes define different levels of permission. Two scopes are included with farmOS: user_access : This allows full user access to the farmOS server. With this scope, a third party can do anything the farmOS user account has permission to do. farm_info : Allows access to data at /farm.json","title":"Scopes"},{"location":"development/api/#clients","text":"In order to connect to farmOS via OAuth2, there must be a \"client\" configured on the server that corresponds to the client that will be making the requests. This is necessary so that tokens can be revoked from specific clients. The core farm_api module provides a default client called farm , which supports the Password Credentials and Refresh Token grants (more info in \"Authorization Flows\" below). If you are writing a custom script that communicates with farmOS via the API, this is the recommended approach for authenticating with username and password. The core farm_api module also comes with a farm_api_development module that can be enabled for testing different OAuth authorization flows. For the purposes of documentation, this client is used in below examples. This module defines an OAuth client with the following parameters: client_id = farmos_development client_secret = None. This client does not require a client_secret redirect_uri = http://localhost/api/authorized (This is required for the Authorization Code Grant) A client can be added via a farmOS module by implementing hook_farm_api_oauth2_client() . The following example defines a client for a fictional farmOS Aggregator called \"My Aggregator\": <?php /** * Implements hook_farm_api_oauth2_client(). */ function myaggregator_farm_api_oauth2_client() { $clients = array(); // Define an OAuth2 client for My Aggregator. $redirect_uris = array( 'https://myfarmosaggregator.com/register-farm', 'https://myfarmosaggregator.com/authorize-farm', ); $clients['my_aggregator'] = array( 'label' => 'My Aggregator', 'client_key' => 'my_farmos_client', 'redirect_uri' => implode(\"\\n\", $aggregator_redirect_uris), ); return $clients; }","title":"Clients"},{"location":"development/api/#authorization-flows","text":"The OAuth 2.0 standards outline 5 Oauth2 Grant Types to be used in an OAuth2 Authorization Flow - They are the Authorization Code, Implicit, Password Credentials, Client Credentials and Refresh Token Grants. Currently, the farmOS OAuth Server only supports the Authorization Code , Password Credentials and Refresh Token grants. The Authorization Code and Refresh Token grants are the only Authorization Flows recommended by farmOS for use with 3rd party clients. NOTE: Only use the Password Grant if the client can be trusted with a farmOS username and password (this is considered 1st party ). The Client Credentials Grant is often used for machine authentication not associated with a user account. Due to limitations with the Drupal 7 oauth2_server module, access tokens provided via the Client Credentials Grant cannot be associated with the Drupal Permissions system to access protected resources. farmOS will hopefully support the Client Credentials Grant when farmOS migrates to Drupal 8 and can use the simple_oauth module. NOTE: The oauth2/token and oauth2/authorize endpoints are deprecated and will be removed in farmOS 2.x. Starting with farmOS 1.6 it is recommended to use the new oauth/token and oauth/authorize endpoints.","title":"Authorization Flows"},{"location":"development/api/#authorization-code-grant","text":"The Authorization Code Grant is most popular for 3rd party client authorization. Requesting resources is a four step process: First : the client sends a request to the farmOS server /oauth/authorize endpoint requesting an Authorization Code . The user logs in and authorizes the client to have the OAuth Scopes it is requesting. Copy this link to browser - http://localhost/oauth/authorize?response_type=code&client_id=farmos_development&scope=user_access&redirect_uri=http://localhost/api/authorized&state=p4W8P5f7gJCIDbC1Mv78zHhlpJOidy Second : after the user accepts, the server redirects to the redirect_uri with an authorization code and state in the query parameters. Example redirect url from server: http://localhost/api/authorized?code=9eb9442c7a2b011fd59617635cca5421cd089943&state=p4W8P5f7gJCIDbC1Mv78zHhlpJOidy Third : copy the code and state from the URL into the body of a POST request. The grant_type , client_id , client_secret and redirect_uri must also be included in the POST body. The client makes a POST request to the /oauth/token endpoint to retrieve an access_token and refresh_token . foo@bar:~$ curl -X POST -d \"grant_type=authorization_code&code=ae4d1381cc67def1c10dc88a19af6ac30d7b5959&client_id=farmos_development&redirect_uri=http://localhost/api/authorized\" http://localhost/oauth/token {\"access_token\":\"3f9212c4a6656f1cd1304e47307927a7c224abb0\",\"expires_in\":\"10\",\"token_type\":\"Bearer\",\"scope\":\"user_access\",\"refresh_token\":\"292810b04d688bfb5c3cee28e45637ec8ef1dd9e\"} Fourth : the client sends the access token in the request header to access protected resources. The header is an Authorization header with a Bearer token: Authorization: Bearer access_token foo@bar:~$ curl --header \"Authorization: Bearer b872daf5827a75495c8194c6bfa4f90cf46c143e\" http://localhost/farm.json {\"name\":\"farmos-server\",\"url\":\"http:\\/\\/localhost\",\"api_version\":\"1.1\",\"user\":{\"uid\":\"1\",\"name\":\"admin\", ....","title":"Authorization Code Grant"},{"location":"development/api/#password-credentials-grant","text":"NOTE: Only use the Password Grant if the client can be trusted with a farmOS username and password (this is considered 1st party ). The Password Credentials Grant uses a farmOS username and password to retrieve an access_token and refresh_token in one step. For the user, this is the simplest type of authorization. Because the client can be trusted with their farmOS Credentials, a users username and password can be collected directly into a login form within the client application. These credentials are then used (not stored) to request tokens which are used for authentication with the farmOS server and retrieving data. Requesting protected resources is a two step process: First , the client sends a POST request to the farmOS server /oauth/token endpoint with grant_type set to password and a username and password included in the request body. $ curl -X POST -d \"grant_type=password&username=username&password=test&client_id=farm&scope=user_access\" http://localhost/oauth/token {\"access_token\":\"e69c60dea3f5c59c95863928fa6fb860d3506fe9\",\"expires_in\":\"300\",\"token_type\":\"Bearer\",\"scope\":\"user_access\",\"refresh_token\":\"cead7d46d18d74daea83f114bc0b512ec4cc31c3\"} second , the client sends the access_token in the request header to access protected resources. The header is an Authorization header with a Bearer token: Authorization: Bearer access_token foo@bar:~$ curl --header \"Authorization: Bearer e69c60dea3f5c59c95863928fa6fb860d3506fe9\" http://localhost/farm.json {\"name\":\"farmos-server\",\"url\":\"http:\\/\\/localhost\",\"api_version\":\"1.1\",\"user\":{\"uid\":\"1\",\"name\":\"admin\", ....","title":"Password Credentials Grant"},{"location":"development/api/#refreshing-tokens","text":"The refresh_token can be used to retrieve a new access_token if the token has expired. It is a one step process: The client sends an authenticated request to the /oauth/token endpoint with grant_type set to refresh_token and includes the refresh_token , client_id and client_secret in the request body. foo@bar:~$ curl -X POST -H 'Authorization: Bearer ad52c04d26c1002084501d28b59196996f0bd93f' -d 'refresh_token=52e7a0e12e8ddd08b155b3b3ee385687fef01664&grant_type=refresh_token&client_id=farmos_api_client&client_secret=client_secret' http://localhost/oauth/token {\"access_token\":\"acdbfabb736e42aa301b50fdda95d6b7fd3e7e14\",\"expires_in\":\"300\",\"token_type\":\"Bearer\",\"scope\":\"user_access\",\"refresh_token\":\"b73f4744840498a26f43447d8cf755238bfd391a\"} The server responds with an access_token and refresh_token that can be used in future requests. The previous access_token and refresh_token will no longer work.","title":"Refreshing Tokens"},{"location":"development/api/#oauth2-authorization-with-the-farmos-api","text":"","title":"OAuth2 Authorization with the farmOS API"},{"location":"development/api/#authorization-in-farmospy","text":"Support for OAuth was added to farmOS.py starting with v0.1.6. To authorize and authenticate via OAuth, just supply the required parameters when creating a client. The library will know to use an OAuth Password Credentials or Authorization Code flow.","title":"Authorization in farmOS.py"},{"location":"development/api/#password-credentials-flow","text":"farm_client = farmOS( hostname=url, username=farmos_username, password=farmos_password, client_id=\"farm\", scope=\"user_access\", # Supply a profile name so the tokens are saved to config profile_name=\"farm\" ) Running from a Python Console, the password can also be omitted and entered at runtime. This allows testing without saving a password in plaintext: >>> from farmOS import farmOS >>> farm_client = farmOS(hostname=\"http://localhost\", username=farmos_username, client_id=\"farm\", scope=\"user_access\") >>> Warning: Password input may be echoed. >>> Enter password: >? MY_PASSWORD >>> farm_client.info() 'name': 'server-name', 'url': 'http://localhost', 'api_version': '1.2', 'user': ....","title":"Password Credentials Flow:"},{"location":"development/api/#authorization-code-flow","text":"It's also possible to run the Authorization Code Flow from the Python console. This is great way to test the Authorization process users will go through. The console will print a link to navigate to where you sign in to farmOS and complete the authorization process. You then copy the link from the page you are redirected to back into the console. This supplies the farm_client with an an authorization code that it uses to request an OAuth token . >>> farm_client = farmOS(hostname=\"http://localhost\", client_id=\"farmos_development\", scope=\"user_access\") Please go here and authorize, http://localhost/oauth/authorize?response_type=code&client_id=farmos_development&redirect_uri=http%3A%2F%2Flocalhost%2Fapi%2Fauthorized&scope=user_access&state=V9RCDd4yrSWZP8iGXt6qW51sYxsFZs&access_type=offline&prompt=select_account Paste the full redirect URL here:>? http://localhost/api/authorized?code=33429f3530e36f4bdf3c2adbbfcd5b7d73e89d5c&state=V9RCDd4yrSWZP8iGXt6qW51sYxsFZs >>> farm_client.info() 'name': 'server-name', 'url': 'http://localhost', 'api_version': '1.2', 'user': ....","title":"Authorization Code Flow:"},{"location":"development/api/#supplying-an-existing-token","text":"It can also be useful to create a client with an existing OAuth Token. This is possible by supplying the token parameter: token = { 'access_token': \"token\", 'refresh_token': \"token\", } farm_client = farmOS( hostname=url, client_id=client_id, client_secret=client_secret, scope=scope, token=token, ) This is how the farmOS Aggregator uses farmOS.py to communicate with farmOS servers. OAuth tokens are stored in the Aggregator's database instead of usernames and passwords. See how this is implemented in code here","title":"Supplying an existing token:"},{"location":"development/api/#troubleshooting","text":"Some common issues and solutions are described below. If these do not help, submit a support request on GitHub or ask questions in the farmOS chat room . HTTPS redirects - If your farmOS instance automatically redirects from http:// to https:// , make sure you are making requests using the https:// protocol. The redirect can cause issues with some API requests. Date format - All dates in farmOS are stored in Unix timestamp format. Most frameworks/languages provide functions for generating/converting dates/times to this format. Only Unix timestamps will be accepted by the API.","title":"Troubleshooting"},{"location":"development/architecture/","text":"Architecture \u00b6 This video by Chris Callahan at UVM Extension 's Agricultural Engineering Program provides an overview of the basic structural layout and architectural design of FarmOS with Michael Stenta of Farmier . farmOS uses areas, assets, logs and people as key components of its farm data management approach. Learn about how these features interact to provide a flexible platform for farm record keeping and management. Available on YouTube: https://youtu.be/1wXD_K7Y_aI Entity types \u00b6 farmOS is architected using four Drupal entity types: Farm Assets Logs Taxonomy Terms Users The Entity system in Drupal provides a standardized way of representing different types of objects, and includes mechanisms and APIs for adding fields, creating relationships to other entities, and performing actions when entities are created/displayed/updated/deleted. farmOS uses Drupal's entity system to represent all of its records. The first three types (Farm Assets, Logs, and Taxonomy Terms) also use a Drupal concept known as \"bundles\". Bundles are essentially sub-types. Each bundle can have a unique set of input fields on it, which can be used to create different types of assets, logs, etc. To learn more about how entity types and bundles work in Drupal, refer to An Introduction to Entities in the drupal.org handbook. The following is a brief overview of the entity types that farmOS uses. Farm Assets \u00b6 The \"Farm Asset\" entity type is provided by the \"Farm Asset\" module, and is used to represent \"assets\" or \"things\" in the farm. farmOS comes with a core set of asset types, including Plantings, Animals, and Equipment - and more can be added via contributed modules. Logs \u00b6 The \"Log\" entity type is provided by the \"Log\" module, and is used to represent various types of events that are recorded on a farm (eg: activities, observations, inputs, harvests, etc). The \"Farm Log\" module provides a core set of log types that can apply to any kind of asset. Other modules can provide more specific log types - like the \"Seeding\" log type, which is provided by the \"Farm Crop\" module. Taxonomy Terms \u00b6 Taxonomy Terms are a core Drupal entity type, and they are generally used for categorization and tagging of things. Taxonomy Terms are organized into \"Vocabularies\", and farmOS provides a number of different vocabulary types that are used throughout the system. Users \u00b6 Users are a core Drupal entity type, and they provide the mechanism through which you can log into the system and use it. They represent all the different people who are involved with the farm, and they can be assigned roles to grant them different levels of permission .","title":"Architecture"},{"location":"development/architecture/#architecture","text":"This video by Chris Callahan at UVM Extension 's Agricultural Engineering Program provides an overview of the basic structural layout and architectural design of FarmOS with Michael Stenta of Farmier . farmOS uses areas, assets, logs and people as key components of its farm data management approach. Learn about how these features interact to provide a flexible platform for farm record keeping and management. Available on YouTube: https://youtu.be/1wXD_K7Y_aI","title":"Architecture"},{"location":"development/architecture/#entity-types","text":"farmOS is architected using four Drupal entity types: Farm Assets Logs Taxonomy Terms Users The Entity system in Drupal provides a standardized way of representing different types of objects, and includes mechanisms and APIs for adding fields, creating relationships to other entities, and performing actions when entities are created/displayed/updated/deleted. farmOS uses Drupal's entity system to represent all of its records. The first three types (Farm Assets, Logs, and Taxonomy Terms) also use a Drupal concept known as \"bundles\". Bundles are essentially sub-types. Each bundle can have a unique set of input fields on it, which can be used to create different types of assets, logs, etc. To learn more about how entity types and bundles work in Drupal, refer to An Introduction to Entities in the drupal.org handbook. The following is a brief overview of the entity types that farmOS uses.","title":"Entity types"},{"location":"development/architecture/#farm-assets","text":"The \"Farm Asset\" entity type is provided by the \"Farm Asset\" module, and is used to represent \"assets\" or \"things\" in the farm. farmOS comes with a core set of asset types, including Plantings, Animals, and Equipment - and more can be added via contributed modules.","title":"Farm Assets"},{"location":"development/architecture/#logs","text":"The \"Log\" entity type is provided by the \"Log\" module, and is used to represent various types of events that are recorded on a farm (eg: activities, observations, inputs, harvests, etc). The \"Farm Log\" module provides a core set of log types that can apply to any kind of asset. Other modules can provide more specific log types - like the \"Seeding\" log type, which is provided by the \"Farm Crop\" module.","title":"Logs"},{"location":"development/architecture/#taxonomy-terms","text":"Taxonomy Terms are a core Drupal entity type, and they are generally used for categorization and tagging of things. Taxonomy Terms are organized into \"Vocabularies\", and farmOS provides a number of different vocabulary types that are used throughout the system.","title":"Taxonomy Terms"},{"location":"development/architecture/#users","text":"Users are a core Drupal entity type, and they provide the mechanism through which you can log into the system and use it. They represent all the different people who are involved with the farm, and they can be assigned roles to grant them different levels of permission .","title":"Users"},{"location":"development/client/","text":"farmOS Client \u00b6 Work has begun on a simplified farmOS app that works offline in both browser and native app form. It is installable on Android and iOS devices. The goal is to create a fast and focused client app for day-to-day and in-the-field record keeping that stores data locally for offline use, and syncs back to a farmOS server when internet access is available. The application consists of the main client, which provides the UI and core features, as well as native plugins, which provide specific support for native functionality, like the ability to persist data and access the camera. The source code can be found here: https://github.com/farmOS/farmOS-client This documentation is not complete. It is intended only for informational purposes at this time. User's Guide \u00b6 Please see the User's Guide for more information on how to install and use the client on your devices. Architecture \u00b6 The client is built with Vue.js and Apache Cordova . Initially, the client and its native implementation were maintained as separate libraries. This was done with the aim of being able to isolate native functionality in Vue plugins that could be swapped out for browser-based plugins. This may not be strictly necessary in the future, but it does at least make for good separation of concerns. Development environments \u00b6 The first thing of course is to clone the client repo from GitHub, and install the npm dependencies: $ git clone https://github.com/farmOS/farmOS-client.git $ cd farmOS-client $ npm install Note that the default branch for this repository is develop , not master ; develop should represent the most current set of complete features that are only awaiting further testing before release. You should branch or fork off develop and submit pull requests to be merged back into it. The deploy branch respresents the latest tagged release. Browser \u00b6 The browser-based development environment can be started by running the following command from the project root: $ npm start This will start the Webpack devServer, which will compile a development build and serve it from http://localhost:8080/ . Changes saved to the files in your local repo will be hot reloaded automatically while the devServer is running. Proxying a farmOS Docker container \u00b6 By default, when the Webpack devServer starts, it will set up a proxy service, which will route all AJAX requests and responses through http://localhost:80 , in order to prevent CORS errors. This is assumed to be the address of a local farmOS development server running in a Docker container. This is probably the easiest way to get a development backend up and running, so if you don't already have a sever you can use for testing, see the full instructions for setting up a farmOS Docker container . If you wish to proxy an address other than http://localhost:80 , you'll need to change the proxy settings in farmOS-native/config/index.js . Set dev.proxy.target to the address and port of your farmOS testing server. Restart the devServer and it should now be proxying your new address. It may also be necessary to add new endpoints to the dev.proxy.context array as new features are developed and new endpoints on the farmOS server need to be reached. For more information, see the Webpack documentation on configuring the proxy middleware . You will also need to configure the server to enable CORS requests. Go to http://localhost/admin/config/farm/access and enter http://localhost:8080 as the Access-Control-Allow-Origin. Finally, when logging in to the client from the browser, simply leave the URL field blank. The devServer will then interpret all requests as relative links and proxy them accordingly. For some reason login can sometimes fail on the first attempt, but should succeed on all subsequent attempts. Platform SDK's \u00b6 Cordova docs on running the emulator and debugger in Android Studio Cordova docs on running the emulator and debugger in XCode Web build process \u00b6 To build the client for the web, you just need to run the build script: $ npm run build:web The output of this script will be found in the dist directory and can be deployed using web server. Native build process \u00b6 The process for building the native applications for iOS and Android can be broken down into 2 main steps: first, Webpack bundles all the HTML, CSS and JavaScript modules into their final form that will run in WebView ; secondly, Cordova, with some help from the Android and iOS SDK's (Android Studio & XCode, respectively), builds the full-blown native packages (.apk and .ipa files, respectively). To build from source, you'll need to clone the client repository from GitHub: $ git clone https://github.com/farmOS/farmOS-client.git Bundling the web assets with Webpack is fairly straight-forward. Node (v.6.0.0 or higher) and npm (v.3.0.0 or higher) are the only system requirements. Once Node is installed, you can install the necessary JavaScript dependencies with npm, which is automatically included with Node. The npm script build:native can then run Webpack to bundle the assets. All this can be done by running the following two commands from the project's root directory: $ npm install $ npm run build:native This will generate all the necessary files within the www directory, which Webpack will create if it doesn't already exist. Do not alter these files directly. They are optimized for WebView, which is basically a browser that Cordova installs and runs inside the native application itself to render all the HTML, CSS and JavaScript source files. The same files are used by both iOS and Android implementations All the web assets are now ready for building the final native packages. Both platforms will require installing Cordova globally, via npm: $ npm install -g cordova This, however, is where the process diverges into separate iOS and Android builds. This next stage will probably comprise the most system configuration, too, since it requires installing each platform's SDK (Software Development Kit), if they aren't installed already. Of course, if you only intend to build for one platform, you only need to install that platform's SDK and corresponding system requirements; building for both platforms will require installing both SDK's. Android Build \u00b6 To configure your system to build the Android app, follow Cordova's Android Platform Guide \" and the Android Studio installation guide . This will differ depending on your development machine's operating system, but Mac, Windows and Linux are all supported. System Requirements: Java 8 Android Studio Gradle Note that Android Studio recommends the official Oracle JDK for Java 8; using OpenJDK may cause errors. Also make sure to follow Cordova's instructions for setting up your system's environment variables and installing the SDK packages for the Android versions the app will target. As of May 2018, the latest version of Android that Cordova seems to support is 7.1.1, at API Level 25. Once Android Studio is installed and configured, make sure Android has been added to Cordova's list of platforms, then you're try out the build command: $ cordova platform add android $ cordova build android By default, the build command will produce a debugging APK (equivalent to running cordova build android --debug ). If you want to build a final release version, you'll need to add the --release flag, but you'll also need to use your keys for signing the APK (see \" Signing an App \" in the Cordova docs for more details). For reference, the official farmOS Field Kit app is built using the following flags: cordova build android --release -- \\ --keystore=/path/to//your-key.keystore \\ --storePassword=xxxxxxxx \\ --alias=yyyy --password=zzzzzzzz Both the debug and release APK's can then be found at path/to/farmOS-client/platforms/android/app/build/outputs/apk after building. iOS Build \u00b6 Only available on Apple OS X. Windows and Linux are not supported. For some workarounds, see \" Developing an iOS App on Linux \" You'll need Xcode installed in order to run the Cordova build commands. See Cordova's iOS Platform Guide for more info. Once you have the environment set up, you'll want to add the iOS platform with Cordova (we recommend version 5.1.1 or higher), then you can run a debugging build: cordova platform add ios@5.1.1 cordova build ios Using the build command without the --release flag triggers a debug build by default. To build a signed app for the App Store, you'll need to follow Cordova's app signing guidelines , but for reference, we use the following command and flags: cordova build ios --release --device \\ --codeSignIdentity=\"iPhone Distribution\" \\ --developmentTeam=\"ABCD1234\" \\ --packageType=\"app-store\" \\ --provisioningProfile=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" Signed .ipa files will be found at path/to/farmOS-client/platforms/ios/build/device/","title":"Client"},{"location":"development/client/#farmos-client","text":"Work has begun on a simplified farmOS app that works offline in both browser and native app form. It is installable on Android and iOS devices. The goal is to create a fast and focused client app for day-to-day and in-the-field record keeping that stores data locally for offline use, and syncs back to a farmOS server when internet access is available. The application consists of the main client, which provides the UI and core features, as well as native plugins, which provide specific support for native functionality, like the ability to persist data and access the camera. The source code can be found here: https://github.com/farmOS/farmOS-client This documentation is not complete. It is intended only for informational purposes at this time.","title":"farmOS Client"},{"location":"development/client/#users-guide","text":"Please see the User's Guide for more information on how to install and use the client on your devices.","title":"User's Guide"},{"location":"development/client/#architecture","text":"The client is built with Vue.js and Apache Cordova . Initially, the client and its native implementation were maintained as separate libraries. This was done with the aim of being able to isolate native functionality in Vue plugins that could be swapped out for browser-based plugins. This may not be strictly necessary in the future, but it does at least make for good separation of concerns.","title":"Architecture"},{"location":"development/client/#development-environments","text":"The first thing of course is to clone the client repo from GitHub, and install the npm dependencies: $ git clone https://github.com/farmOS/farmOS-client.git $ cd farmOS-client $ npm install Note that the default branch for this repository is develop , not master ; develop should represent the most current set of complete features that are only awaiting further testing before release. You should branch or fork off develop and submit pull requests to be merged back into it. The deploy branch respresents the latest tagged release.","title":"Development environments"},{"location":"development/client/#browser","text":"The browser-based development environment can be started by running the following command from the project root: $ npm start This will start the Webpack devServer, which will compile a development build and serve it from http://localhost:8080/ . Changes saved to the files in your local repo will be hot reloaded automatically while the devServer is running.","title":"Browser"},{"location":"development/client/#proxying-a-farmos-docker-container","text":"By default, when the Webpack devServer starts, it will set up a proxy service, which will route all AJAX requests and responses through http://localhost:80 , in order to prevent CORS errors. This is assumed to be the address of a local farmOS development server running in a Docker container. This is probably the easiest way to get a development backend up and running, so if you don't already have a sever you can use for testing, see the full instructions for setting up a farmOS Docker container . If you wish to proxy an address other than http://localhost:80 , you'll need to change the proxy settings in farmOS-native/config/index.js . Set dev.proxy.target to the address and port of your farmOS testing server. Restart the devServer and it should now be proxying your new address. It may also be necessary to add new endpoints to the dev.proxy.context array as new features are developed and new endpoints on the farmOS server need to be reached. For more information, see the Webpack documentation on configuring the proxy middleware . You will also need to configure the server to enable CORS requests. Go to http://localhost/admin/config/farm/access and enter http://localhost:8080 as the Access-Control-Allow-Origin. Finally, when logging in to the client from the browser, simply leave the URL field blank. The devServer will then interpret all requests as relative links and proxy them accordingly. For some reason login can sometimes fail on the first attempt, but should succeed on all subsequent attempts.","title":"Proxying a farmOS Docker container"},{"location":"development/client/#platform-sdks","text":"Cordova docs on running the emulator and debugger in Android Studio Cordova docs on running the emulator and debugger in XCode","title":"Platform SDK's"},{"location":"development/client/#web-build-process","text":"To build the client for the web, you just need to run the build script: $ npm run build:web The output of this script will be found in the dist directory and can be deployed using web server.","title":"Web build process"},{"location":"development/client/#native-build-process","text":"The process for building the native applications for iOS and Android can be broken down into 2 main steps: first, Webpack bundles all the HTML, CSS and JavaScript modules into their final form that will run in WebView ; secondly, Cordova, with some help from the Android and iOS SDK's (Android Studio & XCode, respectively), builds the full-blown native packages (.apk and .ipa files, respectively). To build from source, you'll need to clone the client repository from GitHub: $ git clone https://github.com/farmOS/farmOS-client.git Bundling the web assets with Webpack is fairly straight-forward. Node (v.6.0.0 or higher) and npm (v.3.0.0 or higher) are the only system requirements. Once Node is installed, you can install the necessary JavaScript dependencies with npm, which is automatically included with Node. The npm script build:native can then run Webpack to bundle the assets. All this can be done by running the following two commands from the project's root directory: $ npm install $ npm run build:native This will generate all the necessary files within the www directory, which Webpack will create if it doesn't already exist. Do not alter these files directly. They are optimized for WebView, which is basically a browser that Cordova installs and runs inside the native application itself to render all the HTML, CSS and JavaScript source files. The same files are used by both iOS and Android implementations All the web assets are now ready for building the final native packages. Both platforms will require installing Cordova globally, via npm: $ npm install -g cordova This, however, is where the process diverges into separate iOS and Android builds. This next stage will probably comprise the most system configuration, too, since it requires installing each platform's SDK (Software Development Kit), if they aren't installed already. Of course, if you only intend to build for one platform, you only need to install that platform's SDK and corresponding system requirements; building for both platforms will require installing both SDK's.","title":"Native build process"},{"location":"development/client/#android-build","text":"To configure your system to build the Android app, follow Cordova's Android Platform Guide \" and the Android Studio installation guide . This will differ depending on your development machine's operating system, but Mac, Windows and Linux are all supported. System Requirements: Java 8 Android Studio Gradle Note that Android Studio recommends the official Oracle JDK for Java 8; using OpenJDK may cause errors. Also make sure to follow Cordova's instructions for setting up your system's environment variables and installing the SDK packages for the Android versions the app will target. As of May 2018, the latest version of Android that Cordova seems to support is 7.1.1, at API Level 25. Once Android Studio is installed and configured, make sure Android has been added to Cordova's list of platforms, then you're try out the build command: $ cordova platform add android $ cordova build android By default, the build command will produce a debugging APK (equivalent to running cordova build android --debug ). If you want to build a final release version, you'll need to add the --release flag, but you'll also need to use your keys for signing the APK (see \" Signing an App \" in the Cordova docs for more details). For reference, the official farmOS Field Kit app is built using the following flags: cordova build android --release -- \\ --keystore=/path/to//your-key.keystore \\ --storePassword=xxxxxxxx \\ --alias=yyyy --password=zzzzzzzz Both the debug and release APK's can then be found at path/to/farmOS-client/platforms/android/app/build/outputs/apk after building.","title":"Android Build"},{"location":"development/client/#ios-build","text":"Only available on Apple OS X. Windows and Linux are not supported. For some workarounds, see \" Developing an iOS App on Linux \" You'll need Xcode installed in order to run the Cordova build commands. See Cordova's iOS Platform Guide for more info. Once you have the environment set up, you'll want to add the iOS platform with Cordova (we recommend version 5.1.1 or higher), then you can run a debugging build: cordova platform add ios@5.1.1 cordova build ios Using the build command without the --release flag triggers a debug build by default. To build a signed app for the App Store, you'll need to follow Cordova's app signing guidelines , but for reference, we use the following command and flags: cordova build ios --release --device \\ --codeSignIdentity=\"iPhone Distribution\" \\ --developmentTeam=\"ABCD1234\" \\ --packageType=\"app-store\" \\ --provisioningProfile=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" Signed .ipa files will be found at path/to/farmOS-client/platforms/ios/build/device/","title":"iOS Build"},{"location":"development/configure-local-https-reverse-proxy/","text":"Configuring a Local Https Reverse Proxy \u00b6 For general information about development setup first see Developing farmOS with Docker . Some development testing is easier with FarmOS behind an https endpoint. A separate NGINX reverse proxy provides a simple way to configure an https endpoint without any changes to the Apache2 configuration which FarmOS/Drual is running on. Example Configuration \u00b6 docker-compose.yml version: '2' services: db: image: mariadb:latest volumes: - './db:/var/lib/mysql' expose: - '3306' environment: MYSQL_ROOT_PASSWORD: farm MYSQL_DATABASE: farm MYSQL_USER: farm MYSQL_PASSWORD: farm www: depends_on: - db image: farmos/farmos:dev volumes: - './www:/var/www/html' expose: - '80' environment: XDEBUG_CONFIG: remote_host=172.17.0.1 proxy: depends_on: - www image: nginx:latest volumes: - './nginx.conf:/etc/nginx/nginx.conf' - './nginx/error_logs:/etc/nginx/error_logs' - './devcerts:/etc/nginx/certs' ports: - '80:80' - '443:443' nginx.conf events { } http { error_log /etc/nginx/error_logs/error_log.log warn; client_max_body_size 20m; server { listen 80; server_name farmos.local; rewrite ^/(.*)$ https://$host$request_uri? permanent; } server { server_name farmos.local; location / { proxy_pass http://www:80; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $host:443; proxy_set_header X-Forwarded-Port 443; proxy_set_header X-Forwarded-Server $host; proxy_set_header X-Forwarded-Proto https; } listen 443 ssl; ssl_certificate /etc/nginx/certs/cert.pem; ssl_certificate_key /etc/nginx/certs/key.pem; } } Generate certificates with mkcert mkdir devcerts && mkcert -key-file devcerts/key.pem -cert-file devcerts/cert.pem farmos.local *.farmos.local Start containers docker-compose up Add fake domain to /etc/hosts echo \"127.0.0.1 farmos.local\" >> /etc/hosts alias drush=\"docker-compose exec www drush\" drush site-install farm --locale=us --db-url=mysql://farm:farm@db/farm --site-name=Test0 --account-name=root --account-pass=test install_configure_form.update_status_module='array(FALSE,FALSE)' Note: It is advisable to update the command above with a better password than 'test' before running it. Enable reverse proxy settings in sites/default/settings.php (simplified from this SO answer ) sudo sh -c \"printf \\\"\\n\\n\\\\\\$conf['reverse_proxy'] = TRUE;\\n\\\\\\$conf['reverse_proxy_addresses'] = [@\\\\\\$_SERVER['REMOTE_ADDR']];\\n\\\\\\$base_url = \\\\\\$_SERVER['HTTP_X_FORWARDED_PROTO'] . '://' . \\\\\\$_SERVER['SERVER_NAME'];\\n\\\" >> www/sites/default/settings.php\" This yields a FarmOS installation which can be accessed via https://farmos.local with a user named 'root' and a password of 'test' - or the better password that you wisely substituted above.","title":"Configuring a Local Https Reverse Proxy"},{"location":"development/configure-local-https-reverse-proxy/#configuring-a-local-https-reverse-proxy","text":"For general information about development setup first see Developing farmOS with Docker . Some development testing is easier with FarmOS behind an https endpoint. A separate NGINX reverse proxy provides a simple way to configure an https endpoint without any changes to the Apache2 configuration which FarmOS/Drual is running on.","title":"Configuring a Local Https Reverse Proxy"},{"location":"development/configure-local-https-reverse-proxy/#example-configuration","text":"docker-compose.yml version: '2' services: db: image: mariadb:latest volumes: - './db:/var/lib/mysql' expose: - '3306' environment: MYSQL_ROOT_PASSWORD: farm MYSQL_DATABASE: farm MYSQL_USER: farm MYSQL_PASSWORD: farm www: depends_on: - db image: farmos/farmos:dev volumes: - './www:/var/www/html' expose: - '80' environment: XDEBUG_CONFIG: remote_host=172.17.0.1 proxy: depends_on: - www image: nginx:latest volumes: - './nginx.conf:/etc/nginx/nginx.conf' - './nginx/error_logs:/etc/nginx/error_logs' - './devcerts:/etc/nginx/certs' ports: - '80:80' - '443:443' nginx.conf events { } http { error_log /etc/nginx/error_logs/error_log.log warn; client_max_body_size 20m; server { listen 80; server_name farmos.local; rewrite ^/(.*)$ https://$host$request_uri? permanent; } server { server_name farmos.local; location / { proxy_pass http://www:80; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $host:443; proxy_set_header X-Forwarded-Port 443; proxy_set_header X-Forwarded-Server $host; proxy_set_header X-Forwarded-Proto https; } listen 443 ssl; ssl_certificate /etc/nginx/certs/cert.pem; ssl_certificate_key /etc/nginx/certs/key.pem; } } Generate certificates with mkcert mkdir devcerts && mkcert -key-file devcerts/key.pem -cert-file devcerts/cert.pem farmos.local *.farmos.local Start containers docker-compose up Add fake domain to /etc/hosts echo \"127.0.0.1 farmos.local\" >> /etc/hosts alias drush=\"docker-compose exec www drush\" drush site-install farm --locale=us --db-url=mysql://farm:farm@db/farm --site-name=Test0 --account-name=root --account-pass=test install_configure_form.update_status_module='array(FALSE,FALSE)' Note: It is advisable to update the command above with a better password than 'test' before running it. Enable reverse proxy settings in sites/default/settings.php (simplified from this SO answer ) sudo sh -c \"printf \\\"\\n\\n\\\\\\$conf['reverse_proxy'] = TRUE;\\n\\\\\\$conf['reverse_proxy_addresses'] = [@\\\\\\$_SERVER['REMOTE_ADDR']];\\n\\\\\\$base_url = \\\\\\$_SERVER['HTTP_X_FORWARDED_PROTO'] . '://' . \\\\\\$_SERVER['SERVER_NAME'];\\n\\\" >> www/sites/default/settings.php\" This yields a FarmOS installation which can be accessed via https://farmos.local with a user named 'root' and a password of 'test' - or the better password that you wisely substituted above.","title":"Example Configuration"},{"location":"development/docker/","text":"Developing farmOS with Docker \u00b6 For general information, see Hosting farmOS with Docker . Install Docker and Docker Compose \u00b6 The recommended approach for local farmOS development in Docker is to use Docker Compose to run both the farmOS container and the database container on your local host. Install Docker On Mac OS X, use \"Docker for Mac\" (not \"Docker Toolbox\") On Windows, use \"Docker for Windows\" (not \"Docker Toolbox\") On Linux, follow the directions on docker.com Install Docker Compose Create containers \u00b6 To create the farmOS Docker containers, start by creating a new farmOS directory on your host: mkdir farmOS cd farmOS Next, copy the docker-compose.development.yml file into the directory and rename it to docker-compose.yml : wget https://raw.githubusercontent.com/farmOS/farmOS/7.x-1.x/docker/docker-compose.development.yml mv docker-compose.development.yml docker-compose.yml Then, use docker-compose up to create the containers: sudo docker-compose up This will create two containers: a farmOS application container, and a MariaDB database container. This will run the two containers in your open terminal window, and will print Apage and MariaDB logs to the screen. This is useful for debugging, and you can shut them down with Ctrl+C when you're done. If you want to run these containers in the background, so you don't need to keep your terminal window, add -d to the end of the command: sudo docker-compose up -d Then you can shut them down and remove the containers with: sudo docker-compose down Mac Specific Instructions \u00b6 Due to performance issues with shared volumes in Docker for Mac, it is recommended that you add :delegated to your volume definitions in docker-compose.yml . For example, instead of: volumes: - './db:/var/lib/mysql' Replace with: volumes: - './db:/var/lib/mysql:delegated' Do this for both the db and www container volumes. Install farmOS \u00b6 Once the containers are up and running, you can install farmOS using the Drupal installer. This is a simple step-by-step process that you will need to go through when you first access the site in your browser. Browser address \u00b6 If you are running Docker on Linux, you can simply go to http://localhost in your browser. Otherwise, you may need to look up the IP address of the Docker container that was created and access it that way. To find the IP address of your farmOS container, use the following command: sudo docker inspect --format '{{ .NetworkSettings.Networks.farmos_default.IPAddress }}' farmos_www_1 Visit the IP address in a browser - you should see the Drupal/farmOS installer. Database setup \u00b6 In the \"Set up database\" step of installation, use the following values: Database name: farm Database username: farm Database password: farm Under \"Advanced options\", change \"Database host\" to: db Follow the instructions to continue with the installation and you should be left with a fully-functioning farmOS instance running in a Docker container! Development workflow \u00b6 Persistent volumes \u00b6 The docker-compose.development.yml file defines two Docker volumes that will be mounted into the containers from your host directory: ./www - /var/html/www from the farmOS application container, which includes the entire farmOS codebase, settings.php file (for connecting to the database), and any files that are uploaded/created in farmOS. ./db - /var/lib/mysql from the MariaDB database container, which contains the farmOS database. Both will be made available within the farmOS directory you created initially. This is where you will be able to access the code for development purposes. It is also how your database and files are persisted when the containers are destroyed and rebuilt. File ownership \u00b6 On a Linux host, all the files in www will have an owner and group of www-data . As of farmOS 7.x-1.7 the www-data user and group id of the dev docker image are set to 1000 by default. On most single-user systems this matches the user and group ID of the primary user and everything should just work - the docker container and your user will both have normal read/write access to the files. If you encounter permissions issues, you can check your user/group ids with the following commands; id -u id -g If those don't return a value of 1000 , there are two main strategies. One-off ownership modification \u00b6 You can change the owner of everything in the www container to your local user. This can be done with the following command: sudo chown -R ${USER} www This changes the owner of everything in /var/www/html to the currently logged in user on the host. But it leaves the group alone ( www-data ). Just make sure to do this after installation has completed. Building a custom dev docker image \u00b6 The dev image also accepts the WWW_DATA_ID build parameter which the build process will use as the ID of the www-data user and group inside the image. Setting this to the ID of the developer's user on the host machine allows files created and/or owned by www-data inside the container be editable by the developer outside of the container. If your user ID is not 1000 (as determined above), build the image with: --build-arg WWW_DATA_ID=$(id -u) . Updating farmOS \u00b6 Important : these instructions are for updating a development environment hosted with Docker. If you are running a production environment, see Hosting farmOS with Docker . There are two ways to update your development codebase: incremental vs complete. Incremental update \u00b6 An incremental update can be done if the changes are relatively simple. This includes commits to the farmOS repository that do not include any of the following: Updates to Drupal core Updates to contrib modules New contrib modules New patches to Drupal core or contrib modules These things are handled by Drush Make, which is run during a complete update (see below). If you are familiar with Drupal and Drush Make, it is possible to make these updates incrementally as well, but if you are not then follow the \"Complete update\" instructions below. To perform an incremental update, run git pull origin 7.x-1.x in the farmOS installation profile repository, which is inside www/profiles/farm : cd www/profiles/farm git pull origin 7.x-1.x Complete update \u00b6 Warning : if you have made any changes to the code inside www , they will be overwritten by this process. The one exception is the www/sites directory, which will not be modified. It's a good idea to put extra modules that you have downloaded/developed yourself into www/sites/all/modules for this reason. First, stop the containers and create a backup snapshot so that you can easily restore if anything goes wrong. See \"Backup/restore during development\" below. Pull the latest version of the farmOS Docker dev image: sudo docker pull farmos/farmos:dev Stop the farmOS containers: sudo docker-compose down Move the sites directory out of the webroot: sudo mv www/sites ./ Delete everthing in www : sudo rm -r www/{*,.*} Restart the farmOS containers: sudo docker-compose up -d The www container should be automatically populated again with the new codebase. Restore the sites directory: sudo rm -rf www/sites sudo mv sites www Run database updates by going to /update.php in your browser and following the instructions. You may also need to revert any overridden features in /admin/structure/features (if they are not automatically). Warning : If you have made any modifications to farmOS configuration, reverting features may overwrite those changes. If anything goes wrong during this process, you can restore to the backup you created. See \"Backup/restore during development\" below. Backup/restore during development \u00b6 During development, you can create quick snapshots of the database and/or codebase from these volume directories. Simply shut down the running containers and create tarball(s). Backup : sudo docker-compose down sudo tar -czf backup.tar.gz db www sudo docker-compose up -d Restore sudo docker-compose down sudo rm -rf db sudo rm -rf www sudo tar -xzf backup.tar.gz sudo docker-compose up -d Development Tools \u00b6 Drush \u00b6 Drush is a command line shell and Unix scripting interface for Drupal. Drush core ships with lots of useful commands for interacting with code like modules/themes/profiles. Similarly, it runs update.php, executes sql queries and DB migrations, and misc utilities like run cron or clear cache. If you setup farmOS with the Docker farmOS dev image then Drush is already included! To use it simply run the following when the docker images are running: sudo docker exec -it farmos_www_1 drush help Note: The farmOS container will be named farmos_www_1 ONLY if your farmOS directory is named farmOS . Docker Compose names the containers based on the folder that they are in. If you name your folder myfarmOS then the container will be named myfarmos_www_1 . If all goes well, you should see a list of Drush commands. Note that you can also alias this command to your .bashrc file. Add the following line to your ~/.bashrc file: alias drush='sudo docker exec -it farmos_www_1 drush' Run the following to start a bash session with the new alias and test the drush command: drush help This should display the same list of drush commands. (Optional) Configure a Local Https Reverse Proxy \u00b6 See Configuring a Local Https Reverse Proxy .","title":"Docker"},{"location":"development/docker/#developing-farmos-with-docker","text":"For general information, see Hosting farmOS with Docker .","title":"Developing farmOS with Docker"},{"location":"development/docker/#install-docker-and-docker-compose","text":"The recommended approach for local farmOS development in Docker is to use Docker Compose to run both the farmOS container and the database container on your local host. Install Docker On Mac OS X, use \"Docker for Mac\" (not \"Docker Toolbox\") On Windows, use \"Docker for Windows\" (not \"Docker Toolbox\") On Linux, follow the directions on docker.com Install Docker Compose","title":"Install Docker and Docker Compose"},{"location":"development/docker/#create-containers","text":"To create the farmOS Docker containers, start by creating a new farmOS directory on your host: mkdir farmOS cd farmOS Next, copy the docker-compose.development.yml file into the directory and rename it to docker-compose.yml : wget https://raw.githubusercontent.com/farmOS/farmOS/7.x-1.x/docker/docker-compose.development.yml mv docker-compose.development.yml docker-compose.yml Then, use docker-compose up to create the containers: sudo docker-compose up This will create two containers: a farmOS application container, and a MariaDB database container. This will run the two containers in your open terminal window, and will print Apage and MariaDB logs to the screen. This is useful for debugging, and you can shut them down with Ctrl+C when you're done. If you want to run these containers in the background, so you don't need to keep your terminal window, add -d to the end of the command: sudo docker-compose up -d Then you can shut them down and remove the containers with: sudo docker-compose down","title":"Create containers"},{"location":"development/docker/#mac-specific-instructions","text":"Due to performance issues with shared volumes in Docker for Mac, it is recommended that you add :delegated to your volume definitions in docker-compose.yml . For example, instead of: volumes: - './db:/var/lib/mysql' Replace with: volumes: - './db:/var/lib/mysql:delegated' Do this for both the db and www container volumes.","title":"Mac Specific Instructions"},{"location":"development/docker/#install-farmos","text":"Once the containers are up and running, you can install farmOS using the Drupal installer. This is a simple step-by-step process that you will need to go through when you first access the site in your browser.","title":"Install farmOS"},{"location":"development/docker/#browser-address","text":"If you are running Docker on Linux, you can simply go to http://localhost in your browser. Otherwise, you may need to look up the IP address of the Docker container that was created and access it that way. To find the IP address of your farmOS container, use the following command: sudo docker inspect --format '{{ .NetworkSettings.Networks.farmos_default.IPAddress }}' farmos_www_1 Visit the IP address in a browser - you should see the Drupal/farmOS installer.","title":"Browser address"},{"location":"development/docker/#database-setup","text":"In the \"Set up database\" step of installation, use the following values: Database name: farm Database username: farm Database password: farm Under \"Advanced options\", change \"Database host\" to: db Follow the instructions to continue with the installation and you should be left with a fully-functioning farmOS instance running in a Docker container!","title":"Database setup"},{"location":"development/docker/#development-workflow","text":"","title":"Development workflow"},{"location":"development/docker/#persistent-volumes","text":"The docker-compose.development.yml file defines two Docker volumes that will be mounted into the containers from your host directory: ./www - /var/html/www from the farmOS application container, which includes the entire farmOS codebase, settings.php file (for connecting to the database), and any files that are uploaded/created in farmOS. ./db - /var/lib/mysql from the MariaDB database container, which contains the farmOS database. Both will be made available within the farmOS directory you created initially. This is where you will be able to access the code for development purposes. It is also how your database and files are persisted when the containers are destroyed and rebuilt.","title":"Persistent volumes"},{"location":"development/docker/#file-ownership","text":"On a Linux host, all the files in www will have an owner and group of www-data . As of farmOS 7.x-1.7 the www-data user and group id of the dev docker image are set to 1000 by default. On most single-user systems this matches the user and group ID of the primary user and everything should just work - the docker container and your user will both have normal read/write access to the files. If you encounter permissions issues, you can check your user/group ids with the following commands; id -u id -g If those don't return a value of 1000 , there are two main strategies.","title":"File ownership"},{"location":"development/docker/#one-off-ownership-modification","text":"You can change the owner of everything in the www container to your local user. This can be done with the following command: sudo chown -R ${USER} www This changes the owner of everything in /var/www/html to the currently logged in user on the host. But it leaves the group alone ( www-data ). Just make sure to do this after installation has completed.","title":"One-off ownership modification"},{"location":"development/docker/#building-a-custom-dev-docker-image","text":"The dev image also accepts the WWW_DATA_ID build parameter which the build process will use as the ID of the www-data user and group inside the image. Setting this to the ID of the developer's user on the host machine allows files created and/or owned by www-data inside the container be editable by the developer outside of the container. If your user ID is not 1000 (as determined above), build the image with: --build-arg WWW_DATA_ID=$(id -u) .","title":"Building a custom dev docker image"},{"location":"development/docker/#updating-farmos","text":"Important : these instructions are for updating a development environment hosted with Docker. If you are running a production environment, see Hosting farmOS with Docker . There are two ways to update your development codebase: incremental vs complete.","title":"Updating farmOS"},{"location":"development/docker/#incremental-update","text":"An incremental update can be done if the changes are relatively simple. This includes commits to the farmOS repository that do not include any of the following: Updates to Drupal core Updates to contrib modules New contrib modules New patches to Drupal core or contrib modules These things are handled by Drush Make, which is run during a complete update (see below). If you are familiar with Drupal and Drush Make, it is possible to make these updates incrementally as well, but if you are not then follow the \"Complete update\" instructions below. To perform an incremental update, run git pull origin 7.x-1.x in the farmOS installation profile repository, which is inside www/profiles/farm : cd www/profiles/farm git pull origin 7.x-1.x","title":"Incremental update"},{"location":"development/docker/#complete-update","text":"Warning : if you have made any changes to the code inside www , they will be overwritten by this process. The one exception is the www/sites directory, which will not be modified. It's a good idea to put extra modules that you have downloaded/developed yourself into www/sites/all/modules for this reason. First, stop the containers and create a backup snapshot so that you can easily restore if anything goes wrong. See \"Backup/restore during development\" below. Pull the latest version of the farmOS Docker dev image: sudo docker pull farmos/farmos:dev Stop the farmOS containers: sudo docker-compose down Move the sites directory out of the webroot: sudo mv www/sites ./ Delete everthing in www : sudo rm -r www/{*,.*} Restart the farmOS containers: sudo docker-compose up -d The www container should be automatically populated again with the new codebase. Restore the sites directory: sudo rm -rf www/sites sudo mv sites www Run database updates by going to /update.php in your browser and following the instructions. You may also need to revert any overridden features in /admin/structure/features (if they are not automatically). Warning : If you have made any modifications to farmOS configuration, reverting features may overwrite those changes. If anything goes wrong during this process, you can restore to the backup you created. See \"Backup/restore during development\" below.","title":"Complete update"},{"location":"development/docker/#backuprestore-during-development","text":"During development, you can create quick snapshots of the database and/or codebase from these volume directories. Simply shut down the running containers and create tarball(s). Backup : sudo docker-compose down sudo tar -czf backup.tar.gz db www sudo docker-compose up -d Restore sudo docker-compose down sudo rm -rf db sudo rm -rf www sudo tar -xzf backup.tar.gz sudo docker-compose up -d","title":"Backup/restore during development"},{"location":"development/docker/#development-tools","text":"","title":"Development Tools"},{"location":"development/docker/#drush","text":"Drush is a command line shell and Unix scripting interface for Drupal. Drush core ships with lots of useful commands for interacting with code like modules/themes/profiles. Similarly, it runs update.php, executes sql queries and DB migrations, and misc utilities like run cron or clear cache. If you setup farmOS with the Docker farmOS dev image then Drush is already included! To use it simply run the following when the docker images are running: sudo docker exec -it farmos_www_1 drush help Note: The farmOS container will be named farmos_www_1 ONLY if your farmOS directory is named farmOS . Docker Compose names the containers based on the folder that they are in. If you name your folder myfarmOS then the container will be named myfarmos_www_1 . If all goes well, you should see a list of Drush commands. Note that you can also alias this command to your .bashrc file. Add the following line to your ~/.bashrc file: alias drush='sudo docker exec -it farmos_www_1 drush' Run the following to start a bash session with the new alias and test the drush command: drush help This should display the same list of drush commands.","title":"Drush"},{"location":"development/docker/#optional-configure-a-local-https-reverse-proxy","text":"See Configuring a Local Https Reverse Proxy .","title":"(Optional) Configure a Local Https Reverse Proxy"},{"location":"development/drupal/","text":"Drupal \u00b6 farmOS is built on top of Drupal , a free and open-source web application framework. Basic concepts \u00b6 If you are new to Drupal, it is recommended that you first familiarize yourself with some of the basic concepts. Drupal concepts Best practices \u00b6 In general, farmOS development follows the same best practices and coding standards set forth by the Drupal community. Drupal best practices Drupal coding standards","title":"Drupal"},{"location":"development/drupal/#drupal","text":"farmOS is built on top of Drupal , a free and open-source web application framework.","title":"Drupal"},{"location":"development/drupal/#basic-concepts","text":"If you are new to Drupal, it is recommended that you first familiarize yourself with some of the basic concepts. Drupal concepts","title":"Basic concepts"},{"location":"development/drupal/#best-practices","text":"In general, farmOS development follows the same best practices and coding standards set forth by the Drupal community. Drupal best practices Drupal coding standards","title":"Best practices"},{"location":"development/issue-queues/","text":"Issue queues \u00b6 See CONTRIBUTING.md .","title":"Issue queues"},{"location":"development/issue-queues/#issue-queues","text":"See CONTRIBUTING.md .","title":"Issue queues"},{"location":"development/projects/","text":"Projects \u00b6 farmOS is built as a set of separate but inter-dependent Drupal projects. Drupal is a modular system, and farmOS follows in those footsteps by providing all of it's features as singularly-focused modules on top of Drupal core. All of these various modules, their dependencies, third-party libraries, and the official farmOS Drupal theme are packaged together into a farm-focused Drupal distribution that is collectively referred to as \"farmOS\". Distributions of Drupal are roughly analogous to distributions of Linux. They serve to collect various code and configuration together in an intentional way. More information can be found in the Drupal distribution documentation . To learn more about Drupal in general, refer to the Drupal documentation . Distribution \u00b6 farmOS Distribution The purpose of the farmOS distribution is to collect all the modules in one package, along with some default configuration, theming, etc. Drupal.org has an automated packaging system, so if you are getting started with farmOS, downloading and installing a packaged release is the recommended approach. See installing farmOS for more information. The farmOS repository itself does not include a fully-built codebase. So if you clone it from drupal.org or Github, you will either need to build it yourself with Drush or use Docker . Modules \u00b6 Included in farmOS \u00b6 These modules are included directly in the farmOS distribution repository: Farm Access - Provides mechanisms for managing farmOS user access permissions. Farm Access Roles - Provides default roles: Manager, Worker, Viewer. Farm API - Extends the RESTful Web Services module to provide farmOS-specific APIs. Farm Area - Features for managing farm areas. Farm Area Generator - A tool for automatically generating areas. Requires GEOS library. Farm Area Import - A tool for importing multiple area geometries from a single KML file. Farm Area Types - Provides some default area types. Farm Asset - A farm asset entity type. Farm Asset Children - Provides child asset relationships. Farm Asset Property - Provides the ability to assign arbitrary (key-value pairs) properties to assets. Farm Asset Views - Default Views of farm assets. Farm Calendar - Provides a calendar view of farmOS logs. Farm Client - Integrates the farmOS server and client. Farm Constraint - Provides a framework for managing foreign key constraints between farmOS entities. Farm Crop - Features for managing farm crops. Farm Crop Area Types - Provides default area types for crop management: Bed, Greenhouse. Farm Dashboard - Provides a farmOS dashboard at /farm. Farm Data Field - Adds an arbitrary data field to logs and assets. Farm Equipment - Features for managing farm equipment. Farm Equipment Field - Adds an \"Equipment used\" field to logs. Farm Fields - Provides common base field definitions for farmOS entity types. Farm Fields Autocomplete - Adds autocomplete to text fields. Farm Fields Dynamic - Provides the ability for modules to define fields dynamically. Farm Flags - Provides a general purpose record flagging system. Farm Group - Features for managing group assets like herds, flocks, etc. Farm Help - Help pages for farmOS. Farm Import - Provides a framework for creating CSV importers in farmOS. Farm Inventory - Provides inventory management functionality for farm assets. Farm Ledger - Provides sale and purchase log types. Farm Livestock - Features for managing farm livestock. Farm Livestock Area Types - Provides default area types for livestock management: Paddock. Farm Livestock Weight - Features for tracking weight of animals with observation logs. Farm Log - Provides integration with the Log module. Farm Log: Activity - Provides an activity log type. Farm Log: Harvest - Provides a harvest log type. Farm Log: Input - Provides an input log type. Farm Log: Observation - Provides an observation log type Farm Map - Provides OpenLayers configuration for farm maps. Farm Map KML - Provides KML features for farm maps. Farm MapKnitter - Provides integration with Public Lab's MapKnitter.org. Farm Menu - Provides a menu for farm pages. Farm Metrics - Allow modules to define high level metrics. Farm Movement - Provides movement field and related asset location code. Farm People - A view of people associated with the farm. Farm Plan - A farm plan entity type. Farm Plan Consideration - Provides features for managing considerations within a farm plan. Farm Plan Map - Adds a map of areas and assets in a plan. Farm Quantity - Provides a framework for dealing with quantities. Farm Quantity Log - Provides helper functions for querying logs with quantity data. Farm Quantity Report - Generate reports of quantity measurements. Farm Quick - Provides a framework for quick forms in farmOS. Farm Report - Features for viewing reports. Farm Season - Provides a taxonomy and fields for organizing assets and logs by season. Farm Sensor - Features for managing farm sensors. Farm Sensor: Listener - ... Farm Soil - Provides features for soil health management. Farm Soil NRCS - Provides integration with NRCS Soil Survey data. Farm Soil Test - .Features for managing soil tests. Farm Soil: Compost - Features for managing compost. Farm Term - Provides helper functions for working with taxonomy terms. Farm UI - Provides standardized user interface support to farmOS modules. Farm Water - Provides features for water management. Farm Water Test - Features for managing water tests. Other modules \u00b6 These modules aren't included with the farmOS distribution, but they can be added to extend your farmOS functionality: Farm Bee - Features for beekeeping. Farm Biodynamic - Provides a flag for marking records as \"Biodynamic\" in farmOS. Farm Eggs - Provides a simple UI for creating egg harvest logs. Farm Forest - Forest management module for farmOS. Farm Grazing - Provides a simple UI for creating egg harvest logs. Farm Maple - Features for management of maple tapping and production. Farm Map: Emilia-Romagna - Emilia-Romagna map layers for farmOS maps. Farm Map: PDOK - Dutch PDOK map layers for farmOS maps. Farm Map: Finland - Finnish map layers for farmOS maps. Farm Map: Norway - Norwegian map layers for farmOS maps. Farm Map: SJC - San Juan County, WA, USA map layers for farmOS maps. Farm Mushroom - Features for managing mushroom production. FarmOS NWS - Imports data from the National Weather Service into Drupal for use by farmOS. Farm Nutrient - Nutrient management planning module for farmOS. Farm Organic - Provides flags for marking records as \"Organic\" and \"Not Organic\" in farmOS. Farm Produce Safety - A produce safety record keeping module for farmOS. Farm Sensor: Atmospi - Integrates farmOS and Atmospi sensors. FarmOS WFS - Exposes FarmOS areas as a Web Feature Service (WFS) enabling bi-directional access through full-fledged GIS tools like Quantum GIS . For more information and documentation about these modules, see farmOS community modules . Theme \u00b6 The official farmOS theme (\"Farm Theme\") that is included with farmOS is a Drupal theme based off of Bootstrap .","title":"Projects"},{"location":"development/projects/#projects","text":"farmOS is built as a set of separate but inter-dependent Drupal projects. Drupal is a modular system, and farmOS follows in those footsteps by providing all of it's features as singularly-focused modules on top of Drupal core. All of these various modules, their dependencies, third-party libraries, and the official farmOS Drupal theme are packaged together into a farm-focused Drupal distribution that is collectively referred to as \"farmOS\". Distributions of Drupal are roughly analogous to distributions of Linux. They serve to collect various code and configuration together in an intentional way. More information can be found in the Drupal distribution documentation . To learn more about Drupal in general, refer to the Drupal documentation .","title":"Projects"},{"location":"development/projects/#distribution","text":"farmOS Distribution The purpose of the farmOS distribution is to collect all the modules in one package, along with some default configuration, theming, etc. Drupal.org has an automated packaging system, so if you are getting started with farmOS, downloading and installing a packaged release is the recommended approach. See installing farmOS for more information. The farmOS repository itself does not include a fully-built codebase. So if you clone it from drupal.org or Github, you will either need to build it yourself with Drush or use Docker .","title":"Distribution"},{"location":"development/projects/#modules","text":"","title":"Modules"},{"location":"development/projects/#included-in-farmos","text":"These modules are included directly in the farmOS distribution repository: Farm Access - Provides mechanisms for managing farmOS user access permissions. Farm Access Roles - Provides default roles: Manager, Worker, Viewer. Farm API - Extends the RESTful Web Services module to provide farmOS-specific APIs. Farm Area - Features for managing farm areas. Farm Area Generator - A tool for automatically generating areas. Requires GEOS library. Farm Area Import - A tool for importing multiple area geometries from a single KML file. Farm Area Types - Provides some default area types. Farm Asset - A farm asset entity type. Farm Asset Children - Provides child asset relationships. Farm Asset Property - Provides the ability to assign arbitrary (key-value pairs) properties to assets. Farm Asset Views - Default Views of farm assets. Farm Calendar - Provides a calendar view of farmOS logs. Farm Client - Integrates the farmOS server and client. Farm Constraint - Provides a framework for managing foreign key constraints between farmOS entities. Farm Crop - Features for managing farm crops. Farm Crop Area Types - Provides default area types for crop management: Bed, Greenhouse. Farm Dashboard - Provides a farmOS dashboard at /farm. Farm Data Field - Adds an arbitrary data field to logs and assets. Farm Equipment - Features for managing farm equipment. Farm Equipment Field - Adds an \"Equipment used\" field to logs. Farm Fields - Provides common base field definitions for farmOS entity types. Farm Fields Autocomplete - Adds autocomplete to text fields. Farm Fields Dynamic - Provides the ability for modules to define fields dynamically. Farm Flags - Provides a general purpose record flagging system. Farm Group - Features for managing group assets like herds, flocks, etc. Farm Help - Help pages for farmOS. Farm Import - Provides a framework for creating CSV importers in farmOS. Farm Inventory - Provides inventory management functionality for farm assets. Farm Ledger - Provides sale and purchase log types. Farm Livestock - Features for managing farm livestock. Farm Livestock Area Types - Provides default area types for livestock management: Paddock. Farm Livestock Weight - Features for tracking weight of animals with observation logs. Farm Log - Provides integration with the Log module. Farm Log: Activity - Provides an activity log type. Farm Log: Harvest - Provides a harvest log type. Farm Log: Input - Provides an input log type. Farm Log: Observation - Provides an observation log type Farm Map - Provides OpenLayers configuration for farm maps. Farm Map KML - Provides KML features for farm maps. Farm MapKnitter - Provides integration with Public Lab's MapKnitter.org. Farm Menu - Provides a menu for farm pages. Farm Metrics - Allow modules to define high level metrics. Farm Movement - Provides movement field and related asset location code. Farm People - A view of people associated with the farm. Farm Plan - A farm plan entity type. Farm Plan Consideration - Provides features for managing considerations within a farm plan. Farm Plan Map - Adds a map of areas and assets in a plan. Farm Quantity - Provides a framework for dealing with quantities. Farm Quantity Log - Provides helper functions for querying logs with quantity data. Farm Quantity Report - Generate reports of quantity measurements. Farm Quick - Provides a framework for quick forms in farmOS. Farm Report - Features for viewing reports. Farm Season - Provides a taxonomy and fields for organizing assets and logs by season. Farm Sensor - Features for managing farm sensors. Farm Sensor: Listener - ... Farm Soil - Provides features for soil health management. Farm Soil NRCS - Provides integration with NRCS Soil Survey data. Farm Soil Test - .Features for managing soil tests. Farm Soil: Compost - Features for managing compost. Farm Term - Provides helper functions for working with taxonomy terms. Farm UI - Provides standardized user interface support to farmOS modules. Farm Water - Provides features for water management. Farm Water Test - Features for managing water tests.","title":"Included in farmOS"},{"location":"development/projects/#other-modules","text":"These modules aren't included with the farmOS distribution, but they can be added to extend your farmOS functionality: Farm Bee - Features for beekeeping. Farm Biodynamic - Provides a flag for marking records as \"Biodynamic\" in farmOS. Farm Eggs - Provides a simple UI for creating egg harvest logs. Farm Forest - Forest management module for farmOS. Farm Grazing - Provides a simple UI for creating egg harvest logs. Farm Maple - Features for management of maple tapping and production. Farm Map: Emilia-Romagna - Emilia-Romagna map layers for farmOS maps. Farm Map: PDOK - Dutch PDOK map layers for farmOS maps. Farm Map: Finland - Finnish map layers for farmOS maps. Farm Map: Norway - Norwegian map layers for farmOS maps. Farm Map: SJC - San Juan County, WA, USA map layers for farmOS maps. Farm Mushroom - Features for managing mushroom production. FarmOS NWS - Imports data from the National Weather Service into Drupal for use by farmOS. Farm Nutrient - Nutrient management planning module for farmOS. Farm Organic - Provides flags for marking records as \"Organic\" and \"Not Organic\" in farmOS. Farm Produce Safety - A produce safety record keeping module for farmOS. Farm Sensor: Atmospi - Integrates farmOS and Atmospi sensors. FarmOS WFS - Exposes FarmOS areas as a Web Feature Service (WFS) enabling bi-directional access through full-fledged GIS tools like Quantum GIS . For more information and documentation about these modules, see farmOS community modules .","title":"Other modules"},{"location":"development/projects/#theme","text":"The official farmOS theme (\"Farm Theme\") that is included with farmOS is a Drupal theme based off of Bootstrap .","title":"Theme"},{"location":"development/release/","text":"New Release Procedure \u00b6 The following documents the standard procedure for packaging a new release of farmOS. It is used by the maintainers to ensure that all the necessary steps are taken. Preparation \u00b6 Make sure Drupal core version is up-to-date (eg: farmOS/farmOS@d682318 ). Evaluate whether or not any core patches are still necessary, and remove them if not (eg: farmOS/farmOS@028dc18 ). Make sure all contrib modules are up-to-date (e.g. farmOS/farmOS@d831fef ) If any updated contrib modules are patched in farmOS, evaluate whether or not the patch is still necessary (e.g. farmOS/farmOS@7d2e30a ) Ensure that the 7.x-1.x Build Test GitHub Action is building successfully. Ensure that the 7.x-1.x Docker Hub image is building successfully. Test all update hooks Test fresh Drush make build and installation Release procedure \u00b6 Create a \"Prepare for release of farmOS [version tag].\" commit that updates the farmOS version references: Update the commented projects[farm][version] line in build-farm.make . Update the commented FARMOS_VERSION line in docker/Dockerfile . Update image in docker/docker-compose.production.yml . Create a release commit \"farmOS [version tag].\" (with period) that does the following: In build-farm.make : Un-comment projects[farm][version] . Comment projects[farm][download][*] (3 lines). In docker/Dockerfile : Un-comment FARMOS_VERSION for the new tag. Comment FARMOS_VERSION for the development release. Tag the release commit in Git. Create a git revert HEAD commit that reverts the release commit (swaps the commented lines back so that development version are used). Push the tag and revert commits to drupal.org and GitHub. Create a release node in drupal.org (e.g. 7.x-1.1 ) with release notes that include: farmOS updates - Brief descriptions in HTML list form (copying commit messages is a good way to do this, but very minor changes can be excluded). Drupal core updates - Link(s) to core release notes. Contrib updates - Link(s) to project release notes. Patches - List any new patches that were applied to core or contrib. Docker updates - Any updates that are relevant to hosting farmOS in Docker. Bug fixes - Brief descriptions of bugs that were fixed. Close the roadmap for this release and open a new one. Move any outstanding issues to the new one. Update Drupal.org farmOS project page to point to the new recommended release. Edit Github release tag (eg: 7.x-1.1 tag ): Add a link to the drupal.org release node (eg: \"For full release notes, see: https://www.drupal.org/project/farm/releases/7.x-1.1\"). Upload the packaged tar.gz file generated by drupal.org. Update Docker Hub's latest image to point to the new release tag. Announce \u00b6 farmOS Forum (eg: https://farmos.discourse.group/t/farmos-1-2-has-been-released/50 ) Twitter @farmOSorg (eg: https://twitter.com/farmOSorg/status/1118981883101052929 ) OpenCollective farmOS (eg: https://opencollective.com/farmos/updates/farmos-1-1-has-been-released )","title":"Release procedure"},{"location":"development/release/#new-release-procedure","text":"The following documents the standard procedure for packaging a new release of farmOS. It is used by the maintainers to ensure that all the necessary steps are taken.","title":"New Release Procedure"},{"location":"development/release/#preparation","text":"Make sure Drupal core version is up-to-date (eg: farmOS/farmOS@d682318 ). Evaluate whether or not any core patches are still necessary, and remove them if not (eg: farmOS/farmOS@028dc18 ). Make sure all contrib modules are up-to-date (e.g. farmOS/farmOS@d831fef ) If any updated contrib modules are patched in farmOS, evaluate whether or not the patch is still necessary (e.g. farmOS/farmOS@7d2e30a ) Ensure that the 7.x-1.x Build Test GitHub Action is building successfully. Ensure that the 7.x-1.x Docker Hub image is building successfully. Test all update hooks Test fresh Drush make build and installation","title":"Preparation"},{"location":"development/release/#release-procedure","text":"Create a \"Prepare for release of farmOS [version tag].\" commit that updates the farmOS version references: Update the commented projects[farm][version] line in build-farm.make . Update the commented FARMOS_VERSION line in docker/Dockerfile . Update image in docker/docker-compose.production.yml . Create a release commit \"farmOS [version tag].\" (with period) that does the following: In build-farm.make : Un-comment projects[farm][version] . Comment projects[farm][download][*] (3 lines). In docker/Dockerfile : Un-comment FARMOS_VERSION for the new tag. Comment FARMOS_VERSION for the development release. Tag the release commit in Git. Create a git revert HEAD commit that reverts the release commit (swaps the commented lines back so that development version are used). Push the tag and revert commits to drupal.org and GitHub. Create a release node in drupal.org (e.g. 7.x-1.1 ) with release notes that include: farmOS updates - Brief descriptions in HTML list form (copying commit messages is a good way to do this, but very minor changes can be excluded). Drupal core updates - Link(s) to core release notes. Contrib updates - Link(s) to project release notes. Patches - List any new patches that were applied to core or contrib. Docker updates - Any updates that are relevant to hosting farmOS in Docker. Bug fixes - Brief descriptions of bugs that were fixed. Close the roadmap for this release and open a new one. Move any outstanding issues to the new one. Update Drupal.org farmOS project page to point to the new recommended release. Edit Github release tag (eg: 7.x-1.1 tag ): Add a link to the drupal.org release node (eg: \"For full release notes, see: https://www.drupal.org/project/farm/releases/7.x-1.1\"). Upload the packaged tar.gz file generated by drupal.org. Update Docker Hub's latest image to point to the new release tag.","title":"Release procedure"},{"location":"development/release/#announce","text":"farmOS Forum (eg: https://farmos.discourse.group/t/farmos-1-2-has-been-released/50 ) Twitter @farmOSorg (eg: https://twitter.com/farmOSorg/status/1118981883101052929 ) OpenCollective farmOS (eg: https://opencollective.com/farmos/updates/farmos-1-1-has-been-released )","title":"Announce"},{"location":"development/update-safety/","text":"Developing with updates in mind \u00b6 farmOS is built on Drupal , which means that it is extremely flexible. If you are installing your own instance of farmOS, you have full control over the entities, fields, Views, etc. So you can change things that farmOS sets up by default. This is great! And it's part of the reason why farmOS can grow and evolve so quickly. But, with great power comes great responsibility. The danger of this comes when it's time to update your farmOS instance to a new version. If you've made modifications to core fields or entity types, they may no longer be compatible with the \"main line\" of farmOS development. Think about it like this: when you make a change to the configuration of your system, you are essentially creating a new \"branch\" of farmOS. It's no longer default farmOS, in other words. It's your own unique configuration. When a new official version of farmOS is released, your modifications may conflict with those in the new release. Depending on what these changes are, it can be pretty easy to merge them together... or it can be a nightmare. So, as a general recommendation: if you are modifying the inner workings of farmOS, you should either be very familiar with what you're doing and how it will affect updates, or you shouldn't do it with your live data. Set up a second testing site, make some modifications, and then open up a new issue in the farmOS issue queues and suggest your changes for inclusion in the project!","title":"Update Safety"},{"location":"development/update-safety/#developing-with-updates-in-mind","text":"farmOS is built on Drupal , which means that it is extremely flexible. If you are installing your own instance of farmOS, you have full control over the entities, fields, Views, etc. So you can change things that farmOS sets up by default. This is great! And it's part of the reason why farmOS can grow and evolve so quickly. But, with great power comes great responsibility. The danger of this comes when it's time to update your farmOS instance to a new version. If you've made modifications to core fields or entity types, they may no longer be compatible with the \"main line\" of farmOS development. Think about it like this: when you make a change to the configuration of your system, you are essentially creating a new \"branch\" of farmOS. It's no longer default farmOS, in other words. It's your own unique configuration. When a new official version of farmOS is released, your modifications may conflict with those in the new release. Depending on what these changes are, it can be pretty easy to merge them together... or it can be a nightmare. So, as a general recommendation: if you are modifying the inner workings of farmOS, you should either be very familiar with what you're doing and how it will affect updates, or you shouldn't do it with your live data. Set up a second testing site, make some modifications, and then open up a new issue in the farmOS issue queues and suggest your changes for inclusion in the project!","title":"Developing with updates in mind"},{"location":"guide/","text":"farmOS User Guide \u00b6 Introduction \u00b6 Welcome to the official farmOS user guide. These documents are intended for people who will be using farmOS for record keeping and farm management. If you are looking for information about hosting farmOS, or contributing to the devlopment, refer to the dedicated documentation on those topics: Hosting farmOS Contributing to farmOS Logging in \u00b6 The first step to using farmOS is logging in. All records are private by default, and can only be viewed people with a username and password. To log in, first you need to know the address of your farmOS site. If you are hosting farmOS on Farmier , this address will most likely be something like https://myfarm.farmos.net (where myfarm is the name of your farm). If your farmOS is hosted by someone else, they will be able to point you to the correct URL. Enter the URL into the web browser on your computer, phone, or tablet, and you should see a login form. Enter your username and password, and click \"Log in\" to begin using farmOS. Dashboard \u00b6 The first thing you will see when you log in is the farmOS dashboard. On the left are the todo lists. The \"Plan\" shows all upcoming tasks that need to be done. If you miss a task, a \"Late tasks\" list will also be displayed underneath. On the right is the farm map, where you will see any areas that you have mapped. You can use this to navigate to records within farmOS by clicking on an area and then clicking on the available links within the area popup. Under the map you will see a set of metrics for the farm, including total mapped area, total assets, etc. Additional metrics can be added via modules. Navigation \u00b6 farmOS is designed to make your records approachable from multiple angles, so it is easy to find records you made in the past, and add new ones in the future. The main menu at the top provides direct links to the 4 main types of records: Areas - Places on or off the farm Assets - Things of value that you are managing Logs - Events that are related to areas, assets, and people People - People with logins to farmOS These pages will list all areas, assets, logs, or people within the system. Filter and sort options allow you to narrow down the lists to find the record you're looking for. You can also use the map to navigate to records that relate to specific areas. For example, if you want to view the record for a specific planting, you can click on the field in the map where the planting is and you will see all assets in that field. If you are looking for a specific log, you can either find it via the \"Logs\" main menu (and submenus), or you can find the area or asset that the log is associated with, and the log will appear there as well. All your records can be connected and related in this way to make navigating them easier. farmOS + Field Kit \u00b6 When farmOS logs are marked as not \"done\" and assigned to one of the farm's users, those logs will be synced to that user's Field Kit app under the \"My Logs\" screen. This way, you can assign tasks to different people and they can update the log as the task is completed. To learn more about installing farmOS for your farm, visit the Hosting page. For information on how to download and use the Field Kit app, visit the Field Kit page.","title":"Introduction"},{"location":"guide/#farmos-user-guide","text":"","title":"farmOS User Guide"},{"location":"guide/#introduction","text":"Welcome to the official farmOS user guide. These documents are intended for people who will be using farmOS for record keeping and farm management. If you are looking for information about hosting farmOS, or contributing to the devlopment, refer to the dedicated documentation on those topics: Hosting farmOS Contributing to farmOS","title":"Introduction"},{"location":"guide/#logging-in","text":"The first step to using farmOS is logging in. All records are private by default, and can only be viewed people with a username and password. To log in, first you need to know the address of your farmOS site. If you are hosting farmOS on Farmier , this address will most likely be something like https://myfarm.farmos.net (where myfarm is the name of your farm). If your farmOS is hosted by someone else, they will be able to point you to the correct URL. Enter the URL into the web browser on your computer, phone, or tablet, and you should see a login form. Enter your username and password, and click \"Log in\" to begin using farmOS.","title":"Logging in"},{"location":"guide/#dashboard","text":"The first thing you will see when you log in is the farmOS dashboard. On the left are the todo lists. The \"Plan\" shows all upcoming tasks that need to be done. If you miss a task, a \"Late tasks\" list will also be displayed underneath. On the right is the farm map, where you will see any areas that you have mapped. You can use this to navigate to records within farmOS by clicking on an area and then clicking on the available links within the area popup. Under the map you will see a set of metrics for the farm, including total mapped area, total assets, etc. Additional metrics can be added via modules.","title":"Dashboard"},{"location":"guide/#navigation","text":"farmOS is designed to make your records approachable from multiple angles, so it is easy to find records you made in the past, and add new ones in the future. The main menu at the top provides direct links to the 4 main types of records: Areas - Places on or off the farm Assets - Things of value that you are managing Logs - Events that are related to areas, assets, and people People - People with logins to farmOS These pages will list all areas, assets, logs, or people within the system. Filter and sort options allow you to narrow down the lists to find the record you're looking for. You can also use the map to navigate to records that relate to specific areas. For example, if you want to view the record for a specific planting, you can click on the field in the map where the planting is and you will see all assets in that field. If you are looking for a specific log, you can either find it via the \"Logs\" main menu (and submenus), or you can find the area or asset that the log is associated with, and the log will appear there as well. All your records can be connected and related in this way to make navigating them easier.","title":"Navigation"},{"location":"guide/#farmos-field-kit","text":"When farmOS logs are marked as not \"done\" and assigned to one of the farm's users, those logs will be synced to that user's Field Kit app under the \"My Logs\" screen. This way, you can assign tasks to different people and they can update the log as the task is completed. To learn more about installing farmOS for your farm, visit the Hosting page. For information on how to download and use the Field Kit app, visit the Field Kit page.","title":"farmOS + Field Kit"},{"location":"guide/app/","text":"farmOS Field Kit \u00b6 farmOS Field Kit is a way to connect to your farmOS server from your mobile device. Because much of the work of an active farm can occur outside of wifi or cellular range, Field Kit is designed to be an offline-first app. You can create and modify farm logs wherever you're at, whenever you need to; then, when you are back within signal range, you can synchronize all your logs with your farmOS server. Field Kit provides a simplified view of the farm's records, working much like a to-do app. Logs of upcoming farm activities that have been assigned to you will be synced to your device. As you complete each activity, you can update the log with real-time data and photos, mark it as done, then sync it back to the server. You can also create new logs, such as observations or other log types, all on the fly. Releases \u00b6 An early version of Field Kit is available as a web app, which can be found at v1.farmos.app and can be installed as a Progressive Web App (PWA). As a PWA, the app will work offline and your logs will be stored in between uses. You can even add the app to your device's home screen, so it can be launched just like a native app. Version 1 is a proof-of-concept, which should be considered relatively stable, but which will no longer receive major feature updates beyond a few bug fixes. In conjunction with farmOS 2.0, we are in active development of Field Kit 2.0, which will bring with it new features and its own module system, akin to farmOS modules. Stay tuned for more! Previously, and perhaps again in the future, Field Kit was available as native apps for Android and iOS. The Android app can still be installed from the Play Store , but is currently not receiving regular updates. The iOS app was previously available on Test Flight , but at the time of writing this (Apr 2021) all builds have expired and are no longer available for download; previous installs will not be updated for the foreseeable future. We encourage all users to migrate to the PWA, which shares the same features as the native apps. For more details on this decision, see the related forum post . Server requirements \u00b6 All versions of Field Kit require that your farmOS server have an SSL certificate, which enables network traffic to be served via https rather than http . Also, make sure that clean URL's are enabled. Finally, you should keep your server updated with the most recent version of farmOS to ensure compatibility with the the latest version of Field Kit. Development \u00b6 For technical information on the project, please see the Development section . The source code can be viewed on GitHub","title":"Field Kit"},{"location":"guide/app/#farmos-field-kit","text":"farmOS Field Kit is a way to connect to your farmOS server from your mobile device. Because much of the work of an active farm can occur outside of wifi or cellular range, Field Kit is designed to be an offline-first app. You can create and modify farm logs wherever you're at, whenever you need to; then, when you are back within signal range, you can synchronize all your logs with your farmOS server. Field Kit provides a simplified view of the farm's records, working much like a to-do app. Logs of upcoming farm activities that have been assigned to you will be synced to your device. As you complete each activity, you can update the log with real-time data and photos, mark it as done, then sync it back to the server. You can also create new logs, such as observations or other log types, all on the fly.","title":"farmOS Field Kit"},{"location":"guide/app/#releases","text":"An early version of Field Kit is available as a web app, which can be found at v1.farmos.app and can be installed as a Progressive Web App (PWA). As a PWA, the app will work offline and your logs will be stored in between uses. You can even add the app to your device's home screen, so it can be launched just like a native app. Version 1 is a proof-of-concept, which should be considered relatively stable, but which will no longer receive major feature updates beyond a few bug fixes. In conjunction with farmOS 2.0, we are in active development of Field Kit 2.0, which will bring with it new features and its own module system, akin to farmOS modules. Stay tuned for more! Previously, and perhaps again in the future, Field Kit was available as native apps for Android and iOS. The Android app can still be installed from the Play Store , but is currently not receiving regular updates. The iOS app was previously available on Test Flight , but at the time of writing this (Apr 2021) all builds have expired and are no longer available for download; previous installs will not be updated for the foreseeable future. We encourage all users to migrate to the PWA, which shares the same features as the native apps. For more details on this decision, see the related forum post .","title":"Releases"},{"location":"guide/app/#server-requirements","text":"All versions of Field Kit require that your farmOS server have an SSL certificate, which enables network traffic to be served via https rather than http . Also, make sure that clean URL's are enabled. Finally, you should keep your server updated with the most recent version of farmOS to ensure compatibility with the the latest version of Field Kit.","title":"Server requirements"},{"location":"guide/app/#development","text":"For technical information on the project, please see the Development section . The source code can be viewed on GitHub","title":"Development"},{"location":"guide/areas/","text":"Mapping your farm \u00b6 farmOS gives you the ability to organize all of the various places on (and off) your farm. These places are referred to as \"Areas\" in farmOS, and they can be referenced when you are logging events . They are specifically useful in movement logs for setting location of assets . To create an area, go to the Farm Dashboard and click the \"Add an area\" button. This will take you to a form for defining an area. Here is a quick overview of the fields available to you when you are describing an area: Name - The first (and only) thing an area needs is a name. All the other fields are optional. Area type - farmOS uses the concept of \"area type\" to organize and color-code areas on a map. Some of the types available include: Property, Building, Field, and Water. The area type field is not required, but if you do not use it then the area will not be displayed on the main map. Geometry - The Geometry field lets you draw your area on a map, using points, lines, and polygons (see a more detailed description below). Description - This is a simple text tield that you can use to describe each area in further detail. It can be used to take notes, but it is recommended that any activities be recorded using logs instead, because they have a timestamp associated with them. Photo(s) - This field lets you attach photos to your area. Files - This field lets you attach files to your area. You can also use this to upload KML files and automatically import them into the Geometry field above (see more information below). Relations - The \"Parent\" and \"Weight\" fields let you define a hierarchy and order to your areas. You can edit these fields individually on each area, or you can use the drag-and-drop hierarchy editor - which is much easier for moving a lot of areas around at once (more details below). Flags - Flags can be added to areas (as well as assets and logs) for easier searching/filtering. Some flags are provided by default (eg: \"Prioity\", \"Needs Review\", \"Monitor\"), and modules can provide additional flags (eg: \"Organic\" and \"Not Organic\" provided by the [Organic module]). Using geometry fields \u00b6 Here are some common things you will do with the geometry fields in farmOS: Zooming \u00b6 There are three ways to zoom in/out: On touch screens, you can \"pinch zoom\" using two fingers. With a computer mouse, you can use the scroll wheel to zoom in/out. The plus (+) and minus (+) buttons in the top left of the map control zoom. Geolocating \u00b6 A \"Geolocate\" button is available in the top left of the map. This will use your device's GPS (if available) and/or IP-based geolocation service to try to find your current location and center the map on that point. While geolocation is turned on, your position will automatically update as you move around. In addition to the point, a circle will also be displayed around the point with an accuracy radius to tell you how confident the geolocated position is. Address search \u00b6 A search button is available in the left of the map (under the zoom buttons) for performing an address search. As you type into the search box, matching addresses will be displayed in a dropdown. Select the address that you want from that list and the map will be automatically re-centered on that location. Drawing \u00b6 There are four buttons for drawing shapes: Point : Click on the map to create a point. Line : Create a series of line segments by clicking points on the map, and double-clicking when you're done. You can also hold shift to draw freehand. Circle : Create a circle by clicking where you want the center to be, dragging the circle outward to expand it, and clicking again to finish. Polygon : A polygon works the same as a line, except it will create a closed shape at the end, whereas a line will not be filled in. Modifying \u00b6 There are three buttons for modifying shapes: Modify : Click the modify button, and then click a shape to select it. You can click and drag any of the vertices to modify the overall shape. Move : Click the move button, and then click a shape to select it. Then click and drag the shape to move it to a different position. Delete : The delete button will clear any selected shapes from the map. If you accidentally click this, refresh the page WITHOUT saving, and you will revert to the previously saved shapes. Note that this will also revert any other changes to your area that you haven't saved. Importing a KML file \u00b6 KML files are special shape files that define a geometry on a map. They can be created with various GIS/mapping software. If you already have your farm mapped in another software (like Google Earth ), you can export KML files for each area and then import them into farmOS's geometry fields. Alternatively, you can use the Farm Area Import module to import a single KML file and break it up into multiple areas. To import a KML file of an individual area, follow these steps: Create a new area (or edit an existing one). Scroll down to the Files field and upload your KML file. Scroll up to the Geometry field, and just below the map you will see a button labeled \"Find using Files field\". If you uploaded a valid KML file, you will see the shape(s) appear in the map. To import a KML file with multiple areas, follow these steps: Enable the Farm Area Import module (if it isn't already). Click \"Areas\" in the main menu and then click the \"Import\" tab. Copy and paste the contents of your KML file into the text area, and click \"Parse\". If geometries are found in the KML file, a fieldset will be shown for each of them, letting you customize the area name, type, and whether or not it should be imported. At the bottom of the form, there is an option to create a new area that will contain all the imported areas. It is a good idea to use this so that you can easily review the areas that were imported, without having them mixed in with your existing areas right away. If you find that the import didn't work properly, you can select all the areas under this parent area and delete them in bulk. Exporting a KML file \u00b6 KML files can be exported from both areas and logs. Open the main Areas list, or any list of logs, select one or more, and click the \"KML\" button that appears at the bottom. Remember to save! \u00b6 When you're done modifying your area, remember to click the Save button at the bottom of the page to save your changes. Organizing areas hierarchically \u00b6 There are two ways to arrange areas hierarchically in farmOS: When you are editing an individual area, click \"Relations\" at the bottom and use the \"Parent\" and \"Weight\" values to define the area's relationship to other areas. Or, you can click and drag all your areas at once into a hierachal list. To do this, click on the Areas link in the main menu, and in the right column you will see a list of all your areas with a heading of \"Hierachy (change)\". Click \"(change)\" to be brought to the hierarchy editor. Click and drag the areas up and down, and left and right to arrange them how you want, and then click \"Save\" at the bottom of the page. Generate beds \u00b6 farmOS includes a special \"Bed Generator\" module that makes it easy to automatically generate a whole bunch of areas in bulk. The original goal was to make it easier to generate parallel beds within a field, but it may provide additional possibilities in the future. To use the bed generator to generate beds, follow these steps: Go to the \"Areas\" page (from the main menu) and click the \"Bed generator\" tab. Select the field that the beds will be created within. Enter the number of beds that should be generated within the field. Set the orientation of the beds, and use the \"Preview\" button to see how they look. When you are satisfied with the preview, click the \"Generate\" button to generate the beds. Beds will be numbered and labeled using the parent area's name. Use the Snapping Grid \u00b6 FarmOS includes a \"snapping grid\" tool to aid in creating regular/aligned geometries. By default when drawing, the cursor will only snap to existing areas. However, the snapping grid adds a grid of evenly spaced points to which the cursor will snap preferentially. To activate the grid, click the '#' icon in the bottom left corner above the scale line, then select two points. The first point is the \"origin\" of the grid while the second point we will call a \"rotation anchor\" and describes how the grid should be rotated around the origin point. In addition to controlling the origin/rotation of the grid, its dimensions can be specified. To do so, hovor your mouse over the '#' icon then enter the x and y dimensions in the controls which appear.Since the grid can be rotated the dimensions are independent of the compass directions on the map. Instead, the x dimension represents the distances between the grid points on lines parallel with the line formed by the origin and rotation anchor points. Similarly, the y dimension represents distances perpendicular to that line.","title":"Mapping your farm"},{"location":"guide/areas/#mapping-your-farm","text":"farmOS gives you the ability to organize all of the various places on (and off) your farm. These places are referred to as \"Areas\" in farmOS, and they can be referenced when you are logging events . They are specifically useful in movement logs for setting location of assets . To create an area, go to the Farm Dashboard and click the \"Add an area\" button. This will take you to a form for defining an area. Here is a quick overview of the fields available to you when you are describing an area: Name - The first (and only) thing an area needs is a name. All the other fields are optional. Area type - farmOS uses the concept of \"area type\" to organize and color-code areas on a map. Some of the types available include: Property, Building, Field, and Water. The area type field is not required, but if you do not use it then the area will not be displayed on the main map. Geometry - The Geometry field lets you draw your area on a map, using points, lines, and polygons (see a more detailed description below). Description - This is a simple text tield that you can use to describe each area in further detail. It can be used to take notes, but it is recommended that any activities be recorded using logs instead, because they have a timestamp associated with them. Photo(s) - This field lets you attach photos to your area. Files - This field lets you attach files to your area. You can also use this to upload KML files and automatically import them into the Geometry field above (see more information below). Relations - The \"Parent\" and \"Weight\" fields let you define a hierarchy and order to your areas. You can edit these fields individually on each area, or you can use the drag-and-drop hierarchy editor - which is much easier for moving a lot of areas around at once (more details below). Flags - Flags can be added to areas (as well as assets and logs) for easier searching/filtering. Some flags are provided by default (eg: \"Prioity\", \"Needs Review\", \"Monitor\"), and modules can provide additional flags (eg: \"Organic\" and \"Not Organic\" provided by the [Organic module]).","title":"Mapping your farm"},{"location":"guide/areas/#using-geometry-fields","text":"Here are some common things you will do with the geometry fields in farmOS:","title":"Using geometry fields"},{"location":"guide/areas/#zooming","text":"There are three ways to zoom in/out: On touch screens, you can \"pinch zoom\" using two fingers. With a computer mouse, you can use the scroll wheel to zoom in/out. The plus (+) and minus (+) buttons in the top left of the map control zoom.","title":"Zooming"},{"location":"guide/areas/#geolocating","text":"A \"Geolocate\" button is available in the top left of the map. This will use your device's GPS (if available) and/or IP-based geolocation service to try to find your current location and center the map on that point. While geolocation is turned on, your position will automatically update as you move around. In addition to the point, a circle will also be displayed around the point with an accuracy radius to tell you how confident the geolocated position is.","title":"Geolocating"},{"location":"guide/areas/#address-search","text":"A search button is available in the left of the map (under the zoom buttons) for performing an address search. As you type into the search box, matching addresses will be displayed in a dropdown. Select the address that you want from that list and the map will be automatically re-centered on that location.","title":"Address search"},{"location":"guide/areas/#drawing","text":"There are four buttons for drawing shapes: Point : Click on the map to create a point. Line : Create a series of line segments by clicking points on the map, and double-clicking when you're done. You can also hold shift to draw freehand. Circle : Create a circle by clicking where you want the center to be, dragging the circle outward to expand it, and clicking again to finish. Polygon : A polygon works the same as a line, except it will create a closed shape at the end, whereas a line will not be filled in.","title":"Drawing"},{"location":"guide/areas/#modifying","text":"There are three buttons for modifying shapes: Modify : Click the modify button, and then click a shape to select it. You can click and drag any of the vertices to modify the overall shape. Move : Click the move button, and then click a shape to select it. Then click and drag the shape to move it to a different position. Delete : The delete button will clear any selected shapes from the map. If you accidentally click this, refresh the page WITHOUT saving, and you will revert to the previously saved shapes. Note that this will also revert any other changes to your area that you haven't saved.","title":"Modifying"},{"location":"guide/areas/#importing-a-kml-file","text":"KML files are special shape files that define a geometry on a map. They can be created with various GIS/mapping software. If you already have your farm mapped in another software (like Google Earth ), you can export KML files for each area and then import them into farmOS's geometry fields. Alternatively, you can use the Farm Area Import module to import a single KML file and break it up into multiple areas. To import a KML file of an individual area, follow these steps: Create a new area (or edit an existing one). Scroll down to the Files field and upload your KML file. Scroll up to the Geometry field, and just below the map you will see a button labeled \"Find using Files field\". If you uploaded a valid KML file, you will see the shape(s) appear in the map. To import a KML file with multiple areas, follow these steps: Enable the Farm Area Import module (if it isn't already). Click \"Areas\" in the main menu and then click the \"Import\" tab. Copy and paste the contents of your KML file into the text area, and click \"Parse\". If geometries are found in the KML file, a fieldset will be shown for each of them, letting you customize the area name, type, and whether or not it should be imported. At the bottom of the form, there is an option to create a new area that will contain all the imported areas. It is a good idea to use this so that you can easily review the areas that were imported, without having them mixed in with your existing areas right away. If you find that the import didn't work properly, you can select all the areas under this parent area and delete them in bulk.","title":"Importing a KML file"},{"location":"guide/areas/#exporting-a-kml-file","text":"KML files can be exported from both areas and logs. Open the main Areas list, or any list of logs, select one or more, and click the \"KML\" button that appears at the bottom.","title":"Exporting a KML file"},{"location":"guide/areas/#remember-to-save","text":"When you're done modifying your area, remember to click the Save button at the bottom of the page to save your changes.","title":"Remember to save!"},{"location":"guide/areas/#organizing-areas-hierarchically","text":"There are two ways to arrange areas hierarchically in farmOS: When you are editing an individual area, click \"Relations\" at the bottom and use the \"Parent\" and \"Weight\" values to define the area's relationship to other areas. Or, you can click and drag all your areas at once into a hierachal list. To do this, click on the Areas link in the main menu, and in the right column you will see a list of all your areas with a heading of \"Hierachy (change)\". Click \"(change)\" to be brought to the hierarchy editor. Click and drag the areas up and down, and left and right to arrange them how you want, and then click \"Save\" at the bottom of the page.","title":"Organizing areas hierarchically"},{"location":"guide/areas/#generate-beds","text":"farmOS includes a special \"Bed Generator\" module that makes it easy to automatically generate a whole bunch of areas in bulk. The original goal was to make it easier to generate parallel beds within a field, but it may provide additional possibilities in the future. To use the bed generator to generate beds, follow these steps: Go to the \"Areas\" page (from the main menu) and click the \"Bed generator\" tab. Select the field that the beds will be created within. Enter the number of beds that should be generated within the field. Set the orientation of the beds, and use the \"Preview\" button to see how they look. When you are satisfied with the preview, click the \"Generate\" button to generate the beds. Beds will be numbered and labeled using the parent area's name.","title":"Generate beds"},{"location":"guide/areas/#use-the-snapping-grid","text":"FarmOS includes a \"snapping grid\" tool to aid in creating regular/aligned geometries. By default when drawing, the cursor will only snap to existing areas. However, the snapping grid adds a grid of evenly spaced points to which the cursor will snap preferentially. To activate the grid, click the '#' icon in the bottom left corner above the scale line, then select two points. The first point is the \"origin\" of the grid while the second point we will call a \"rotation anchor\" and describes how the grid should be rotated around the origin point. In addition to controlling the origin/rotation of the grid, its dimensions can be specified. To do so, hovor your mouse over the '#' icon then enter the x and y dimensions in the controls which appear.Since the grid can be rotated the dimensions are independent of the compass directions on the map. Instead, the x dimension represents the distances between the grid points on lines parallel with the line formed by the origin and rotation anchor points. Similarly, the y dimension represents distances perpendicular to that line.","title":"Use the Snapping Grid"},{"location":"guide/export/","text":"Exporting data \u00b6 All asset and log lists in farmOS provide a CSV export button at the bottom that will generate and download a CSV file. Any sorts or filters that are applied to the list will be represented in the CSV output. Reimporting \u00b6 While it is technically possible to move data from one farmOS to another via CSV files, it is not recommended due to differences in the import/export CSV format. If you are trying to export assets or logs from one farmOS site so that they can be imported into another farmOS site it is important to note that there are some differences that can complicate things. It is technically possible, but there are some limitations and differences to be aware of. Please read all of the following before attempting it. There is an open issue to resolve these differences here: https://www.drupal.org/node/2900239 Differences and considerations \u00b6 Some of the differences and considerations to be aware of are described below. Column differences \u00b6 In most cases, the CSV column names that are exported from asset and log lists will match those of the corresponding CSV importer for that type. There may be columns present in imports that are not present in exports, and vice versa. Compare the exported CSV columns to the importer's CSV template columns before importing to understand what pieces of information might be missing from either side. Asset and log IDs \u00b6 Exported CSVs will include a column for the asset or log ID, which is not available as a field for import. You can still import CSVs with this column, but it will be ignored during the import and a new ID will be assigned by farmOS to the imported asset or log. If there are any other logs or assets that reference this ID, they will need to be manually updated to point to the correct IDs when you import them. Log \"Done\" column \u00b6 In log exports, the \"Done\" column will contain a checkmark if the log is done, and it will be empty if the log is not done. This differs from the format expected by log importers. Log importers expect a value of \"yes\" or \"no\" in the \"Done\" column, and blank values will automatically default to \"yes\", which is the opposite of what a blank value means in CSV exports. Truncated text \u00b6 Descriptions, notes, and other long text fields are truncated when they are displayed in asset and log lists in farmOS. When those lists are exported to CSV, the text will also be truncated in the export. Files and images \u00b6 CSV exports do not provide any mechanism for exporting images or files that are attached to assets or logs. Files and images need to be uploaded manually after import. Asset location \u00b6 The CSV importers provided for assets do not currently support setting asset location, and log importers do not currently support importing movement information. Asset location needs to be set manually after assets are imported.","title":"Export"},{"location":"guide/export/#exporting-data","text":"All asset and log lists in farmOS provide a CSV export button at the bottom that will generate and download a CSV file. Any sorts or filters that are applied to the list will be represented in the CSV output.","title":"Exporting data"},{"location":"guide/export/#reimporting","text":"While it is technically possible to move data from one farmOS to another via CSV files, it is not recommended due to differences in the import/export CSV format. If you are trying to export assets or logs from one farmOS site so that they can be imported into another farmOS site it is important to note that there are some differences that can complicate things. It is technically possible, but there are some limitations and differences to be aware of. Please read all of the following before attempting it. There is an open issue to resolve these differences here: https://www.drupal.org/node/2900239","title":"Reimporting"},{"location":"guide/export/#differences-and-considerations","text":"Some of the differences and considerations to be aware of are described below.","title":"Differences and considerations"},{"location":"guide/export/#column-differences","text":"In most cases, the CSV column names that are exported from asset and log lists will match those of the corresponding CSV importer for that type. There may be columns present in imports that are not present in exports, and vice versa. Compare the exported CSV columns to the importer's CSV template columns before importing to understand what pieces of information might be missing from either side.","title":"Column differences"},{"location":"guide/export/#asset-and-log-ids","text":"Exported CSVs will include a column for the asset or log ID, which is not available as a field for import. You can still import CSVs with this column, but it will be ignored during the import and a new ID will be assigned by farmOS to the imported asset or log. If there are any other logs or assets that reference this ID, they will need to be manually updated to point to the correct IDs when you import them.","title":"Asset and log IDs"},{"location":"guide/export/#log-done-column","text":"In log exports, the \"Done\" column will contain a checkmark if the log is done, and it will be empty if the log is not done. This differs from the format expected by log importers. Log importers expect a value of \"yes\" or \"no\" in the \"Done\" column, and blank values will automatically default to \"yes\", which is the opposite of what a blank value means in CSV exports.","title":"Log \"Done\" column"},{"location":"guide/export/#truncated-text","text":"Descriptions, notes, and other long text fields are truncated when they are displayed in asset and log lists in farmOS. When those lists are exported to CSV, the text will also be truncated in the export.","title":"Truncated text"},{"location":"guide/export/#files-and-images","text":"CSV exports do not provide any mechanism for exporting images or files that are attached to assets or logs. Files and images need to be uploaded manually after import.","title":"Files and images"},{"location":"guide/export/#asset-location","text":"The CSV importers provided for assets do not currently support setting asset location, and log importers do not currently support importing movement information. Asset location needs to be set manually after assets are imported.","title":"Asset location"},{"location":"guide/import/","text":"Importing data \u00b6 CSV importers are provided for all asset and log types in farmOS. This video by Chris Callahan at UVM Extension 's Agricultural Engineering Program summarizes the comma separated variable (CSV) import and export feature of FarmOS which allows for the import and export of FarmOS data from and to spreadsheet applications. This may be especially helpful for offline use. Links to each importer can be found at the top of each primary asset or log listing page (accessible via the main menu of farmOS). For example, if you want to import Animal assets, click on Assets > Animals in the main menu, and then click the \"Import animals\" action link at the top of the page. There is a link to \"Download a template\" within the importer page, which will give you a blank CSV file with all the necessary column headers. Start with the template file, and add a row for each of the records you want to import. Save this file and upload it to the importer form to create the new records in farmOS. Common fields \u00b6 Each asset/log type has its own importer, and some have fields that are unique to their type, but there are some common fields that are shared across all importers. Common asset fields include: Name - The name of the asset (required). Archived - Whether or not the asset is archived. See \"Boolean options\" below for allowed values. If omitted, the asset will not be archived. Description - A longer description of the asset. Parent IDs - A comma-separated list of asset IDs that represent parents of the asset being imported. These parent assets must already exist in farmOS in order for the link to be created. See notes below. Parent names - A comma-separated list of asset names that represent parents of the asset being imported. These parent assets must already exist in farmOS in order for the link to be created. See notes below. Common log fields include: Name - The name of the log. This will be automatically generated if it is left blank. Date - The date when the logged event takes place (required). This can be a string in any English date format that is convertable to a UNIX timestamp. Done - Whether or not the log is complete. See \"Boolean options\" below for allowed values. If omitted, the log will be marked as \"done\". Notes - A longer description of the logged event. Asset IDs - A comma-separated list of asset IDs that this log is related to. These assets must already exist in farmOS in order for the link to be created. See notes below. Asset names - A comma-separated list of asset names that this log is related to. These assets must already exist in farmOS in order for the link to be created. See notes below. Archive assets - If this is set to \"Y\", then any assets referenced on the log will be archived. This can be used to archive assets at the same time as recording their harvest logs, for example. See \"Boolean options\" below for allowed values. If omitted, assets will not be archived. Note that this will archive assets even if the log is not marked \"Done\" during import. Areas - A comma-separated list of areas that this log is related to. Areas will be matched on their name, and new areas will be created if they do not exist. Categories - A comma-separated list of log categories that should be applied to the log. The categories must already exist in farmOS in order for the assignment to take place. Common fields that are required are noted above. Specific asset/log type importers may have additional required fields. Asset names vs IDs \u00b6 In some importers, it is possible to reference assets by either their names or their IDs. For example, with the \"Asset names\" and \"Asset IDs\" columns in log importers, or the \"Parent names\" and \"Parent IDs\" in asset importers. Do not use both of these columns at the same time. There is currently a known issue with merging the two columns together. It is OK to use IDs in one row, and names in another row. Do not use both in a single row. If two assets with the same name exist, the one with the higher asset ID will be selected. This is based on the assumption that you want to import records associated with recent assets. If you are trying to import old records, and you have duplicate asset names in your system, you must use the \"Asset IDs\" column and reference the assets explicitly with their IDs. Boolean values \u00b6 The following values are acceptable for boolean fields, like \"Archived\" for asset importers, and \"Done\" for log importers. These values are not case sensitive (so \"Yes\" and \"yes\" will be treated the same). True \u00b6 Yes Y True T 1 False \u00b6 No N False F 0 Access \u00b6 CSV importers are only available to users with the Farm Manager role .","title":"Import"},{"location":"guide/import/#importing-data","text":"CSV importers are provided for all asset and log types in farmOS. This video by Chris Callahan at UVM Extension 's Agricultural Engineering Program summarizes the comma separated variable (CSV) import and export feature of FarmOS which allows for the import and export of FarmOS data from and to spreadsheet applications. This may be especially helpful for offline use. Links to each importer can be found at the top of each primary asset or log listing page (accessible via the main menu of farmOS). For example, if you want to import Animal assets, click on Assets > Animals in the main menu, and then click the \"Import animals\" action link at the top of the page. There is a link to \"Download a template\" within the importer page, which will give you a blank CSV file with all the necessary column headers. Start with the template file, and add a row for each of the records you want to import. Save this file and upload it to the importer form to create the new records in farmOS.","title":"Importing data"},{"location":"guide/import/#common-fields","text":"Each asset/log type has its own importer, and some have fields that are unique to their type, but there are some common fields that are shared across all importers. Common asset fields include: Name - The name of the asset (required). Archived - Whether or not the asset is archived. See \"Boolean options\" below for allowed values. If omitted, the asset will not be archived. Description - A longer description of the asset. Parent IDs - A comma-separated list of asset IDs that represent parents of the asset being imported. These parent assets must already exist in farmOS in order for the link to be created. See notes below. Parent names - A comma-separated list of asset names that represent parents of the asset being imported. These parent assets must already exist in farmOS in order for the link to be created. See notes below. Common log fields include: Name - The name of the log. This will be automatically generated if it is left blank. Date - The date when the logged event takes place (required). This can be a string in any English date format that is convertable to a UNIX timestamp. Done - Whether or not the log is complete. See \"Boolean options\" below for allowed values. If omitted, the log will be marked as \"done\". Notes - A longer description of the logged event. Asset IDs - A comma-separated list of asset IDs that this log is related to. These assets must already exist in farmOS in order for the link to be created. See notes below. Asset names - A comma-separated list of asset names that this log is related to. These assets must already exist in farmOS in order for the link to be created. See notes below. Archive assets - If this is set to \"Y\", then any assets referenced on the log will be archived. This can be used to archive assets at the same time as recording their harvest logs, for example. See \"Boolean options\" below for allowed values. If omitted, assets will not be archived. Note that this will archive assets even if the log is not marked \"Done\" during import. Areas - A comma-separated list of areas that this log is related to. Areas will be matched on their name, and new areas will be created if they do not exist. Categories - A comma-separated list of log categories that should be applied to the log. The categories must already exist in farmOS in order for the assignment to take place. Common fields that are required are noted above. Specific asset/log type importers may have additional required fields.","title":"Common fields"},{"location":"guide/import/#asset-names-vs-ids","text":"In some importers, it is possible to reference assets by either their names or their IDs. For example, with the \"Asset names\" and \"Asset IDs\" columns in log importers, or the \"Parent names\" and \"Parent IDs\" in asset importers. Do not use both of these columns at the same time. There is currently a known issue with merging the two columns together. It is OK to use IDs in one row, and names in another row. Do not use both in a single row. If two assets with the same name exist, the one with the higher asset ID will be selected. This is based on the assumption that you want to import records associated with recent assets. If you are trying to import old records, and you have duplicate asset names in your system, you must use the \"Asset IDs\" column and reference the assets explicitly with their IDs.","title":"Asset names vs IDs"},{"location":"guide/import/#boolean-values","text":"The following values are acceptable for boolean fields, like \"Archived\" for asset importers, and \"Done\" for log importers. These values are not case sensitive (so \"Yes\" and \"yes\" will be treated the same).","title":"Boolean values"},{"location":"guide/import/#true","text":"Yes Y True T 1","title":"True"},{"location":"guide/import/#false","text":"No N False F 0","title":"False"},{"location":"guide/import/#access","text":"CSV importers are only available to users with the Farm Manager role .","title":"Access"},{"location":"guide/inventory/","text":"Inventory tracking \u00b6 A new feature available in farmOS 7.x-1.0-beta16 is an inventory module, which allows for tracking of asset inventory levels over time via logs . As of this release, inventory management is only enabled on animal assets, but will be enabled on other asset types in future releases. For more information about tracking animal inventory, read the animal asset user guide. Inventory can be added/subtracted from an asset using the \"Inventory adjustment\" fields on logs. You may also make more than one inventory adjustment on an individual log (to different assets, for example). The inventory adjustment field has two subfields: Asset and Value . The asset field references the asset whose inventory is being adjusted. The value field is a positive or negative adjustment to the asset's inventory. A positive number will add to the inventory, and a negative number will subtract from the inventory. An asset's current inventory is visible on the asset record page. You can also view a list of all logs that have adjusted the asset's inventory in the past (as well as planned inventory adjustment logs in the future).","title":"Inventory tracking"},{"location":"guide/inventory/#inventory-tracking","text":"A new feature available in farmOS 7.x-1.0-beta16 is an inventory module, which allows for tracking of asset inventory levels over time via logs . As of this release, inventory management is only enabled on animal assets, but will be enabled on other asset types in future releases. For more information about tracking animal inventory, read the animal asset user guide. Inventory can be added/subtracted from an asset using the \"Inventory adjustment\" fields on logs. You may also make more than one inventory adjustment on an individual log (to different assets, for example). The inventory adjustment field has two subfields: Asset and Value . The asset field references the asset whose inventory is being adjusted. The value field is a positive or negative adjustment to the asset's inventory. A positive number will add to the inventory, and a negative number will subtract from the inventory. An asset's current inventory is visible on the asset record page. You can also view a list of all logs that have adjusted the asset's inventory in the past (as well as planned inventory adjustment logs in the future).","title":"Inventory tracking"},{"location":"guide/location/","text":"Movements and location \u00b6 The locations of all assets in farmOS are determined by \"Movement\" fields on log entries. When you create an asset, it will not be located anywhere until a log is added that includes this movement information. These logs can be referred to as \"movement logs\" even though they are actually an \"Activity\", \"Observation\", or other log type. farmOS determines the \"current location\" of an asset by looking at the asset's most recent movement log (with a date less than or equal to the present moment). Only logs that have been marked as \"done\" are taken into consideration. Every movement has a \"Movement To\" field on it, which is required in order to record a movement. It also includes an optional \"Movement Geometry\" field, which can be used to specify a more specific location of the assets on a map. Creating movement logs \u00b6 There are three ways that movement logs can be created: Click \"Add an activity\" (or other log type) when you are viewing a single asset. This will present you with a new log form, and automatically fill in the \"Assets\" field with the asset you were looking at. In the \"Movement\" fieldset, select an area in the \"Movement To\" field to record a movement. Select multiple assets in a list, and click the \"Move\" button at the bottom. This allows you to move multiple assets at once. Similarly, this will present you with a new activity log form, and automatically fill in the \"Assets\" field with the assets you selected in the list. Add an area to the \"Movement To\" field to record a movement. Click \"Add a log\" from the farmOS dashboard, and select a log type. This presents you with a blank log form, which you can fill in however you'd like. Add an area to the \"Movement To\" field to record a movement. If you leave an activity log name blank, and it includes movement information, it will default the log name to \"Move [asset] to [area]\". There is also a shortcut: when you are editing an asset, you will see a field labeled \"Location\". This field will show the asset's current location, and if you change it a new observation log will automatically be created when you save the asset titled \"Current location: [area]\". Doing this will set the date of the log to the moment you clicked \"Save\", and it will be marked \"done\" immediately. Movement fields \u00b6 Here is a quick summary of the fields in the \"Movement\" fieldset: To - (required) This is the most important field on a movement log. The area that is referenced with this field will be considered the asset's location. Geometry - (optional) movements can be defined with a more specific geometry on the map using this field. This can be useful for temporary locations (like a moveable fence) within a larger area. If you leave this blank, the geometry will be automatically copied from the area referenced in the \"Movement To\" field (if available).","title":"Movements and location"},{"location":"guide/location/#movements-and-location","text":"The locations of all assets in farmOS are determined by \"Movement\" fields on log entries. When you create an asset, it will not be located anywhere until a log is added that includes this movement information. These logs can be referred to as \"movement logs\" even though they are actually an \"Activity\", \"Observation\", or other log type. farmOS determines the \"current location\" of an asset by looking at the asset's most recent movement log (with a date less than or equal to the present moment). Only logs that have been marked as \"done\" are taken into consideration. Every movement has a \"Movement To\" field on it, which is required in order to record a movement. It also includes an optional \"Movement Geometry\" field, which can be used to specify a more specific location of the assets on a map.","title":"Movements and location"},{"location":"guide/location/#creating-movement-logs","text":"There are three ways that movement logs can be created: Click \"Add an activity\" (or other log type) when you are viewing a single asset. This will present you with a new log form, and automatically fill in the \"Assets\" field with the asset you were looking at. In the \"Movement\" fieldset, select an area in the \"Movement To\" field to record a movement. Select multiple assets in a list, and click the \"Move\" button at the bottom. This allows you to move multiple assets at once. Similarly, this will present you with a new activity log form, and automatically fill in the \"Assets\" field with the assets you selected in the list. Add an area to the \"Movement To\" field to record a movement. Click \"Add a log\" from the farmOS dashboard, and select a log type. This presents you with a blank log form, which you can fill in however you'd like. Add an area to the \"Movement To\" field to record a movement. If you leave an activity log name blank, and it includes movement information, it will default the log name to \"Move [asset] to [area]\". There is also a shortcut: when you are editing an asset, you will see a field labeled \"Location\". This field will show the asset's current location, and if you change it a new observation log will automatically be created when you save the asset titled \"Current location: [area]\". Doing this will set the date of the log to the moment you clicked \"Save\", and it will be marked \"done\" immediately.","title":"Creating movement logs"},{"location":"guide/location/#movement-fields","text":"Here is a quick summary of the fields in the \"Movement\" fieldset: To - (required) This is the most important field on a movement log. The area that is referenced with this field will be considered the asset's location. Geometry - (optional) movements can be defined with a more specific geometry on the map using this field. This can be useful for temporary locations (like a moveable fence) within a larger area. If you leave this blank, the geometry will be automatically copied from the area referenced in the \"Movement To\" field (if available).","title":"Movement fields"},{"location":"guide/logs/","text":"Logging events \u00b6 Logs are records of all kinds of events. You can be as granular as you want: the more information you're recording, the more you can look back on and learn from in the future. Planning ahead \u00b6 Planning ahead in farmOS is exactly the same as recording things that already happened. The only difference is that the date is in the future, and the log is \"not done\". All events in farmOS are entered as logs, and all logs can be marked as \"done\" or \"not done\". So to plan an event in the future, create a log with a future date, and make sure the \"done\" box is not checked. Logs that are in the future and \"not done\" will appear in your \"Upcoming Tasks\" list on the dashboard. Underneath that is a \"Late tasks\" list, which shows all \"not done\" logs with a date in the past. So as time goes by, you can mark your logs as done (or not), and it will keep track of what happened and what didn't. Calendar \u00b6 In addition to the standard lists by log type, you can also view all logs in a calendar format. This is available via the main menu, next to \"My Account\", or directly at farm/calendar . Month, week, day, and year views are all available. Standard log types \u00b6 There are a number of different type of logs in farmOS - each with it's own purpose and set of fields. Some of the general log types are described below, but there are also other log types that pertain to specific asset types . Activities \u00b6 Activities are a sort of catch-all, or default, log type, which can be used for general planning and recordkeeping of activities that don't fit any of the other, more specific, log types. Observations \u00b6 Observations are used to record any kind of passive observation on the farm. For example, seeing that a planting has germinated is an observation. This is a very flexible log type that can be used for a lot of different things. It comes with it's own \"Observation Type\" vocabulary for defining your own custom categorizations. Inputs \u00b6 Input logs are used to record resources that are put into an asset. Fertlizer (for plantings) or feed (for animals) can be recorded with input logs. Harvests \u00b6 Harvest logs are used to record harvests. Other log types \u00b6 In addition to the standard log types described above, there are a few other types provided for specific purposes. Note that these log types are provided by modules that may not be turned on by default in your farmOS. If you do not see these types in your farmOS, turn on the applicable module (or ask you farmOS host to do so for you). Soil tests \u00b6 Soil test logs can be used to record when you have a soil test performed. They can be linked to a specific field or area, and you can specify the exact points on a map where samples were taken from. Integration is also provided with the US NRCS Soil Survey API, which allows you to view soil type map overlays, as well as look up soil name for the specific sample points in your soil tests. Sales and purchases \u00b6 Sale and purchase logs can be used to record a sales/purchases, optionally associated with assets and/or areas. These can be enabled with the farmOS Ledger module. Water tests \u00b6 Water test logs can be used to record when you have a water test performed. Similar to soil test logs, they can be linked to a specific field or area, and you can specify the lab that performed the test. Some regulatory guidelines require that water tests are taken for both field and pack house water sources. Sales \u00b6 Sale logs provide the ability to record the sale of specific assets. You can specify quantity sold, unit price, total price, customer, and invoice number. Sales logs can only represent the sale of a single item, and are not intended for use as multi-item invoices. The primary purpose of sale logs is to connect the final dots for food traceability. Log features \u00b6 Task assignment \u00b6 Logs can be assigned to one or more person(s) in farmOS using the log's Owner field. Users can view a list of all logs assigned to them by clicking \"My Account\" in the menu and then selecting the \"Logs\" tab of their user profile. Categorization \u00b6 Logs can be assigned to one or more categories. A set of pre-defined categories are provided by farmOS, and more can be added by users. Log categories enable you to organize, sort, and filter your logs in ways that make sense to you, so you can find the logs you need easily in the future. Bulk asset association \u00b6 If you want to create a log that references multiple assets, you can either create the log and then add each asset to it individually, or you can select multiple assets in a list and click the \"Log\" button that appears at the bottom. This will open up a new log form with the assets pre-selected.","title":"Logging events"},{"location":"guide/logs/#logging-events","text":"Logs are records of all kinds of events. You can be as granular as you want: the more information you're recording, the more you can look back on and learn from in the future.","title":"Logging events"},{"location":"guide/logs/#planning-ahead","text":"Planning ahead in farmOS is exactly the same as recording things that already happened. The only difference is that the date is in the future, and the log is \"not done\". All events in farmOS are entered as logs, and all logs can be marked as \"done\" or \"not done\". So to plan an event in the future, create a log with a future date, and make sure the \"done\" box is not checked. Logs that are in the future and \"not done\" will appear in your \"Upcoming Tasks\" list on the dashboard. Underneath that is a \"Late tasks\" list, which shows all \"not done\" logs with a date in the past. So as time goes by, you can mark your logs as done (or not), and it will keep track of what happened and what didn't.","title":"Planning ahead"},{"location":"guide/logs/#calendar","text":"In addition to the standard lists by log type, you can also view all logs in a calendar format. This is available via the main menu, next to \"My Account\", or directly at farm/calendar . Month, week, day, and year views are all available.","title":"Calendar"},{"location":"guide/logs/#standard-log-types","text":"There are a number of different type of logs in farmOS - each with it's own purpose and set of fields. Some of the general log types are described below, but there are also other log types that pertain to specific asset types .","title":"Standard log types"},{"location":"guide/logs/#activities","text":"Activities are a sort of catch-all, or default, log type, which can be used for general planning and recordkeeping of activities that don't fit any of the other, more specific, log types.","title":"Activities"},{"location":"guide/logs/#observations","text":"Observations are used to record any kind of passive observation on the farm. For example, seeing that a planting has germinated is an observation. This is a very flexible log type that can be used for a lot of different things. It comes with it's own \"Observation Type\" vocabulary for defining your own custom categorizations.","title":"Observations"},{"location":"guide/logs/#inputs","text":"Input logs are used to record resources that are put into an asset. Fertlizer (for plantings) or feed (for animals) can be recorded with input logs.","title":"Inputs"},{"location":"guide/logs/#harvests","text":"Harvest logs are used to record harvests.","title":"Harvests"},{"location":"guide/logs/#other-log-types","text":"In addition to the standard log types described above, there are a few other types provided for specific purposes. Note that these log types are provided by modules that may not be turned on by default in your farmOS. If you do not see these types in your farmOS, turn on the applicable module (or ask you farmOS host to do so for you).","title":"Other log types"},{"location":"guide/logs/#soil-tests","text":"Soil test logs can be used to record when you have a soil test performed. They can be linked to a specific field or area, and you can specify the exact points on a map where samples were taken from. Integration is also provided with the US NRCS Soil Survey API, which allows you to view soil type map overlays, as well as look up soil name for the specific sample points in your soil tests.","title":"Soil tests"},{"location":"guide/logs/#sales-and-purchases","text":"Sale and purchase logs can be used to record a sales/purchases, optionally associated with assets and/or areas. These can be enabled with the farmOS Ledger module.","title":"Sales and purchases"},{"location":"guide/logs/#water-tests","text":"Water test logs can be used to record when you have a water test performed. Similar to soil test logs, they can be linked to a specific field or area, and you can specify the lab that performed the test. Some regulatory guidelines require that water tests are taken for both field and pack house water sources.","title":"Water tests"},{"location":"guide/logs/#sales","text":"Sale logs provide the ability to record the sale of specific assets. You can specify quantity sold, unit price, total price, customer, and invoice number. Sales logs can only represent the sale of a single item, and are not intended for use as multi-item invoices. The primary purpose of sale logs is to connect the final dots for food traceability.","title":"Sales"},{"location":"guide/logs/#log-features","text":"","title":"Log features"},{"location":"guide/logs/#task-assignment","text":"Logs can be assigned to one or more person(s) in farmOS using the log's Owner field. Users can view a list of all logs assigned to them by clicking \"My Account\" in the menu and then selecting the \"Logs\" tab of their user profile.","title":"Task assignment"},{"location":"guide/logs/#categorization","text":"Logs can be assigned to one or more categories. A set of pre-defined categories are provided by farmOS, and more can be added by users. Log categories enable you to organize, sort, and filter your logs in ways that make sense to you, so you can find the logs you need easily in the future.","title":"Categorization"},{"location":"guide/logs/#bulk-asset-association","text":"If you want to create a log that references multiple assets, you can either create the log and then add each asset to it individually, or you can select multiple assets in a list and click the \"Log\" button that appears at the bottom. This will open up a new log form with the assets pre-selected.","title":"Bulk asset association"},{"location":"guide/people/","text":"People \u00b6 farmOS allows a farm to have multiple \"users\" accessing it, and each of those users is assigned one or more \"roles\" to grant them different levels of permission. Roles \u00b6 Three roles are provided with farmOS: Farm Manager \u00b6 Farm Managers have access to everything in farmOS. They can create areas, add assets, record logs, and change configuration. Farm Worker \u00b6 Farm Workers have most of the same permissions as Managers, but they cannot change configuration. Farm Viewer \u00b6 Farm Viewers are limited to viewing farmOS areas, assets, and logs - but they cannot edit anything. The Farm Viewer role is useful if you want to share your farm's activities with someone, but you don't want to give them the ability to make changes. For example, if you are applying for Organic certification in the United States, you can create a user with the Farm Viewer role for your certifying agent, so they can log into your farmOS and see your records. Advanced Role Customization \u00b6 Permissions for the provided roles cannot be modified through the admin UI since they are controlled by the Farm Access Roles module. This is not generally an issue since the provided roles have been carefully tailored to work for most applications. However if required, there are three options for customizing user permissions: Additional Roles \u00b6 The simplest way to create custom user permissions is to use a few additional roles along with the provided ones. With this strategy, users are given the minimum required permissions using the provided roles then granted any further permissions via custom additional roles that are manually configured. For example, suppose some users who have the Farm Worker role but not the Farm Manager role need to be able to Configure farm reports - which they cannot do with their current Farm Worker role. One option would be to make them all Farm Managers. However, this could be confusing or risky if it doesn't match their real-world role or trust level. Instead a new role called \"Farm Report Manager\" (the name is arbitrary) can be created and given permission to Configure farm reports. This new role can then be selectively given to just those users who need the additional set of permissions. Alternate Roles \u00b6 In some cases where significantly different permissions are required than default provided roles, it may be preferable to disable the Farm Access Roles module and create alternate roles manually - or through a custom module. For example, suppose some users are responsible only for animals and other users are responsible only for plantings. One option would be to make them all Farm Workers or use the above strategy of additional roles to give those users only the required permissions on top of the Farm Viewer role. However, in some scenarios it may be desirable to make alternate roles which completely supercede the provided ones. This carries some advantages; Allows role naming and structure to more directly match an organizations' May allow closer adherance to the Principle of Least Privilege where the existing roles are overly permissive for most users But also some disadvantages; The alternate roles have to be manually maintained over time - including across farmOS version upgrades which may imply permission changes for all features to work or continue working All the permissions for the alternate roles have to be manually configured which increases the likelihood of human error in that configuration granting potentially dangerous permissions to some users Farm Access Permission Hook \u00b6 Another strategy involves using the provided roles, but leveraging the hook_farm_access_perms hook from another module to modify the permissions of those roles. The documentation for that is included in the farm_access module - see farm_access/farm_access.api.php .","title":"People"},{"location":"guide/people/#people","text":"farmOS allows a farm to have multiple \"users\" accessing it, and each of those users is assigned one or more \"roles\" to grant them different levels of permission.","title":"People"},{"location":"guide/people/#roles","text":"Three roles are provided with farmOS:","title":"Roles"},{"location":"guide/people/#farm-manager","text":"Farm Managers have access to everything in farmOS. They can create areas, add assets, record logs, and change configuration.","title":"Farm Manager"},{"location":"guide/people/#farm-worker","text":"Farm Workers have most of the same permissions as Managers, but they cannot change configuration.","title":"Farm Worker"},{"location":"guide/people/#farm-viewer","text":"Farm Viewers are limited to viewing farmOS areas, assets, and logs - but they cannot edit anything. The Farm Viewer role is useful if you want to share your farm's activities with someone, but you don't want to give them the ability to make changes. For example, if you are applying for Organic certification in the United States, you can create a user with the Farm Viewer role for your certifying agent, so they can log into your farmOS and see your records.","title":"Farm Viewer"},{"location":"guide/people/#advanced-role-customization","text":"Permissions for the provided roles cannot be modified through the admin UI since they are controlled by the Farm Access Roles module. This is not generally an issue since the provided roles have been carefully tailored to work for most applications. However if required, there are three options for customizing user permissions:","title":"Advanced Role Customization"},{"location":"guide/people/#additional-roles","text":"The simplest way to create custom user permissions is to use a few additional roles along with the provided ones. With this strategy, users are given the minimum required permissions using the provided roles then granted any further permissions via custom additional roles that are manually configured. For example, suppose some users who have the Farm Worker role but not the Farm Manager role need to be able to Configure farm reports - which they cannot do with their current Farm Worker role. One option would be to make them all Farm Managers. However, this could be confusing or risky if it doesn't match their real-world role or trust level. Instead a new role called \"Farm Report Manager\" (the name is arbitrary) can be created and given permission to Configure farm reports. This new role can then be selectively given to just those users who need the additional set of permissions.","title":"Additional Roles"},{"location":"guide/people/#alternate-roles","text":"In some cases where significantly different permissions are required than default provided roles, it may be preferable to disable the Farm Access Roles module and create alternate roles manually - or through a custom module. For example, suppose some users are responsible only for animals and other users are responsible only for plantings. One option would be to make them all Farm Workers or use the above strategy of additional roles to give those users only the required permissions on top of the Farm Viewer role. However, in some scenarios it may be desirable to make alternate roles which completely supercede the provided ones. This carries some advantages; Allows role naming and structure to more directly match an organizations' May allow closer adherance to the Principle of Least Privilege where the existing roles are overly permissive for most users But also some disadvantages; The alternate roles have to be manually maintained over time - including across farmOS version upgrades which may imply permission changes for all features to work or continue working All the permissions for the alternate roles have to be manually configured which increases the likelihood of human error in that configuration granting potentially dangerous permissions to some users","title":"Alternate Roles"},{"location":"guide/people/#farm-access-permission-hook","text":"Another strategy involves using the provided roles, but leveraging the hook_farm_access_perms hook from another module to modify the permissions of those roles. The documentation for that is included in the farm_access module - see farm_access/farm_access.api.php .","title":"Farm Access Permission Hook"},{"location":"guide/quantity/","text":"Quantity measurements \u00b6 Most logs in farmOS have the ability to record structured quantity measurements alongside other details. These can be used to collect data about your farm activities in an organized way, which can be analyzed later to provide insights. Quantity measurements can be added via the \"Quantity\" field on logs. More than one quantity measurement can be added to a single log. The \"Quantity\" field consists of four optional sub-fields: Measure - What type of measurement is this? Eg: Weight, Volume, Count, Temperature, etc. Value - The measurement value (a number). Units - The unit of measure. This can be anything you like, but it's always good to keep your units consistent, as much as possible, for later analysis. Label - Labels are just a text field that allow you to add an additional note to the quantity measurement. This is helpful if you have multiple quantities of the same measure. Quantity report \u00b6 A single log in farmOS can have multiple quantity measurements, but when viewing a list of logs only the first quantity measurement will be displayed. A special \"Quantity Report\" module is provided specifically for querying logged quantity measurements . This allows you to specify filter criteria and generate a list of quantity measurements that can be viewed in farmOS or exported to a CSV file. This provides a very flexible approach to gathering ongoing quantitative data on your farm, and then analyzing it for trends over time. This module is still in \"beta\", and more filters/capabilities are being added. If you have ideas, please create feature requests on GitHub . It is not enabled by default when farmOS is installed, so you need to turn it on in order to use it.","title":"Quantity measurements"},{"location":"guide/quantity/#quantity-measurements","text":"Most logs in farmOS have the ability to record structured quantity measurements alongside other details. These can be used to collect data about your farm activities in an organized way, which can be analyzed later to provide insights. Quantity measurements can be added via the \"Quantity\" field on logs. More than one quantity measurement can be added to a single log. The \"Quantity\" field consists of four optional sub-fields: Measure - What type of measurement is this? Eg: Weight, Volume, Count, Temperature, etc. Value - The measurement value (a number). Units - The unit of measure. This can be anything you like, but it's always good to keep your units consistent, as much as possible, for later analysis. Label - Labels are just a text field that allow you to add an additional note to the quantity measurement. This is helpful if you have multiple quantities of the same measure.","title":"Quantity measurements"},{"location":"guide/quantity/#quantity-report","text":"A single log in farmOS can have multiple quantity measurements, but when viewing a list of logs only the first quantity measurement will be displayed. A special \"Quantity Report\" module is provided specifically for querying logged quantity measurements . This allows you to specify filter criteria and generate a list of quantity measurements that can be viewed in farmOS or exported to a CSV file. This provides a very flexible approach to gathering ongoing quantitative data on your farm, and then analyzing it for trends over time. This module is still in \"beta\", and more filters/capabilities are being added. If you have ideas, please create feature requests on GitHub . It is not enabled by default when farmOS is installed, so you need to turn it on in order to use it.","title":"Quantity report"},{"location":"guide/quick/","text":"Quick forms \u00b6 farmOS provides a framework for building \"quick forms\" for common data entry needs. This allows a simplified and focused UI to be provided for fast and easy recording of common events, while maintaining the underlying flexibility of the generalized asset and log data architecture. If you have the \"Farm Quick\" module enabled, you will see a new \"Quick\" tab on the farmOS dashboard. This will have sub-tabs for each quick form that is available. farmOS modules can provide their own quick forms which will show up here. It is also possible to enable/disable quick forms provided by modules, so that ones you don't need are not cluttering the menu structure. Included with farmOS \u00b6 The following quick forms are included with farmOS: Planting - See: /guide/assets/plantings/#planting-quick-form Birth - See: /guide/assets/animals/#animal-logs Milk - For recording milk harvests. Soil amendment - For recording nutrient amendments made to areas. Soil disturbance - For recording tillage, cultivation, or other soil disturbance events to areas.","title":"Quick forms"},{"location":"guide/quick/#quick-forms","text":"farmOS provides a framework for building \"quick forms\" for common data entry needs. This allows a simplified and focused UI to be provided for fast and easy recording of common events, while maintaining the underlying flexibility of the generalized asset and log data architecture. If you have the \"Farm Quick\" module enabled, you will see a new \"Quick\" tab on the farmOS dashboard. This will have sub-tabs for each quick form that is available. farmOS modules can provide their own quick forms which will show up here. It is also possible to enable/disable quick forms provided by modules, so that ones you don't need are not cluttering the menu structure.","title":"Quick forms"},{"location":"guide/quick/#included-with-farmos","text":"The following quick forms are included with farmOS: Planting - See: /guide/assets/plantings/#planting-quick-form Birth - See: /guide/assets/animals/#animal-logs Milk - For recording milk harvests. Soil amendment - For recording nutrient amendments made to areas. Soil disturbance - For recording tillage, cultivation, or other soil disturbance events to areas.","title":"Included with farmOS"},{"location":"guide/assets/","text":"Managing assets \u00b6 All the important and valuable things on your farm are represented as \"assets\" in farmOS. Assets include Plantings, Animals, Equipment, etc. Assets are organized into different sections in the farmOS interface, and can be accessed from the main menu. You can add assets from within each asset type's dashboard. Asset fields \u00b6 Each asset type will have it's own set of fields, but some of the common ones include: Name (required) - The name of the asset. Location - This is actually not a real field. It is a shortcut for creating a log that assigns the asset to a location. For more information see Movements and location . Photos - This field lets you attach photos to your asset. Description - This is a simple text tield that you can use to describe each asset in further detail. It can be used to take notes, but it is recommended that any activities be recorded using logs instead, because they have a timestamp associated with them. Flags - Flags can be added to assets (as well as logs and areas) for easier searching/filtering. Some flags are provided by default (eg: \"Prioity\", \"Needs Review\", \"Monitor\"), and modules can provide additional flags (eg: \"Organic\" and \"Not Organic\" provided by the Organic module ). Asset cluster maps \u00b6 In the dashboard of each asset, there is an \"asset cluster map\" that displays counts of assets in a map, along with the geometries of their locations. They are called \"cluster\" maps because they use a feature of the Openlayers mapping library called a \"Cluster source\". This means that the location of all assets of a particular type (eg: animals) are loaded into a map at once, and they are \"clustered\" into points based on their proximity to one another. So if you have 20 animals all within the same relative area, you will see a single point with a \"20\" on it. You can click on that point to see a list of the animals, and if you zoom in, that point will automatically break up into multiple other cluster points, showing more precise locations. Here's a little more nitty-gritty on how this works: logs are used to record the location of assets in farmOS , along with a geometry field for storing precise geodata about location. This geometry is being loaded into cluster maps twice. The first is to draw the actual geometry of the asset location. And the second is to generate the cluster points. The points themselves are just the \"centroid\" of the geometry itself - which basically means it's the average centerpoint, represented in latitude and longitude. So by displaying both the actual geometry, and the centroid points, you're able to get a very nice overview of exactly where assets are on your farm. Pretty cool huh? Archiving assets \u00b6 Assets can be archived so they do not show in farmOS unless you specifically want to see them. So for example, when you are done harvesting a planting, you can mark it as \"archived\" to hide it in the list of plantings. Archived records can be retrieved using the \"Filters\" options on asset listing pages. Cloning assets \u00b6 Assets can be cloned by selecting one or more in a list and clicking the \"Clone\" button that appears at the bottom. This will clone the asset record(s), but will not clone the logs that are associated with them.","title":"Introduction"},{"location":"guide/assets/#managing-assets","text":"All the important and valuable things on your farm are represented as \"assets\" in farmOS. Assets include Plantings, Animals, Equipment, etc. Assets are organized into different sections in the farmOS interface, and can be accessed from the main menu. You can add assets from within each asset type's dashboard.","title":"Managing assets"},{"location":"guide/assets/#asset-fields","text":"Each asset type will have it's own set of fields, but some of the common ones include: Name (required) - The name of the asset. Location - This is actually not a real field. It is a shortcut for creating a log that assigns the asset to a location. For more information see Movements and location . Photos - This field lets you attach photos to your asset. Description - This is a simple text tield that you can use to describe each asset in further detail. It can be used to take notes, but it is recommended that any activities be recorded using logs instead, because they have a timestamp associated with them. Flags - Flags can be added to assets (as well as logs and areas) for easier searching/filtering. Some flags are provided by default (eg: \"Prioity\", \"Needs Review\", \"Monitor\"), and modules can provide additional flags (eg: \"Organic\" and \"Not Organic\" provided by the Organic module ).","title":"Asset fields"},{"location":"guide/assets/#asset-cluster-maps","text":"In the dashboard of each asset, there is an \"asset cluster map\" that displays counts of assets in a map, along with the geometries of their locations. They are called \"cluster\" maps because they use a feature of the Openlayers mapping library called a \"Cluster source\". This means that the location of all assets of a particular type (eg: animals) are loaded into a map at once, and they are \"clustered\" into points based on their proximity to one another. So if you have 20 animals all within the same relative area, you will see a single point with a \"20\" on it. You can click on that point to see a list of the animals, and if you zoom in, that point will automatically break up into multiple other cluster points, showing more precise locations. Here's a little more nitty-gritty on how this works: logs are used to record the location of assets in farmOS , along with a geometry field for storing precise geodata about location. This geometry is being loaded into cluster maps twice. The first is to draw the actual geometry of the asset location. And the second is to generate the cluster points. The points themselves are just the \"centroid\" of the geometry itself - which basically means it's the average centerpoint, represented in latitude and longitude. So by displaying both the actual geometry, and the centroid points, you're able to get a very nice overview of exactly where assets are on your farm. Pretty cool huh?","title":"Asset cluster maps"},{"location":"guide/assets/#archiving-assets","text":"Assets can be archived so they do not show in farmOS unless you specifically want to see them. So for example, when you are done harvesting a planting, you can mark it as \"archived\" to hide it in the list of plantings. Archived records can be retrieved using the \"Filters\" options on asset listing pages.","title":"Archiving assets"},{"location":"guide/assets/#cloning-assets","text":"Assets can be cloned by selecting one or more in a list and clicking the \"Clone\" button that appears at the bottom. This will clone the asset record(s), but will not clone the logs that are associated with them.","title":"Cloning assets"},{"location":"guide/assets/animals/","text":"Animals \u00b6 farmOS can be used to manage animal/livestock records. An \"Animal\" asset type is provided for representing animal records, and all of the standard farmOS log types can be used to record events and activities. Animal records can be used to represent either individual animals, or multiple animals (see \"Inventory / head counts\" below). Species/breeds \u00b6 When you create an animal asset, you will need to define what species/breed it is. Species/breeds represent the various types of animals you manage. These can be very general names (eg: \"Cattle\") or more specific breeds (eg: \"Jersey cattle\"). Animal groups/herds \u00b6 Animals can also be organized into groups using the Group asset type. This is useful if you always manage certain animals together. It is also possible to assign animals to more than one group. This can be used in many different ways to help manage large numbers of animals in farmOS. See the Group asset guide to learn more. Inventory / head counts \u00b6 A single animal record can be used for managing more than one animal. This is useful in cases where animals don't need to be tracked individually, for instance with flocks of birds or heads of cattle (where individual tagging is not necessary for record keeping purposes). To learn how to use inventory adjustments to track animal head counts over time, read the inventory use guide. Q: Should I use inventory or groups for my animals? This comes down to whether or not you need to maintain separate records for individual animals. If you do, then create a separate animal asset for each animal, and you can optionally organize them into group assets after that. If you don't need individual animal records, you can create a single animal asset and use the inventory features to track a head count over time with logs. Or, you could do both! Perhaps you have a herd (group asset) with some individual animals, and some larger groups of animals (head count). It's just a matter of how granular you need your record keeping to be. Movements \u00b6 Animals can be moved from place to place in farmOS using movement logs . You can also filter your animal list down to animals within a certain group, select all, and create a combined movement log for all of them at once. This is a great way to manage grazing records as you move animals from paddock to paddock. For more general information on moving assets in farmOS, read the page on movements and location . Animal logs \u00b6 In addition to the standard log types that all farmOS assets share (activities, observations, inputs, and harvests), the livestock module provides two additional log types that are specific to animals: Birth logs can be used to record the birth of one or more animals on the farm. Birth logs can optionally reference the mother animal, and when they are saved they will automatically update the \"Parents\" and \"Date of birth\" fields on all referenced child animals. You can view a list of a mother's birth logs from her page, as well as add new ones. The \"Date of birth\" field on animal records will automatically link back to their birth log (if one exists). The child animal asset records must be created before the birth log, so that they can be referenced, but the livestock module also provides a \"Birth\" quick form that will create the children and birth log all in one step. Medical logs can be used to record animal health records. This can be a veterinary visit, administering medicine/vaccinations, or other medical procedures. You can also use standard Input logs when administering medicine or vaccinations, if you prefer, and reserve Medical logs for more serious events/procedures.","title":"Animals"},{"location":"guide/assets/animals/#animals","text":"farmOS can be used to manage animal/livestock records. An \"Animal\" asset type is provided for representing animal records, and all of the standard farmOS log types can be used to record events and activities. Animal records can be used to represent either individual animals, or multiple animals (see \"Inventory / head counts\" below).","title":"Animals"},{"location":"guide/assets/animals/#speciesbreeds","text":"When you create an animal asset, you will need to define what species/breed it is. Species/breeds represent the various types of animals you manage. These can be very general names (eg: \"Cattle\") or more specific breeds (eg: \"Jersey cattle\").","title":"Species/breeds"},{"location":"guide/assets/animals/#animal-groupsherds","text":"Animals can also be organized into groups using the Group asset type. This is useful if you always manage certain animals together. It is also possible to assign animals to more than one group. This can be used in many different ways to help manage large numbers of animals in farmOS. See the Group asset guide to learn more.","title":"Animal groups/herds"},{"location":"guide/assets/animals/#inventory-head-counts","text":"A single animal record can be used for managing more than one animal. This is useful in cases where animals don't need to be tracked individually, for instance with flocks of birds or heads of cattle (where individual tagging is not necessary for record keeping purposes). To learn how to use inventory adjustments to track animal head counts over time, read the inventory use guide. Q: Should I use inventory or groups for my animals? This comes down to whether or not you need to maintain separate records for individual animals. If you do, then create a separate animal asset for each animal, and you can optionally organize them into group assets after that. If you don't need individual animal records, you can create a single animal asset and use the inventory features to track a head count over time with logs. Or, you could do both! Perhaps you have a herd (group asset) with some individual animals, and some larger groups of animals (head count). It's just a matter of how granular you need your record keeping to be.","title":"Inventory / head counts"},{"location":"guide/assets/animals/#movements","text":"Animals can be moved from place to place in farmOS using movement logs . You can also filter your animal list down to animals within a certain group, select all, and create a combined movement log for all of them at once. This is a great way to manage grazing records as you move animals from paddock to paddock. For more general information on moving assets in farmOS, read the page on movements and location .","title":"Movements"},{"location":"guide/assets/animals/#animal-logs","text":"In addition to the standard log types that all farmOS assets share (activities, observations, inputs, and harvests), the livestock module provides two additional log types that are specific to animals: Birth logs can be used to record the birth of one or more animals on the farm. Birth logs can optionally reference the mother animal, and when they are saved they will automatically update the \"Parents\" and \"Date of birth\" fields on all referenced child animals. You can view a list of a mother's birth logs from her page, as well as add new ones. The \"Date of birth\" field on animal records will automatically link back to their birth log (if one exists). The child animal asset records must be created before the birth log, so that they can be referenced, but the livestock module also provides a \"Birth\" quick form that will create the children and birth log all in one step. Medical logs can be used to record animal health records. This can be a veterinary visit, administering medicine/vaccinations, or other medical procedures. You can also use standard Input logs when administering medicine or vaccinations, if you prefer, and reserve Medical logs for more serious events/procedures.","title":"Animal logs"},{"location":"guide/assets/compost/","text":"Compost \u00b6 farmOS can be used to manage all types of compost production activities. The Farm Soil: Compost module provides a generic \"Compost\" asset type, which can be used with various log types to record activities, observations, inputs, harvests, etc. The compost asset can be used to represent a compost pile, windrows , vermicompost , tea , or any other form of production.","title":"Compost"},{"location":"guide/assets/compost/#compost","text":"farmOS can be used to manage all types of compost production activities. The Farm Soil: Compost module provides a generic \"Compost\" asset type, which can be used with various log types to record activities, observations, inputs, harvests, etc. The compost asset can be used to represent a compost pile, windrows , vermicompost , tea , or any other form of production.","title":"Compost"},{"location":"guide/assets/equipment/","text":"Equipment \u00b6 farmOS can be used to manage equipment assets on the farm. Equipment movements and activities can be recorded via standard log types , and a special Maintenance log type is provided specifically for keeping equipment maintenance records. Equipment logs \u00b6 In addition to the standard log types that all farmOS assets share (activities, observations, inputs, and harvests), the equipment module provides an additional log type that is specific to equipment: maintenance. Maintenance logs can be used to record when you perform maintenance on a piece of equipment. This can be a repair, a tune-up, an oil change, a cleaning, or anything thing else that is maintenance related to the proper use and functioning of the equipment. All your maintenance records can be organized, categorized, and filtered like other log types in farmOS. Equipment use logs \u00b6 When you are creating logs, you can also reference the equipment that was used. In combination with the \"assets\" field on logs, you can specify which assets received the action, and which equipment assets performed it. You will then see a list of \"Equipment use logs\" on each equipment record, so you can track when it was used. Suggested uses \u00b6 Use activity logs to record equipment use. Keep track of equipment location with movements . Record oil changes, repairs, and inspections with maintenance logs. Track fuel usage with input logs.","title":"Equipment"},{"location":"guide/assets/equipment/#equipment","text":"farmOS can be used to manage equipment assets on the farm. Equipment movements and activities can be recorded via standard log types , and a special Maintenance log type is provided specifically for keeping equipment maintenance records.","title":"Equipment"},{"location":"guide/assets/equipment/#equipment-logs","text":"In addition to the standard log types that all farmOS assets share (activities, observations, inputs, and harvests), the equipment module provides an additional log type that is specific to equipment: maintenance. Maintenance logs can be used to record when you perform maintenance on a piece of equipment. This can be a repair, a tune-up, an oil change, a cleaning, or anything thing else that is maintenance related to the proper use and functioning of the equipment. All your maintenance records can be organized, categorized, and filtered like other log types in farmOS.","title":"Equipment logs"},{"location":"guide/assets/equipment/#equipment-use-logs","text":"When you are creating logs, you can also reference the equipment that was used. In combination with the \"assets\" field on logs, you can specify which assets received the action, and which equipment assets performed it. You will then see a list of \"Equipment use logs\" on each equipment record, so you can track when it was used.","title":"Equipment use logs"},{"location":"guide/assets/equipment/#suggested-uses","text":"Use activity logs to record equipment use. Keep track of equipment location with movements . Record oil changes, repairs, and inspections with maintenance logs. Track fuel usage with input logs.","title":"Suggested uses"},{"location":"guide/assets/groups/","text":"Groups \u00b6 A Group asset type is provided for organizing other assets into groups. This provides a lot of flexibility in managing and organizing your assets. Logs can reference the group asset, instead of all the individual members. This is useful when managing herds of animals. Each herd can be represented as a group asset, with animal records assigned to it. A movement log can be used to move the whole group, instead of referencing animal assets individually. You can also use groups to organize equipment, plantings, or any other asset type. It's even possible to have groups within groups, to create a hierarchy of group membership. Group membership is assigned to assets via logs, in very much the same way that location is. You can assign assets to a group via the \"Group membership\" fields on Activity and Observation logs. This specifies that the asset(s) became members of the group at the time of the log. Therefore, assets can also change their membership over time, moving from one group to another. One example where this is useful is in managing cattle: you may have a group of mothers with calves, a group of weaned calves, and other groups of steers, heifers, etc. As a calf grows up, weans, and perhaps has their own calf, they can be moved from group to group, and the full history of their group membership is saved as logs.","title":"Groups"},{"location":"guide/assets/groups/#groups","text":"A Group asset type is provided for organizing other assets into groups. This provides a lot of flexibility in managing and organizing your assets. Logs can reference the group asset, instead of all the individual members. This is useful when managing herds of animals. Each herd can be represented as a group asset, with animal records assigned to it. A movement log can be used to move the whole group, instead of referencing animal assets individually. You can also use groups to organize equipment, plantings, or any other asset type. It's even possible to have groups within groups, to create a hierarchy of group membership. Group membership is assigned to assets via logs, in very much the same way that location is. You can assign assets to a group via the \"Group membership\" fields on Activity and Observation logs. This specifies that the asset(s) became members of the group at the time of the log. Therefore, assets can also change their membership over time, moving from one group to another. One example where this is useful is in managing cattle: you may have a group of mothers with calves, a group of weaned calves, and other groups of steers, heifers, etc. As a calf grows up, weans, and perhaps has their own calf, they can be moved from group to group, and the full history of their group membership is saved as logs.","title":"Groups"},{"location":"guide/assets/plantings/","text":"Plantings \u00b6 farmOS can be used for very fine-grained crop planning and record keeping. It can be used by large or small operations, nurseries, seed producers, breeders, and home gardeners. The asset type used to manage crops is called a Planting . Plantings can be used to represent groups of plants (eg: a field of corn, or a group of seedlings), or it can be used to represent individual plants (eg: in the case of nurseries). Crops/varieties \u00b6 When you create a planting asset, you will need to define what crop/variety it is. Crops/varieties represent the various types of plantings you grow. These can be very general crop names (eg: \"Broccoli\") or very specific breeds or varieties (eg: \"Belstar F1 Organic Broccoli\"). Plantings are the specific asset you are growing, whereas crops/varieties are used to categorize and define planting types. You may have multiple plantings of the same crop/variety. Consider the following example: 1 pound of red lettuce seed was purchased and seeded 4 times over the course of 8 weeks (every two weeks). In this example, there would be 4 planting assets with a crop/variety of \"Red lettuce\": 2017 Red lettuce planting 1 2017 Red lettuce planting 2 2017 Red lettuce planting 3 2017 Red lettuce planting 4 The way you name your plantings is up to you - this is just an example. Including the year at the beginning and the planting number at the end is helpful when you are looking at long lists of plantings. Planting logs \u00b6 In addition to the standard log types that all farmOS assets share (activities, observations, inputs, and harvests), there are two log types that are specific to plantings: seedings and transplantings. Seeding logs represent when seeds were planted in the ground or in containers. With a seeding log, you can specify the seeding quantity (eg: 100 lbs, 20 72-plug trays, etc), and you can specify where the seeding occurred (using the movement fields ) so that farmOS knows where the planting asset is located. Transplanting logs represent when a planting was transplanted from one place to another. Similar to seeding logs, transplantings can have a quantity and a location. If you are direct seeding into the field, you may only use the seeding log. If you are purchasing starts from another grower, you may only use the transplanting log. If you are starting your plantings in a greenhouse and then planting them out in the field, you may use both a seeding and transplanting log. Planting quick form \u00b6 A quick form is provided for quickly creating a planting along with associated seeding and/or transplanting logs. This is the fastest way to create all of those records in a single step. You simply enter the season, crop/variety, and seeding/transplanting date+location, and all the records are created and linked together for you behind the scenes. This is helpful for adding your planned plantings at the beginning of the season, or for entering information about your past plantings at the end of the season.","title":"Plantings"},{"location":"guide/assets/plantings/#plantings","text":"farmOS can be used for very fine-grained crop planning and record keeping. It can be used by large or small operations, nurseries, seed producers, breeders, and home gardeners. The asset type used to manage crops is called a Planting . Plantings can be used to represent groups of plants (eg: a field of corn, or a group of seedlings), or it can be used to represent individual plants (eg: in the case of nurseries).","title":"Plantings"},{"location":"guide/assets/plantings/#cropsvarieties","text":"When you create a planting asset, you will need to define what crop/variety it is. Crops/varieties represent the various types of plantings you grow. These can be very general crop names (eg: \"Broccoli\") or very specific breeds or varieties (eg: \"Belstar F1 Organic Broccoli\"). Plantings are the specific asset you are growing, whereas crops/varieties are used to categorize and define planting types. You may have multiple plantings of the same crop/variety. Consider the following example: 1 pound of red lettuce seed was purchased and seeded 4 times over the course of 8 weeks (every two weeks). In this example, there would be 4 planting assets with a crop/variety of \"Red lettuce\": 2017 Red lettuce planting 1 2017 Red lettuce planting 2 2017 Red lettuce planting 3 2017 Red lettuce planting 4 The way you name your plantings is up to you - this is just an example. Including the year at the beginning and the planting number at the end is helpful when you are looking at long lists of plantings.","title":"Crops/varieties"},{"location":"guide/assets/plantings/#planting-logs","text":"In addition to the standard log types that all farmOS assets share (activities, observations, inputs, and harvests), there are two log types that are specific to plantings: seedings and transplantings. Seeding logs represent when seeds were planted in the ground or in containers. With a seeding log, you can specify the seeding quantity (eg: 100 lbs, 20 72-plug trays, etc), and you can specify where the seeding occurred (using the movement fields ) so that farmOS knows where the planting asset is located. Transplanting logs represent when a planting was transplanted from one place to another. Similar to seeding logs, transplantings can have a quantity and a location. If you are direct seeding into the field, you may only use the seeding log. If you are purchasing starts from another grower, you may only use the transplanting log. If you are starting your plantings in a greenhouse and then planting them out in the field, you may use both a seeding and transplanting log.","title":"Planting logs"},{"location":"guide/assets/plantings/#planting-quick-form","text":"A quick form is provided for quickly creating a planting along with associated seeding and/or transplanting logs. This is the fastest way to create all of those records in a single step. You simply enter the season, crop/variety, and seeding/transplanting date+location, and all the records are created and linked together for you behind the scenes. This is helpful for adding your planned plantings at the beginning of the season, or for entering information about your past plantings at the end of the season.","title":"Planting quick form"},{"location":"guide/assets/sensors/","text":"Sensors \u00b6 In addition to manually-entered records, farmOS also provides a framework for receiving data from automated environmental sensors. The Farm Sensor module adds a Sensor asset type, which can be tracked like any other asset. Sub-modules (like Farm Sensor: Listener ) extend the Sensor asset type by providing integration with external devices. Additional modules can be built to connect to specific types of sensors, if necessary. It is possible to assemble your own sensors with inexpensive components and send their data to farmOS without any soldering or programming. Farm Sensor: Listener \u00b6 The Farm Sensor: Listener module is a general-purpose sensor sub-module that provides a simple \"Listener\" sensor type. Each sensor asset that is denoted as a listener receives a unique URL with a public and private key that data can be pushed to using standard HTTP requests with JSON -encoded data. Data is stored in the database and is displayed in graphs and in table format in the sensor asset within farmOS. Data can be exported to CSV, or queried via the API (see below). The listener module is useful for simple data streams. For more complex data, a more customized sub-module may be necessary. Posting data to a listener \u00b6 Data can be posted to the listener using a standard HTTP request. Each sensor will have a unique URL endpoint, which contains both the public key (as part of the address), and the private key (as a URL query paramter). This can be found in the configuration settings for the sensor asset within farmOS. It is recommended that you serve farmOS over an HTTPS connection, so that the keys are encrypted in transit. URL example: https://myfarm.farmos.net/farm/sensor/listener/xxxxxx?private_key=yyyyyy The endpoint expects a JSON object with name/value pairs, and an optional timestamp. JSON example: { \"timestamp\": 1541519720, \"value\": 76.5 } If the timestamp is omitted, farmOS will assign the data a timestamp based on the time that the request is received. JSON without timestamp: { \"value\": 76.5 } Multiple sensor values can be included in each request (if a device measures more than one metric, for example). The name given to each value can be any string of numbers and letters other than \"timestamp\", which is reserved. Each name/value pair will be stored in a separate row in the database. JSON with multiple values: { \"timestamp\": 1541519720, \"temperature\": 76.5, \"humidity\": 60 } The following curl command demonstrates how to post simple data to a sensor from the command-line. curl -H \"Content-Type: application/json\" -X POST \\ -d '{ \"timestamp\": 1541519720, \"value\": 76.5 }' \\ https://myfarm.farmos.net/farm/sensor/listener/xxxxxx?private_key=yyyyyy Pulling data from a listener \u00b6 Data can also be retrived from the sensor via the same API endpoint, using a GET request instead of a POST request. The URL is the same as the URL for posting data. URL example: https://myfarm.farmos.net/farm/sensor/listener/xxxxxx?private_key=yyyyyy The private key must be included, unless public API read access is allowed (see below). Only the most recent data point will be returned, unless additional query parameters are provided for limiting/filtering the data. Available parameters include: name : Filter to data with a matching name. start : Filter data to timestamps greater than or equal to this start timestamp. end : Filter data to timestamps less than or equal to this end timestamp. limit : The number of results to return. See \"Limits\" below for details. offset : The value to start at. Example filtered by name: https://myfarm.farmos.net/farm/sensor/listener/xxxxxx?private_key=yyyyyy&name=temperature Limits The limit parameter can be used to specify how many data points should be returned. Setting limit to 0 will return the maximum number of points, which is capped at 100000 (to prevent memory exhaustion). If more data is desired, multiple requests should be made using the offset parameter. Setting limit to a value greater than the max will result in a response code of 422 Unprocessable Entity: exceeds max limit of 100000 . Data summary info It's also possible to retrieve summary information about the data stored for a particular sensor by adding /summary to the end of the sensor's URL. This will list each unique name used in the data, along with the total count of values and the first and last timestamp for each. For example: https://myfarm.farmos.net/farm/sensor/listener/xxxxxx/summary?private_key=yyyyyy Example JSON response: { \"humid\": { \"count\": 100, \"first\": \"1541117473\", \"last\": \"1594911898\" }, \"temp\": { \"count\": 100, \"first\":\"1541117473\", \"last\":\"1594911898\" } } Allowing public API read access Data in farmOS is private by default. A private key is required to push data to a sensor, and by default the same key is also required to pull data. If you want to access your sensor data outside of farmOS, you should be careful not to leak your private key, because that would allow anyone to post data to your sensor. One area where this is of particular concern is one in which you want to use a client-side language like JavaScript to pull sensor data for display on a public web page (eg: in a graph you develop yourself). Doing so runs the risk of exposing your private key, if it is included in the client-side code that is publicly visible. To allow for this use-case, you can choose to make your sensor data itself publicly available. Listener sensors have an optional configuration setting to \"Allow public API read access\". Enabling this will allow data from the sensor to be queried publicly via the API endpoint without a private key. This setting will make the data available to anyone who knows the farmOS URL and sensor public key. If more privacy is needed, it is recommended that the sensor be kept private, and server-side API requests are used instead of client-side code. GrovePi + Node Red \u00b6 If you are looking for a DIY approach to collecting sensor data that doesn't require soldering or coding check out this guide to Collecting sensor data in farmOS using GrovePi and Node-RED on Farm Hack . Open Pipe Kit \u00b6 The Open Pipe Kit project provides a command-line script that can be used to push data to farmOS from various sensors using the Farm Sensor: Listener module. The following video demonstrates how to set it up. For more information about Open Pipe Kit, refer to: http://openpipekit.github.io Open Pipe Kit farmOS CLI: https://github.com/openpipekit/farmos-cli Notifications \u00b6 The Farm Sensor: Listener module comes with a basic alert notification mechanism that can be configured to send an email or text message if an incoming value is above or below a given threshold. Text messages: It is possible to send text messages by entering a special email address that corresponds to your phone number and mobile carrier. Here are the domain names used for some of the more popular phone carriers: US Cellular: [number]@email.uscc.net Verizon: [number]@vtext.com Virgin: [number]@vmobl.com AT&T: [number]@txt.att.net Nextel: [number]@messaging.nextel.com Sprint: [number]@messaging.sprintpcs.com T-Mobile: [number]@tmomail.net republic wirelsss: [number]@text.republicwireless.com Use the phone number of the person you are texting followed by the domain name corresponding to their carrier. For example, if you are sending a text message to a Nextel subscriber with the phone number 232-232-2323 , you would enter 2322322323@messaging.nextel.com .","title":"Sensors"},{"location":"guide/assets/sensors/#sensors","text":"In addition to manually-entered records, farmOS also provides a framework for receiving data from automated environmental sensors. The Farm Sensor module adds a Sensor asset type, which can be tracked like any other asset. Sub-modules (like Farm Sensor: Listener ) extend the Sensor asset type by providing integration with external devices. Additional modules can be built to connect to specific types of sensors, if necessary. It is possible to assemble your own sensors with inexpensive components and send their data to farmOS without any soldering or programming.","title":"Sensors"},{"location":"guide/assets/sensors/#farm-sensor-listener","text":"The Farm Sensor: Listener module is a general-purpose sensor sub-module that provides a simple \"Listener\" sensor type. Each sensor asset that is denoted as a listener receives a unique URL with a public and private key that data can be pushed to using standard HTTP requests with JSON -encoded data. Data is stored in the database and is displayed in graphs and in table format in the sensor asset within farmOS. Data can be exported to CSV, or queried via the API (see below). The listener module is useful for simple data streams. For more complex data, a more customized sub-module may be necessary.","title":"Farm Sensor: Listener"},{"location":"guide/assets/sensors/#posting-data-to-a-listener","text":"Data can be posted to the listener using a standard HTTP request. Each sensor will have a unique URL endpoint, which contains both the public key (as part of the address), and the private key (as a URL query paramter). This can be found in the configuration settings for the sensor asset within farmOS. It is recommended that you serve farmOS over an HTTPS connection, so that the keys are encrypted in transit. URL example: https://myfarm.farmos.net/farm/sensor/listener/xxxxxx?private_key=yyyyyy The endpoint expects a JSON object with name/value pairs, and an optional timestamp. JSON example: { \"timestamp\": 1541519720, \"value\": 76.5 } If the timestamp is omitted, farmOS will assign the data a timestamp based on the time that the request is received. JSON without timestamp: { \"value\": 76.5 } Multiple sensor values can be included in each request (if a device measures more than one metric, for example). The name given to each value can be any string of numbers and letters other than \"timestamp\", which is reserved. Each name/value pair will be stored in a separate row in the database. JSON with multiple values: { \"timestamp\": 1541519720, \"temperature\": 76.5, \"humidity\": 60 } The following curl command demonstrates how to post simple data to a sensor from the command-line. curl -H \"Content-Type: application/json\" -X POST \\ -d '{ \"timestamp\": 1541519720, \"value\": 76.5 }' \\ https://myfarm.farmos.net/farm/sensor/listener/xxxxxx?private_key=yyyyyy","title":"Posting data to a listener"},{"location":"guide/assets/sensors/#pulling-data-from-a-listener","text":"Data can also be retrived from the sensor via the same API endpoint, using a GET request instead of a POST request. The URL is the same as the URL for posting data. URL example: https://myfarm.farmos.net/farm/sensor/listener/xxxxxx?private_key=yyyyyy The private key must be included, unless public API read access is allowed (see below). Only the most recent data point will be returned, unless additional query parameters are provided for limiting/filtering the data. Available parameters include: name : Filter to data with a matching name. start : Filter data to timestamps greater than or equal to this start timestamp. end : Filter data to timestamps less than or equal to this end timestamp. limit : The number of results to return. See \"Limits\" below for details. offset : The value to start at. Example filtered by name: https://myfarm.farmos.net/farm/sensor/listener/xxxxxx?private_key=yyyyyy&name=temperature Limits The limit parameter can be used to specify how many data points should be returned. Setting limit to 0 will return the maximum number of points, which is capped at 100000 (to prevent memory exhaustion). If more data is desired, multiple requests should be made using the offset parameter. Setting limit to a value greater than the max will result in a response code of 422 Unprocessable Entity: exceeds max limit of 100000 . Data summary info It's also possible to retrieve summary information about the data stored for a particular sensor by adding /summary to the end of the sensor's URL. This will list each unique name used in the data, along with the total count of values and the first and last timestamp for each. For example: https://myfarm.farmos.net/farm/sensor/listener/xxxxxx/summary?private_key=yyyyyy Example JSON response: { \"humid\": { \"count\": 100, \"first\": \"1541117473\", \"last\": \"1594911898\" }, \"temp\": { \"count\": 100, \"first\":\"1541117473\", \"last\":\"1594911898\" } } Allowing public API read access Data in farmOS is private by default. A private key is required to push data to a sensor, and by default the same key is also required to pull data. If you want to access your sensor data outside of farmOS, you should be careful not to leak your private key, because that would allow anyone to post data to your sensor. One area where this is of particular concern is one in which you want to use a client-side language like JavaScript to pull sensor data for display on a public web page (eg: in a graph you develop yourself). Doing so runs the risk of exposing your private key, if it is included in the client-side code that is publicly visible. To allow for this use-case, you can choose to make your sensor data itself publicly available. Listener sensors have an optional configuration setting to \"Allow public API read access\". Enabling this will allow data from the sensor to be queried publicly via the API endpoint without a private key. This setting will make the data available to anyone who knows the farmOS URL and sensor public key. If more privacy is needed, it is recommended that the sensor be kept private, and server-side API requests are used instead of client-side code.","title":"Pulling data from a listener"},{"location":"guide/assets/sensors/#grovepi-node-red","text":"If you are looking for a DIY approach to collecting sensor data that doesn't require soldering or coding check out this guide to Collecting sensor data in farmOS using GrovePi and Node-RED on Farm Hack .","title":"GrovePi + Node Red"},{"location":"guide/assets/sensors/#open-pipe-kit","text":"The Open Pipe Kit project provides a command-line script that can be used to push data to farmOS from various sensors using the Farm Sensor: Listener module. The following video demonstrates how to set it up. For more information about Open Pipe Kit, refer to: http://openpipekit.github.io Open Pipe Kit farmOS CLI: https://github.com/openpipekit/farmos-cli","title":"Open Pipe Kit"},{"location":"guide/assets/sensors/#notifications","text":"The Farm Sensor: Listener module comes with a basic alert notification mechanism that can be configured to send an email or text message if an incoming value is above or below a given threshold. Text messages: It is possible to send text messages by entering a special email address that corresponds to your phone number and mobile carrier. Here are the domain names used for some of the more popular phone carriers: US Cellular: [number]@email.uscc.net Verizon: [number]@vtext.com Virgin: [number]@vmobl.com AT&T: [number]@txt.att.net Nextel: [number]@messaging.nextel.com Sprint: [number]@messaging.sprintpcs.com T-Mobile: [number]@tmomail.net republic wirelsss: [number]@text.republicwireless.com Use the phone number of the person you are texting followed by the domain name corresponding to their carrier. For example, if you are sending a text message to a Nextel subscriber with the phone number 232-232-2323 , you would enter 2322322323@messaging.nextel.com .","title":"Notifications"},{"location":"guide/contrib/","text":"Community modules \u00b6 The farmOS platform can be extended with modules built by the community. This section of the user guide contains documentation for community modules. If you have built a farmOS module and would like to include your documentation here, you can fork the farmOS.org repository on Github and create a pull request. Eggs Forest Grazing Nutrient Organic Produce Safety Weight Quick Form","title":"Introduction"},{"location":"guide/contrib/#community-modules","text":"The farmOS platform can be extended with modules built by the community. This section of the user guide contains documentation for community modules. If you have built a farmOS module and would like to include your documentation here, you can fork the farmOS.org repository on Github and create a pull request. Eggs Forest Grazing Nutrient Organic Produce Safety Weight Quick Form","title":"Community modules"},{"location":"guide/contrib/eggs/","text":"Eggs \u00b6 https://github.com/farmOS/farm_eggs The Eggs module for farmOS provides a shortcut for adding egg collection logs. If you have chickens, ducks, or other egg-laying birds, this makes it very fast and easy to record egg harvests from your phone on your way back from the coop. The shortcut form is available via an \"Eggs\" tab on the farmOS dashboard (the path will be /farm/eggs ). It allows you to specify a quantity and, optionally, a group or animal asset to associate it with. When you first install the module, the \"Group/animal\" reference field won't be available. You need to enable it on specific group or animal assets in order to see them as checkbox options. To do so, navigate to the asset you would like, click the \"Edit\" tab, and find the checkbox labeled \"This group/animal produces eggs\". Check the box, save the asset, return to the Eggs form, and you should see the asset available as an option. When you submit the egg form, a harvest log will be created with the log name, quantity, and asset reference fields filled in automatically.","title":"Eggs"},{"location":"guide/contrib/eggs/#eggs","text":"https://github.com/farmOS/farm_eggs The Eggs module for farmOS provides a shortcut for adding egg collection logs. If you have chickens, ducks, or other egg-laying birds, this makes it very fast and easy to record egg harvests from your phone on your way back from the coop. The shortcut form is available via an \"Eggs\" tab on the farmOS dashboard (the path will be /farm/eggs ). It allows you to specify a quantity and, optionally, a group or animal asset to associate it with. When you first install the module, the \"Group/animal\" reference field won't be available. You need to enable it on specific group or animal assets in order to see them as checkbox options. To do so, navigate to the asset you would like, click the \"Edit\" tab, and find the checkbox labeled \"This group/animal produces eggs\". Check the box, save the asset, return to the Eggs form, and you should see the asset available as an option. When you submit the egg form, a harvest log will be created with the log name, quantity, and asset reference fields filled in automatically.","title":"Eggs"},{"location":"guide/contrib/forest/","text":"Forest \u00b6 https://github.com/farmOS/farm_forest The Forest module for farmOS provides features for natural forest and plantation management. It includes a \"Forest Plan\" for organizing related records, and utilizes the areas, planting assets, and activity, observation, input, and harvest logs from farmOS. Forest Plans allow you to organize records for a particular set of forested areas and optionally record plantings, management activities, inventory observations, and harvests. These records can then be browsed in the context of an individual plan, or in the larger context of other farm operations.","title":"Forest"},{"location":"guide/contrib/forest/#forest","text":"https://github.com/farmOS/farm_forest The Forest module for farmOS provides features for natural forest and plantation management. It includes a \"Forest Plan\" for organizing related records, and utilizes the areas, planting assets, and activity, observation, input, and harvest logs from farmOS. Forest Plans allow you to organize records for a particular set of forested areas and optionally record plantings, management activities, inventory observations, and harvests. These records can then be browsed in the context of an individual plan, or in the larger context of other farm operations.","title":"Forest"},{"location":"guide/contrib/grazing/","text":"Grazing \u00b6 https://github.com/farmOS/farm_grazing The Grazing module for farmOS provides features for planning and recording movements of animal herds/flocks through paddocks. It includes a \"Grazing Plan\" for organizing related records, and utilizes the areas, animal and group assets, and movement logs from farmOS. Grazing Plans allow you to select a set of paddocks, enter information about their relative forage quality and recovery time, and create movements of animal herds through them. Recommendations for the number of grazing days the herds spend in each paddock are calculated based on paddock information and herd intake requirements. Group assets are used to represent herds. You must create at least one Group asset and one Animal asset inside it, as well as the Paddock areas that they will move through, before you create a plan. The planned movements are created as activity logs. They can then be browsed in the context of an individual plan, or in the larger context of other farm operations. They will automatically show up under \"Planned tasks\" on the farmOS dashboard. Plans can be archived, so you can look back on the movements from previous years without distracting from your active plans.","title":"Grazing"},{"location":"guide/contrib/grazing/#grazing","text":"https://github.com/farmOS/farm_grazing The Grazing module for farmOS provides features for planning and recording movements of animal herds/flocks through paddocks. It includes a \"Grazing Plan\" for organizing related records, and utilizes the areas, animal and group assets, and movement logs from farmOS. Grazing Plans allow you to select a set of paddocks, enter information about their relative forage quality and recovery time, and create movements of animal herds through them. Recommendations for the number of grazing days the herds spend in each paddock are calculated based on paddock information and herd intake requirements. Group assets are used to represent herds. You must create at least one Group asset and one Animal asset inside it, as well as the Paddock areas that they will move through, before you create a plan. The planned movements are created as activity logs. They can then be browsed in the context of an individual plan, or in the larger context of other farm operations. They will automatically show up under \"Planned tasks\" on the farmOS dashboard. Plans can be archived, so you can look back on the movements from previous years without distracting from your active plans.","title":"Grazing"},{"location":"guide/contrib/nutrient/","text":"Nutrient \u00b6 https://github.com/farmOS/farm_nutrient The Nutrient module for farmOS provides the ability to store nutrient management plans in farmOS. You can link it to specific areas , and upload your planning documents, spreadsheets, and other files for easy reference. A Nutrient Management dashboard is also provided, with quick links for managing soil tests, nutrient management plans, and soil amendment records. Development of this module was sponsored by the Vermont Vegetable and Berry Growers Association and the University of Vermont Extension . In the future, more nutrient management planning features may be built in this module, including integrated calculations and input recommendations. See the module's GitHub project page to suggest features or take part in the development.","title":"Nutrient"},{"location":"guide/contrib/nutrient/#nutrient","text":"https://github.com/farmOS/farm_nutrient The Nutrient module for farmOS provides the ability to store nutrient management plans in farmOS. You can link it to specific areas , and upload your planning documents, spreadsheets, and other files for easy reference. A Nutrient Management dashboard is also provided, with quick links for managing soil tests, nutrient management plans, and soil amendment records. Development of this module was sponsored by the Vermont Vegetable and Berry Growers Association and the University of Vermont Extension . In the future, more nutrient management planning features may be built in this module, including integrated calculations and input recommendations. See the module's GitHub project page to suggest features or take part in the development.","title":"Nutrient"},{"location":"guide/contrib/organic/","text":"Organic \u00b6 https://github.com/farmOS/farm_organic The Organic module for farmOS simply provides two flags that can be applied to assets, logs, and areas: Organic Not Organic This allows you to flag certain assets, areas, and logs as organic or not-organic. If you have a mostly organic operation, you may want to just flag non-organic records. Or, if you have a mostly non-organic operation, the opposite approach may be more useful (only flag organic records). You can decide how best to use the flags for your record keeping and certification needs. In the future, more organic certification features may be built in this module. See the module's GitHub project page to suggest features or take part in the development.","title":"Organic"},{"location":"guide/contrib/organic/#organic","text":"https://github.com/farmOS/farm_organic The Organic module for farmOS simply provides two flags that can be applied to assets, logs, and areas: Organic Not Organic This allows you to flag certain assets, areas, and logs as organic or not-organic. If you have a mostly organic operation, you may want to just flag non-organic records. Or, if you have a mostly non-organic operation, the opposite approach may be more useful (only flag organic records). You can decide how best to use the flags for your record keeping and certification needs. In the future, more organic certification features may be built in this module. See the module's GitHub project page to suggest features or take part in the development.","title":"Organic"},{"location":"guide/contrib/produce-safety/","text":"Produce Safety \u00b6 https://github.com/farmOS/farm_produce_safety The Produce Safety module for farmOS provides record keeping features for the FSMA Produce Safety Rule in the United States, developed in partnership with the Agricultural Engineering Program of University of Vermont Extension with financial support from the Vermont Agency of Agriculture Food & Markets ' Specialty Crop Block Grant and from the Vermont Housing & Conservation Board . The Produce Safety Rule is part of the Food Safety Modernization Act (FSMA). This regulation focuses on setting federal regulatory standards for the production, harvest, and handling of fruits and vegetables, in an effort to prevent microbial contamination and reduce foodborne illnesses associated with fresh produce. This documentation should not be considered an official list of requirements. It is only intended to help farmers become familiar with using farmOS to manage their records. For more information on guidelines, refer to the FDA's FSMA Final Rule on Produce Safety and the Produce Safety Alliance . Video walkthrough \u00b6 The following video walkthrough was produced by Chris Callahan at the University of Vermont Extension 's Agricultural Engineering Program and Michael Stenta at Farmier . Overview \u00b6 The Produce Safety module sits on top of farmOS and utilizes many of the core features, including Plantings, Equipment, Compost, and various log types. The goal is to leverage the common record keeping capabilities that are already provided by farmOS, and extend them to facilitate record keeping requirements that are specific to the Produce Safety Rule. The following documentation pages provide guidance on how to manage general farm records with farmOS: Introduction Areas Logs Assets Plantings Animals Equipment Compost People It may also be helpful to utilize the CSV Import feature of farmOS to import records from spreadsheets. The following sections describe farmOS features specific to the Produce Safety module. Dashboard \u00b6 The module provides a Produce Safety Dashboard (available as a tab within the farmOS dashboard) which acts as an organized starting point for produce safety record keeping. Documents and files that are specific to the operations food safety plan and procedures can be uploaded to the dashboard for storage and reference. Quick links are provided for managing records within each of the 5 main produce safety focus areas (described below). Logs that are added via the quick links will automatically be assigned to the \"Produce Safety\" category for easier lookup in the future (as well as additional categories that may be specific to the activity being recorded). Remember that farmOS can be used for more than just Produce Safety record keeping, so it is up to you to keep your records organized in a way that makes them easy to find for management and reporting purposes. Focus areas \u00b6 The primary goal of the Produce Safety Rule is to prevent microbial contamination and reduce foodborne illnesses associated with fresh produce. The regulatory requirements are divided into five main focus areas. Worker Health, Hygiene, and Training \u00b6 This focuses on maintaining records to demonstrate that farm workers are properly trained, are provided with stocked and sanitary facilities, and any health problems are properly documented. In addition to the core log types provided by farmOS, the Produce Safety module adds two that are specific to the Produce Safety Rule's record keeping requirements, which focus on farm workers: Training logs are used to record details about training sessions that are attended by workers on the farm. Training logs can include a list of attendees, trainer(s), and details about the material that is covered. Worker health logs are used to record incidents related to worker health. Injuries or illnesses that occur on the farm should be recorded with these logs, and should be related to the specific area(s) that they may have occurred in. Activity and/or observation logs should be used to record checking and restocking of first aid and facilities. Biological Soil Amendments \u00b6 All soil amendments should be recorded with input logs. Soil test logs should be used to keep track of any lab tests that are performed. If compost is being produced on the farm, it is necessary to keep records of production time, temperature measurements (via observation logs), and pile turnings (via activity logs), to ensure that the compost was produced in a manner that reduces the risk of biological pathogens. Logs should be tagged with both the \"Produce Safety\" and \"Compost\" or \"Soil\" categories, as appropriate. Domesticated and Wild Animals \u00b6 If domesticated animals are present on the farm, they should be managed as Animal assets in farmOS. Risk assessment should be performed (and recorded via observation logs) before planting and before harvest, to reduce the risk of contamination. If intrusions or contaminations are observed, they should be recorded as observation logs. Corrective actions should be recorded as activity logs. Logs should be tagged with both the \"Produce Safety\" and \"Animals\" categories. Agricultural Water \u00b6 Water test logs should be used to record lab tests that are performed on water. This includes both field water (pre-harvest) and water that is used to wash produce before packing (post-harvest). Any corrective actions that are taken should be recorded as activity logs with categories of both \"Produce Safety\" and \"Water\" (these categories are applied automatically by the quick links within the Produce Safety dashboard). Equipment, Tools, and Buildings \u00b6 All areas relevant to produce safety (fields, buildings, facilities, etc) can be managed as Areas in farmOS. Tools and equipment can be managed as Equipment assets. When areas or equipment are cleaned/sanitized, this should be recorded as an activity log with the \"Produce Safety\" category applied.","title":"Produce Safety"},{"location":"guide/contrib/produce-safety/#produce-safety","text":"https://github.com/farmOS/farm_produce_safety The Produce Safety module for farmOS provides record keeping features for the FSMA Produce Safety Rule in the United States, developed in partnership with the Agricultural Engineering Program of University of Vermont Extension with financial support from the Vermont Agency of Agriculture Food & Markets ' Specialty Crop Block Grant and from the Vermont Housing & Conservation Board . The Produce Safety Rule is part of the Food Safety Modernization Act (FSMA). This regulation focuses on setting federal regulatory standards for the production, harvest, and handling of fruits and vegetables, in an effort to prevent microbial contamination and reduce foodborne illnesses associated with fresh produce. This documentation should not be considered an official list of requirements. It is only intended to help farmers become familiar with using farmOS to manage their records. For more information on guidelines, refer to the FDA's FSMA Final Rule on Produce Safety and the Produce Safety Alliance .","title":"Produce Safety"},{"location":"guide/contrib/produce-safety/#video-walkthrough","text":"The following video walkthrough was produced by Chris Callahan at the University of Vermont Extension 's Agricultural Engineering Program and Michael Stenta at Farmier .","title":"Video walkthrough"},{"location":"guide/contrib/produce-safety/#overview","text":"The Produce Safety module sits on top of farmOS and utilizes many of the core features, including Plantings, Equipment, Compost, and various log types. The goal is to leverage the common record keeping capabilities that are already provided by farmOS, and extend them to facilitate record keeping requirements that are specific to the Produce Safety Rule. The following documentation pages provide guidance on how to manage general farm records with farmOS: Introduction Areas Logs Assets Plantings Animals Equipment Compost People It may also be helpful to utilize the CSV Import feature of farmOS to import records from spreadsheets. The following sections describe farmOS features specific to the Produce Safety module.","title":"Overview"},{"location":"guide/contrib/produce-safety/#dashboard","text":"The module provides a Produce Safety Dashboard (available as a tab within the farmOS dashboard) which acts as an organized starting point for produce safety record keeping. Documents and files that are specific to the operations food safety plan and procedures can be uploaded to the dashboard for storage and reference. Quick links are provided for managing records within each of the 5 main produce safety focus areas (described below). Logs that are added via the quick links will automatically be assigned to the \"Produce Safety\" category for easier lookup in the future (as well as additional categories that may be specific to the activity being recorded). Remember that farmOS can be used for more than just Produce Safety record keeping, so it is up to you to keep your records organized in a way that makes them easy to find for management and reporting purposes.","title":"Dashboard"},{"location":"guide/contrib/produce-safety/#focus-areas","text":"The primary goal of the Produce Safety Rule is to prevent microbial contamination and reduce foodborne illnesses associated with fresh produce. The regulatory requirements are divided into five main focus areas.","title":"Focus areas"},{"location":"guide/contrib/produce-safety/#worker-health-hygiene-and-training","text":"This focuses on maintaining records to demonstrate that farm workers are properly trained, are provided with stocked and sanitary facilities, and any health problems are properly documented. In addition to the core log types provided by farmOS, the Produce Safety module adds two that are specific to the Produce Safety Rule's record keeping requirements, which focus on farm workers: Training logs are used to record details about training sessions that are attended by workers on the farm. Training logs can include a list of attendees, trainer(s), and details about the material that is covered. Worker health logs are used to record incidents related to worker health. Injuries or illnesses that occur on the farm should be recorded with these logs, and should be related to the specific area(s) that they may have occurred in. Activity and/or observation logs should be used to record checking and restocking of first aid and facilities.","title":"Worker Health, Hygiene, and Training"},{"location":"guide/contrib/produce-safety/#biological-soil-amendments","text":"All soil amendments should be recorded with input logs. Soil test logs should be used to keep track of any lab tests that are performed. If compost is being produced on the farm, it is necessary to keep records of production time, temperature measurements (via observation logs), and pile turnings (via activity logs), to ensure that the compost was produced in a manner that reduces the risk of biological pathogens. Logs should be tagged with both the \"Produce Safety\" and \"Compost\" or \"Soil\" categories, as appropriate.","title":"Biological Soil Amendments"},{"location":"guide/contrib/produce-safety/#domesticated-and-wild-animals","text":"If domesticated animals are present on the farm, they should be managed as Animal assets in farmOS. Risk assessment should be performed (and recorded via observation logs) before planting and before harvest, to reduce the risk of contamination. If intrusions or contaminations are observed, they should be recorded as observation logs. Corrective actions should be recorded as activity logs. Logs should be tagged with both the \"Produce Safety\" and \"Animals\" categories.","title":"Domesticated and Wild Animals"},{"location":"guide/contrib/produce-safety/#agricultural-water","text":"Water test logs should be used to record lab tests that are performed on water. This includes both field water (pre-harvest) and water that is used to wash produce before packing (post-harvest). Any corrective actions that are taken should be recorded as activity logs with categories of both \"Produce Safety\" and \"Water\" (these categories are applied automatically by the quick links within the Produce Safety dashboard).","title":"Agricultural Water"},{"location":"guide/contrib/produce-safety/#equipment-tools-and-buildings","text":"All areas relevant to produce safety (fields, buildings, facilities, etc) can be managed as Areas in farmOS. Tools and equipment can be managed as Equipment assets. When areas or equipment are cleaned/sanitized, this should be recorded as an activity log with the \"Produce Safety\" category applied.","title":"Equipment, Tools, and Buildings"},{"location":"guide/contrib/quick-weight/","text":"Quick Weight Form \u00b6 https://github.com/Skipper-is/farm_quickweight The Quick Weight Form module for FarmOS provides an additional quick form for logging livestock weights from the Dashboard. This makes the process of logging weights very quick for single animals, and if you have to go through the whole herd. The shortcut for the form is available viathe \"Weight\" tab on the FarmOS dashboard, under Quick Forms. (You can also find the form under '/farm/quick/quickweight') It allows you to specify the weight, unit of measurement and the group or animal asset to associate it with. Once installed, you will need to enable it under Quick Forms -> Configure (/farm/quick/configure) When you submit the quick weight form, it will create an observation log with the weight information attatched to the record. It will reset the Group/animal and quantity fields ready for the next animal to be recorded.","title":"Quick Weight Form"},{"location":"guide/contrib/quick-weight/#quick-weight-form","text":"https://github.com/Skipper-is/farm_quickweight The Quick Weight Form module for FarmOS provides an additional quick form for logging livestock weights from the Dashboard. This makes the process of logging weights very quick for single animals, and if you have to go through the whole herd. The shortcut for the form is available viathe \"Weight\" tab on the FarmOS dashboard, under Quick Forms. (You can also find the form under '/farm/quick/quickweight') It allows you to specify the weight, unit of measurement and the group or animal asset to associate it with. Once installed, you will need to enable it under Quick Forms -> Configure (/farm/quick/configure) When you submit the quick weight form, it will create an observation log with the weight information attatched to the record. It will reset the Group/animal and quantity fields ready for the next animal to be recorded.","title":"Quick Weight Form"},{"location":"hosting/","text":"Getting Started \u00b6 This video provides an overview of the download and hosting options for farmOS by Michael Stenta at Farmier , how to get deeply involved with the open-source development community behind farmOS, or simply subscribe for a hosted version to start using it today. Since farmOS is a web application, it must be hosted on a web server. This is different than most apps, which you simply install on your local computer or device. In contrast, farmOS is installed on a server, and you use your various devices to access it over a network as a website. There are two ways to get started using farmOS: 1. DIY (host it yourself) \u00b6 farmOS is free software, which means you are free to download the code and host it yourself. You can also modify and extend it to fit your needs. It is built on Drupal , which is a free and open-source web application framework. Drupal runs on a web server, so it can be served to the internet 24x7. If you're familiar with websites and how to host them, you can set up a farmOS site just like a normal Drupal site. For more information, refer to the farmOS Installation Documentation . 2. Subscription hosting \u00b6 Farmier is a subscription hosting service, started by the creator of farmOS. Farmier provides hosting, automatic updates, backups, SSL security, and other features. Subscriptions help to support the continued development of farmOS, and are an easy way to get up and running with farmOS quickly.","title":"Getting started"},{"location":"hosting/#getting-started","text":"This video provides an overview of the download and hosting options for farmOS by Michael Stenta at Farmier , how to get deeply involved with the open-source development community behind farmOS, or simply subscribe for a hosted version to start using it today. Since farmOS is a web application, it must be hosted on a web server. This is different than most apps, which you simply install on your local computer or device. In contrast, farmOS is installed on a server, and you use your various devices to access it over a network as a website. There are two ways to get started using farmOS:","title":"Getting Started"},{"location":"hosting/#1-diy-host-it-yourself","text":"farmOS is free software, which means you are free to download the code and host it yourself. You can also modify and extend it to fit your needs. It is built on Drupal , which is a free and open-source web application framework. Drupal runs on a web server, so it can be served to the internet 24x7. If you're familiar with websites and how to host them, you can set up a farmOS site just like a normal Drupal site. For more information, refer to the farmOS Installation Documentation .","title":"1. DIY (host it yourself)"},{"location":"hosting/#2-subscription-hosting","text":"Farmier is a subscription hosting service, started by the creator of farmOS. Farmier provides hosting, automatic updates, backups, SSL security, and other features. Subscriptions help to support the continued development of farmOS, and are an easy way to get up and running with farmOS quickly.","title":"2. Subscription hosting"},{"location":"hosting/apikeys/","text":"API Keys \u00b6 farmOS includes optional modules for integrating with third-party services, like Google Maps and Mapbox. These modules will add additional base layers to the farmOS map. However, because these layers are hosted by third-party providers, API keys are required to use them. Instructions for getting an API key are available via the links below. Google Maps \u00b6 https://developers.google.com/maps/documentation/javascript/get-api-key Mapbox \u00b6 https://docs.mapbox.com/help/how-mapbox-works/access-tokens","title":"API Keys"},{"location":"hosting/apikeys/#api-keys","text":"farmOS includes optional modules for integrating with third-party services, like Google Maps and Mapbox. These modules will add additional base layers to the farmOS map. However, because these layers are hosted by third-party providers, API keys are required to use them. Instructions for getting an API key are available via the links below.","title":"API Keys"},{"location":"hosting/apikeys/#google-maps","text":"https://developers.google.com/maps/documentation/javascript/get-api-key","title":"Google Maps"},{"location":"hosting/apikeys/#mapbox","text":"https://docs.mapbox.com/help/how-mapbox-works/access-tokens","title":"Mapbox"},{"location":"hosting/docker/","text":"Hosting farmOS with Docker \u00b6 Docker is an open-source project that automates the deployment of applications inside software containers. - Wikipedia A farmOS Docker image is available on Docker Hub at https://hub.docker.com/r/farmos/farmos . This image contains the farmOS codebase with all dependencies. It does not include the database server, but that can be set up separately as a standalone service, or in another Docker container. Development environment \u00b6 The farmOS Docker image can be used in both development and production environments. However, a separate dev Docker image is available for development purposes. See Developing farmOS with Docker for instructions on setting up a development environment. Production environment \u00b6 If you plan to host farmOS in a production environment with Docker, it is assumed that you have experience with Docker in production already and will make decisions about how to fit it into your specific server environment. An example docker-compose.production.yml file is provided in the farmOS repository's docker directory which demonstrates the basics. You can copy and rename this to docker-compose.yml as a starting point. When new versions of farmOS are released, they are tagged on Docker hub. The latest tag is also used to point to the most recent stable release tag, although using this to automatically update is not recommended unless you also have a plan for running update.php with each update. Updating farmOS \u00b6 General instructions for updating to a new version of farmOS are described in the Updating farmOS docs. It is important to familiarize yourself with that process before considerring how to do it with Docker. Updating farmOS hosted with Docker (assuming that you are using the example docker-compose.production.yml configuration as an example) is roughly the same process, with a few exceptions: Steps 2 and 3 (downloading and unpacking the new version) are performed automatically during the Docker image build process. The farmOS codebase is built into the Docker image in /var/www/html , and the site-specific settings and files are mounted in as a volume in /var/www/html/sites , so they persist outside of the container. Drush is not installed in the farmOS Docker image. You can create a derivative image that includes Drush, if necessary. The farmOS development image does this, so you can look at docker/dev/Dockerfile in the farmOS repository as an example. With /var/www/html/sites mounted as a volume, you can simply update to a new version of the farmOS Docker image itself and then run update.php to update farmOS. Customizing php.ini settings \u00b6 It is common to need to customize certain PHP settings - such as the max upload size limit. This can be easily accomplished via a custom php.ini file mounted in the farmOS docker container. docker-compose.yml volumes: - './php-custom.ini:/usr/local/etc/php/conf.d/php-custom.ini' php-custom.ini upload_max_filesize = 10M post_max_size = 10M See the PHP configuration file documentation for more details on php.ini files.","title":"Docker"},{"location":"hosting/docker/#hosting-farmos-with-docker","text":"Docker is an open-source project that automates the deployment of applications inside software containers. - Wikipedia A farmOS Docker image is available on Docker Hub at https://hub.docker.com/r/farmos/farmos . This image contains the farmOS codebase with all dependencies. It does not include the database server, but that can be set up separately as a standalone service, or in another Docker container.","title":"Hosting farmOS with Docker"},{"location":"hosting/docker/#development-environment","text":"The farmOS Docker image can be used in both development and production environments. However, a separate dev Docker image is available for development purposes. See Developing farmOS with Docker for instructions on setting up a development environment.","title":"Development environment"},{"location":"hosting/docker/#production-environment","text":"If you plan to host farmOS in a production environment with Docker, it is assumed that you have experience with Docker in production already and will make decisions about how to fit it into your specific server environment. An example docker-compose.production.yml file is provided in the farmOS repository's docker directory which demonstrates the basics. You can copy and rename this to docker-compose.yml as a starting point. When new versions of farmOS are released, they are tagged on Docker hub. The latest tag is also used to point to the most recent stable release tag, although using this to automatically update is not recommended unless you also have a plan for running update.php with each update.","title":"Production environment"},{"location":"hosting/docker/#updating-farmos","text":"General instructions for updating to a new version of farmOS are described in the Updating farmOS docs. It is important to familiarize yourself with that process before considerring how to do it with Docker. Updating farmOS hosted with Docker (assuming that you are using the example docker-compose.production.yml configuration as an example) is roughly the same process, with a few exceptions: Steps 2 and 3 (downloading and unpacking the new version) are performed automatically during the Docker image build process. The farmOS codebase is built into the Docker image in /var/www/html , and the site-specific settings and files are mounted in as a volume in /var/www/html/sites , so they persist outside of the container. Drush is not installed in the farmOS Docker image. You can create a derivative image that includes Drush, if necessary. The farmOS development image does this, so you can look at docker/dev/Dockerfile in the farmOS repository as an example. With /var/www/html/sites mounted as a volume, you can simply update to a new version of the farmOS Docker image itself and then run update.php to update farmOS.","title":"Updating farmOS"},{"location":"hosting/docker/#customizing-phpini-settings","text":"It is common to need to customize certain PHP settings - such as the max upload size limit. This can be easily accomplished via a custom php.ini file mounted in the farmOS docker container. docker-compose.yml volumes: - './php-custom.ini:/usr/local/etc/php/conf.d/php-custom.ini' php-custom.ini upload_max_filesize = 10M post_max_size = 10M See the PHP configuration file documentation for more details on php.ini files.","title":"Customizing php.ini settings"},{"location":"hosting/googlemaps/","text":"Google Maps API Key \u00b6 This page has moved to API Keys .","title":"Google Maps API Key"},{"location":"hosting/googlemaps/#google-maps-api-key","text":"This page has moved to API Keys .","title":"Google Maps API Key"},{"location":"hosting/installing/","text":"Installation \u00b6 farmOS is a Drupal distribution , so it is essentially a Drupal codebase that combines Drupal core with a set of pre-selected contributed modules. Recomended release \u00b6 The recommended approach is to download the latest release of the pre-packaged farmOS distribution from Drupal.org. The Drupal.org packaged release is pre-built and ready to go. Just drop it into a hosted web server environment and it will work the same as Drupal. For more information on installing Drupal, see the official Drupal Installation Guide . Local development \u00b6 See farmOS on Docker . Requirements \u00b6 You will need a web server with all the basic requirements of Drupal . In addition to Drupal's basic requirements, farmOS also needs the following: PHP 7+ PHP configuration - It is recommended that you set the following PHP configuration variables, to ensure that farmOS runs smoothly. It may run fine without these settings, but some features may not work properly without them. Note that the farmOS Docker image sets these automatically. memory_limit=256M max_execution_time=240 max_input_time=240 max_input_vars=5000 Drupal configuration - Clean URLs must be enabled in Drupal. Check the configuration on the Drupal configuration page (Administration > Configuration > Search and metadata > Clean URLs) and enable Clean URLs. If running Apache web-server, mod_rewrite must be enabled. For additional instructions, see the Enable clean URLs page in Drupal Documentation. Optional dependencies \u00b6 The following are not hard requirements of farmOS, but will provide progressive enhancements if they are available. Google Maps and/or MapBox API keys are necessary for rendering the Google Maps and MapBox base layers in farmOS maps. See the API keys instructions for more information about how to set this up. If API keys are not provided, OpenStreetMap will be used as the default base layer. PHP BCMath extension is required for accurate geometric polygon area calculations. GEOS - Geometry Engine, Open Source is required by the Area Generator module. SSL Although not strictly a requirement, some features (like the \"Geolocate\" button on maps) will only work when over a secure connection. Field Kit requires SSL on your farmOS instance in order to connect to it. SSL is also recommended if you are using the Sensor Listener module to keep your sensor's private key a secret. These resources may be helpful for configuring SSL: Drupal HTTPS Information Reverse Proxy Forum Post - Includes links to related GitHub issues and examples of how others have configured reverse proxies forcing HTTPS. Configuring a Local Https Reverse Proxy - Documentation on configuring SSL for local development.","title":"Installing"},{"location":"hosting/installing/#installation","text":"farmOS is a Drupal distribution , so it is essentially a Drupal codebase that combines Drupal core with a set of pre-selected contributed modules.","title":"Installation"},{"location":"hosting/installing/#recomended-release","text":"The recommended approach is to download the latest release of the pre-packaged farmOS distribution from Drupal.org. The Drupal.org packaged release is pre-built and ready to go. Just drop it into a hosted web server environment and it will work the same as Drupal. For more information on installing Drupal, see the official Drupal Installation Guide .","title":"Recomended release"},{"location":"hosting/installing/#local-development","text":"See farmOS on Docker .","title":"Local development"},{"location":"hosting/installing/#requirements","text":"You will need a web server with all the basic requirements of Drupal . In addition to Drupal's basic requirements, farmOS also needs the following: PHP 7+ PHP configuration - It is recommended that you set the following PHP configuration variables, to ensure that farmOS runs smoothly. It may run fine without these settings, but some features may not work properly without them. Note that the farmOS Docker image sets these automatically. memory_limit=256M max_execution_time=240 max_input_time=240 max_input_vars=5000 Drupal configuration - Clean URLs must be enabled in Drupal. Check the configuration on the Drupal configuration page (Administration > Configuration > Search and metadata > Clean URLs) and enable Clean URLs. If running Apache web-server, mod_rewrite must be enabled. For additional instructions, see the Enable clean URLs page in Drupal Documentation.","title":"Requirements"},{"location":"hosting/installing/#optional-dependencies","text":"The following are not hard requirements of farmOS, but will provide progressive enhancements if they are available. Google Maps and/or MapBox API keys are necessary for rendering the Google Maps and MapBox base layers in farmOS maps. See the API keys instructions for more information about how to set this up. If API keys are not provided, OpenStreetMap will be used as the default base layer. PHP BCMath extension is required for accurate geometric polygon area calculations. GEOS - Geometry Engine, Open Source is required by the Area Generator module. SSL Although not strictly a requirement, some features (like the \"Geolocate\" button on maps) will only work when over a secure connection. Field Kit requires SSL on your farmOS instance in order to connect to it. SSL is also recommended if you are using the Sensor Listener module to keep your sensor's private key a secret. These resources may be helpful for configuring SSL: Drupal HTTPS Information Reverse Proxy Forum Post - Includes links to related GitHub issues and examples of how others have configured reverse proxies forcing HTTPS. Configuring a Local Https Reverse Proxy - Documentation on configuring SSL for local development.","title":"Optional dependencies"},{"location":"hosting/localization/","text":"Localization to another language \u00b6 Enable the Farm Localization module ( farm_l10n ) that comes with farmOS. Add your language at /admin/config/regional/language Set this new language as default language, if desired. Go to /admin/config/regional/translate/update and check manually for tranlations and update them. If there are some strings not translated, you can do it at /admin/config/regional/translate/translate and, if possible, add them to https://localize.drupal.org. You could download and install the Localization Client module to do both tasks together: https://www.drupal.org/project/l10n_client","title":"Localization"},{"location":"hosting/localization/#localization-to-another-language","text":"Enable the Farm Localization module ( farm_l10n ) that comes with farmOS. Add your language at /admin/config/regional/language Set this new language as default language, if desired. Go to /admin/config/regional/translate/update and check manually for tranlations and update them. If there are some strings not translated, you can do it at /admin/config/regional/translate/translate and, if possible, add them to https://localize.drupal.org. You could download and install the Localization Client module to do both tasks together: https://www.drupal.org/project/l10n_client","title":"Localization to another language"},{"location":"hosting/updating/","text":"Updating farmOS \u00b6 ALWAYS BACKUP YOUR DATABASE, CODE, AND FILES BEFORE ATTEMPTING AN UPDATE! New versions of farmOS will be released on a regular basis, and it's important to stay up-to-date so that you can receive new features, bug fixes, and security patches when they become available. It is recommended that you either download the officially packaged releases of farmOS from https://drupal.org/project/farm or run farmOS on Docker . This will ensure that the necessary patches are applied, and that the farmOS distribution updates are included. Note that automatic updates through Drupal's UI are disabled by farmOS See https://drupal.org/node/3136140 for more information. Security updates Occassionally there will be security updates to Drupal core and contributed modules, which will cause the following message to show in farmOS: There is a security update available for your version of Drupal. To ensure the security of your server, you should update immediately! See the available updates page for more information. When these upstream security updates are released, we update them in the development branches of farmOS as soon as possible. If the vulnerabilities are serious, we will also tag a new version release of farmOS. In many cases, a new release is not urgent because the vulnerability does not directly affect farmOS. If you would like to update before a new release is available, you can download a \" development snapshot \" from Drupal.org. Update procedure \u00b6 Updating farmOS is basically the same process as updating Drupal core . The following procedure will ensure that your update goes smoothly. Docker note : if you are hosting farmOS in Docker, see Hosting farmOS with Docker for Docker-specific update instructions. Backup your database, code, and files! Always do this before updating. Be ready and able to roll-back in the event that something goes wrong. Download the new recommended release of farmOS from https://drupal.org/project/farm Unzip the compressed folder, and replace everything in your Drupal codebase EXCEPT the /sites/ folder. Do not overwrite the /sites/ folder, because it contains content and configuration for your site. Run database updates . Optionally: Revert all Features via Drush. If you have intentionally overridden any specific farmOS configurations, then you should NOT do this. You will need to resolve any merge conflicts with farmOS core Features changes in order to complete the upgrade. See developing with updates in mind . drush fra","title":"Updating"},{"location":"hosting/updating/#updating-farmos","text":"ALWAYS BACKUP YOUR DATABASE, CODE, AND FILES BEFORE ATTEMPTING AN UPDATE! New versions of farmOS will be released on a regular basis, and it's important to stay up-to-date so that you can receive new features, bug fixes, and security patches when they become available. It is recommended that you either download the officially packaged releases of farmOS from https://drupal.org/project/farm or run farmOS on Docker . This will ensure that the necessary patches are applied, and that the farmOS distribution updates are included. Note that automatic updates through Drupal's UI are disabled by farmOS See https://drupal.org/node/3136140 for more information. Security updates Occassionally there will be security updates to Drupal core and contributed modules, which will cause the following message to show in farmOS: There is a security update available for your version of Drupal. To ensure the security of your server, you should update immediately! See the available updates page for more information. When these upstream security updates are released, we update them in the development branches of farmOS as soon as possible. If the vulnerabilities are serious, we will also tag a new version release of farmOS. In many cases, a new release is not urgent because the vulnerability does not directly affect farmOS. If you would like to update before a new release is available, you can download a \" development snapshot \" from Drupal.org.","title":"Updating farmOS"},{"location":"hosting/updating/#update-procedure","text":"Updating farmOS is basically the same process as updating Drupal core . The following procedure will ensure that your update goes smoothly. Docker note : if you are hosting farmOS in Docker, see Hosting farmOS with Docker for Docker-specific update instructions. Backup your database, code, and files! Always do this before updating. Be ready and able to roll-back in the event that something goes wrong. Download the new recommended release of farmOS from https://drupal.org/project/farm Unzip the compressed folder, and replace everything in your Drupal codebase EXCEPT the /sites/ folder. Do not overwrite the /sites/ folder, because it contains content and configuration for your site. Run database updates . Optionally: Revert all Features via Drush. If you have intentionally overridden any specific farmOS configurations, then you should NOT do this. You will need to resolve any merge conflicts with farmOS core Features changes in order to complete the upgrade. See developing with updates in mind . drush fra","title":"Update procedure"}]}